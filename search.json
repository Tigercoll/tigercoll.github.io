[{"title":"jenkins安装","url":"/post/ee6ba771.html","content":"<p>Jenkins是开源软件项目，基于Java开发的持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p>\n<p><strong>Jenkins的功能</strong></p>\n<p>Jenkins的主要功能是将项目中重复执行的工作自动化的执行。如软件的建造（构建）和在配置文件下设置的job。具体功能大概有：</p>\n<p>1.软件的持续构建和测试，Jenkins提供了一个系统，使开发人员可以很容易的将改变集成到工程中。自动化的，持续的构建有利于提高开发效率。</p>\n<p>2.监视job的执行，如下图所示，job可以实现很多的功能，Jenkins可以对这些项目进行显示，让用户更清楚的注意到这些损毁的job。（具体情况后文中介绍）</p>\n<p>3.项目源代码修改的检测，jenkins能够从项目的Subversion&#x2F;CVS生成最近修改的集合列表，且不会增加Subversion&#x2F;CVS Repository的负载。</p>\n<p>4.分布式构建，Jenkins可以将工程构建到多台机器，更好地利用硬件资源，节省时间。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"最新版本Jenkins安装\"><a href=\"#最新版本Jenkins安装\" class=\"headerlink\" title=\"最新版本Jenkins安装\"></a>最新版本Jenkins安装</h2><h3 id=\"首先要先添加Jenkins源\"><a href=\"#首先要先添加Jenkins源\" class=\"headerlink\" title=\"首先要先添加Jenkins源:\"></a>首先要先添加Jenkins源:</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class=\"line\"></span><br><span class=\"line\">报错:ERROR: cannot verify pkg.jenkins.io’s certificate, issued by “/C=US/O=Let<span class=\"string\">&#x27;s Encrypt/CN=Let&#x27;</span>s Encrypt Authority X3”:</span><br><span class=\"line\">  Issued certificate not yet valid.</span><br><span class=\"line\">To connect to pkg.jenkins.io insecurely, use ‘--no-check-certificate’.</span><br></pre></td></tr></table></figure>\n\n<p>如果出现上述问题，则需修改命令为:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入公钥\"><a href=\"#导入公钥\" class=\"headerlink\" title=\"导入公钥\"></a>导入公钥</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加完成之后直接使用yum命令安装Jenkins\"><a href=\"#添加完成之后直接使用yum命令安装Jenkins\" class=\"headerlink\" title=\"添加完成之后直接使用yum命令安装Jenkins:\"></a>添加完成之后直接使用yum命令安装Jenkins:</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install fontconfig java-11-openjdk</span><br><span class=\"line\">yum install jenkins</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动jenkins\"><a href=\"#启动jenkins\" class=\"headerlink\" title=\"启动jenkins\"></a>启动jenkins</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start jenkins</span><br></pre></td></tr></table></figure>\n\n<p>如果发现启动失败,或许是你的java版本与之不匹配,查看java版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<p>卸载java</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum remove [要卸载的java]</span><br></pre></td></tr></table></figure>\n\n<p>如果还是不行就用<code>rpm -qa | grep [java]</code>查看</p>\n<p>并用 <code>rpm -e --nodeps [直接复制过来]</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.345.b01-1.el7_9.x86_64</span><br></pre></td></tr></table></figure>\n\n<p>然后重新启动jenkins 问题解决</p>\n","categories":["jenkins"],"tags":["jenkins","centos"]},{"title":"jenkins自动部署hexo","url":"/post/280160.html","content":"<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。我们可以利用jenkins来自动部署hexo.关于jenkins的安装,可以去查看我的另一篇文章—-jenkins<a href=\"https://tigercoll.top/post/ee6ba771.html#more\">安装教程</a></p>\n<span id=\"more\"></span>\n\n<p>hexo需要安装nodejs,</p>\n<h2 id=\"nodejs安装\"><a href=\"#nodejs安装\" class=\"headerlink\" title=\"nodejs安装\"></a>nodejs安装</h2><p>进入Node最新版下载 &lt;<a href=\"https://nodejs.org/en/download/current/\">https://nodejs.org/en/download/current/</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载nodejs</span></span><br><span class=\"line\">wget -O /home/node.tar.xz https://nodejs.org/dist/v16.17.0/node-v16.17.0-linux-x64.tar.xz</span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -xvf  /home/node.tar.xz -C /home</span><br><span class=\"line\"><span class=\"comment\"># 进入目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home/node-v16.17.0-linux-x64/bin/</span><br><span class=\"line\"><span class=\"comment\"># 测试是否成功</span></span><br><span class=\"line\">./node -v</span><br><span class=\"line\"><span class=\"comment\"># 加软连接</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /home/node-v16.17.0-linux-x64/bin/node /usr/local/bin/node</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /home/node-v16.17.0-linux-x64/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>如果提示找不到hexo命令 </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看npm包的路径</span></span><br><span class=\"line\">npm root -g</span><br><span class=\"line\"><span class=\"comment\"># 添加软链接</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /home/node-v16.17.0-linux-x64/lib/node_modules/hexo/bin/hexo /usr/local/bin/hexo</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"配置jenkins\"><a href=\"#配置jenkins\" class=\"headerlink\" title=\"配置jenkins\"></a>配置jenkins</h2><h3 id=\"新建任务\"><a href=\"#新建任务\" class=\"headerlink\" title=\"新建任务\"></a>新建任务</h3><p><img data-src=\"/../images/2022-09-21-jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo/image-20220927143528858.png\" alt=\"image-20220927143528858\"></p>\n<h3 id=\"添加源码管理\"><a href=\"#添加源码管理\" class=\"headerlink\" title=\"添加源码管理\"></a>添加源码管理</h3><p><img data-src=\"/../images/2022-09-21-jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo/image-20220927143853025.png\" alt=\"image-20220927143853025\"></p>\n<h3 id=\"添加凭证\"><a href=\"#添加凭证\" class=\"headerlink\" title=\"添加凭证\"></a>添加凭证</h3><p><img data-src=\"/../images/2022-09-21-jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo/image-20220927143941441.png\" alt=\"image-20220927143941441\"></p>\n<h3 id=\"添加私钥\"><a href=\"#添加私钥\" class=\"headerlink\" title=\"添加私钥\"></a>添加私钥</h3><p>使用<code>ssh-kengen</code>生成ssh密钥对</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&#x27;your email&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后将ssh密钥对复制到jenkins目录下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span>  ~/.ssh/id_rsa ~/.ssh/id_rsa.pub /var/lib/jenkins/.ssh/</span><br></pre></td></tr></table></figure>\n\n<p>将私钥id_rsa复制到jenkins下面</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span>  ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/2022-09-21-jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo/image-20220927144441833.png\" alt=\"image-20220927144441833\"></p>\n<h3 id=\"添加公钥\"><a href=\"#添加公钥\" class=\"headerlink\" title=\"添加公钥\"></a>添加公钥</h3><p>将公钥复制到github下</p>\n<p><img data-src=\"/../images/2022-09-21-jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo/image-20220927144519632.png\" alt=\"image-20220927144519632\"></p>\n<p><img data-src=\"/../images/2022-09-21-jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo/image-20220927144600645.png\" alt=\"image-20220927144600645\"></p>\n<p>没错等你添加完后会报错</p>\n<p><img data-src=\"/../images/2022-09-21-jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo/image-20220927144706745.png\" alt=\"image-20220927144706745\"></p>\n<p>当然确保你jenkins的机器安装了git</p>\n<p>只需要在jenkins的设备上运行一下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git ls-remote -h git@github.com:Tigercoll/hexo.git HEAD</span><br></pre></td></tr></table></figure>\n\n<p>然后将ssh下的 <code>known_hosts</code>文件放到jenkins的ssh目录下即可</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> ~/.ssh/known_hosts /var/lib/jenkins/.ssh/</span><br></pre></td></tr></table></figure>\n\n<p>直接保存再进去即可</p>\n<h3 id=\"更改分支\"><a href=\"#更改分支\" class=\"headerlink\" title=\"更改分支\"></a>更改分支</h3><p><img data-src=\"/../images/2022-09-21-jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo/image-20220927145201769.png\" alt=\"image-20220927145201769\"></p>\n<h3 id=\"配置Github-webhooks\"><a href=\"#配置Github-webhooks\" class=\"headerlink\" title=\"配置Github webhooks\"></a>配置Github webhooks</h3><h4 id=\"在对项目有写权限的用户上获取token\"><a href=\"#在对项目有写权限的用户上获取token\" class=\"headerlink\" title=\"在对项目有写权限的用户上获取token\"></a>在对项目有写权限的用户上获取token</h4><p>进入github –&gt; setting –&gt;Developer settings –&gt; Personal Access Token –&gt; Generate new token</p>\n<p><img data-src=\"/../images/2022-09-21-jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo/jenkins-1.png\" alt=\"img\"></p>\n<p>点击保存，获取token,并<strong>保存好你的token</strong></p>\n<h4 id=\"设置webhooks\"><a href=\"#设置webhooks\" class=\"headerlink\" title=\"设置webhooks\"></a>设置webhooks</h4><p>进入GitHub上指定的项目 –&gt; setting –&gt; WebHooks&amp;Services –&gt; add webhook –&gt; 输入刚刚部署jenkins的服务器的IP</p>\n<p><img data-src=\"/../images/2022-09-21-jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo/jenkins-2.png\" alt=\"img\"></p>\n<h3 id=\"配置Jenkins的Git-Plugin\"><a href=\"#配置Jenkins的Git-Plugin\" class=\"headerlink\" title=\"配置Jenkins的Git Plugin\"></a>配置Jenkins的Git Plugin</h3><p>新版Jenkins在初始的时候已经默认安装了Git Plugin和相关依赖的Plugin，我们不用在重复进行安装，直接配置即可</p>\n<p>系统管理 –&gt; 系统设置 –&gt; GitHub –&gt; Add GitHub Sever</p>\n<p>填写API URL为<a href=\"https://api.github.com/\">https://api.github.com</a></p>\n<p><img data-src=\"/../images/2022-09-21-jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo/jenkins-3.png\" alt=\"img\"></p>\n<p>点击旁边的Add按钮, 添加Secret Text</p>\n<p><img data-src=\"/../images/2022-09-21-jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo/jenkins-4.png\" alt=\"img\"></p>\n<h3 id=\"构建触发器，构建环境\"><a href=\"#构建触发器，构建环境\" class=\"headerlink\" title=\"构建触发器，构建环境\"></a>构建触发器，构建环境</h3><p><img data-src=\"/../images/2022-09-21-jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo/jenkins-7.png\" alt=\"img\"></p>\n<h3 id=\"编写你的构建脚本\"><a href=\"#编写你的构建脚本\" class=\"headerlink\" title=\"编写你的构建脚本\"></a>编写你的构建脚本</h3><p><img data-src=\"/../images/2022-09-21-jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo/image-20220927154407373.png\" alt=\"image-20220927154407373\"></p>\n<h2 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">jenkins 构建提示 Error: EACCES: permission denied</span><br></pre></td></tr></table></figure>\n\n<p>添加权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> -R jenkins:jenkins /var/lib/jenkins/</span><br></pre></td></tr></table></figure>\n\n<p>第一次构建项目也会报错,需要在jenkins本机workspace目录下运行一次</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">Hexo Cannot find module <span class=\"string\">&#x27;./build/Release/DTraceProviderBindings&#x27;</span> 错误</span><br></pre></td></tr></table></figure>\n\n<p>重新构建hexo</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo --no-optional</span><br></pre></td></tr></table></figure>\n\n<p>当然你可以直接在jenkins中添加</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g -d || npm install hexo --no-optional &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure>\n","categories":["jenkins自动化"],"tags":["jenkins","hexo"]},{"title":"Celery 介绍","url":"/post/983a2c20.html","content":"<p>Celery 是一个 基于python开发的分布式异步消息任务队列，通过它可以轻松的实现任务的异步处理， 如果你的业务场景中需要用到异步任务，就可以考虑使用celery， 举几个实例场景中可用的例子:</p>\n<ul>\n<li>异步任务：将耗时的操作任务提交给Celery去异步执行，比如发送短信&#x2F;邮件、消息推送、音频处理等等</li>\n<li>做一个定时任务，比如每天定时执行爬虫爬取指定内容</li>\n<li>还可以使用celery实现简单的分布式爬虫系统等等</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"Celery有以下优点：\"><a href=\"#Celery有以下优点：\" class=\"headerlink\" title=\"Celery有以下优点：\"></a>Celery有以下优点：</h2><ul>\n<li>简单：Celery 易于使用和维护，并且它 不需要配置文件 ，并且配置和使用还是比较简单的（后面会讲到配置文件可以有）</li>\n<li>高可用：当任务执行失败或执行过程中发生连接中断，celery 会自动尝试重新执行任务</li>\n<li>快速：单个 Celery 进程每分钟可处理数以百万计的任务，而保持往返延迟在亚毫秒级</li>\n<li>灵活： Celery 几乎所有部分都可以扩展或单独使用，各个部分可以自定义。</li>\n</ul>\n<h2 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程:\"></a>执行流程:</h2><p><img data-src=\"/../images/Celery-%E4%BB%8B%E7%BB%8D/1.png\" alt=\"1\"></p>\n<h2 id=\"组成模块\"><a href=\"#组成模块\" class=\"headerlink\" title=\"组成模块:\"></a>组成模块:</h2><ul>\n<li>任务模块 Task<ul>\n<li>用来创建异步任务,或者定时任务</li>\n</ul>\n</li>\n<li>消息中间件 Broker<ul>\n<li>用来调度生产者创建的任务,并将其放入消息队列(celery本身不提供消息队列, 官方推荐RabbitMQ 和 Redis 等)</li>\n</ul>\n</li>\n<li>任务执行单元 Worker<ul>\n<li>监控消息队列里的任务并执行。</li>\n</ul>\n</li>\n<li>结果存储 Backend<ul>\n<li>用于存储任务执行的结果。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"初识Celery\"><a href=\"#初识Celery\" class=\"headerlink\" title=\"初识Celery\"></a>初识Celery</h2><h3 id=\"安装Celery\"><a href=\"#安装Celery\" class=\"headerlink\" title=\"安装Celery\"></a>安装Celery</h3><p>我们直接通过pip来安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">pip install celery</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建tasks\"><a href=\"#创建tasks\" class=\"headerlink\" title=\"创建tasks\"></a>创建tasks</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入Celery对象</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> celery <span class=\"keyword\">import</span> Celery</span><br><span class=\"line\"><span class=\"comment\"># 配置消息中间件的地址，推荐用redis或者RabbitMQ</span></span><br><span class=\"line\"><span class=\"comment\"># 这里我们用redis</span></span><br><span class=\"line\"><span class=\"comment\"># redis://密码@地址:端口号/db</span></span><br><span class=\"line\">broker=<span class=\"string\">&#x27;redis://127.0.0.1:6379/1&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 配置结果存放地址</span></span><br><span class=\"line\">backend = <span class=\"string\">&#x27;redis://127.0.0.1:6379/2&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 实例化</span></span><br><span class=\"line\"><span class=\"comment\"># 第一个参数为命名，可以随便取</span></span><br><span class=\"line\"><span class=\"comment\"># 第二个参数为broker</span></span><br><span class=\"line\"><span class=\"comment\"># 第三个参数为backend</span></span><br><span class=\"line\">app = Celery(<span class=\"string\">&#x27;test&#x27;</span>,broker=broker,backend=backend)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个task函数</span></span><br><span class=\"line\"><span class=\"meta\">@app.task</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x,y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行worker\"><a href=\"#运行worker\" class=\"headerlink\" title=\"运行worker\"></a>运行worker</h3><p>在刚才创建的目录下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">运行worker</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">celery -A tasks worker --loglevel=info</span></span><br></pre></td></tr></table></figure>\n\n<p>成功后会输入如下信息</p>\n<p><img data-src=\"/../images/Celery-%E4%BB%8B%E7%BB%8D/image-20210119220136204.png\" alt=\"image-20210119220136204\"></p>\n<h3 id=\"调用任务\"><a href=\"#调用任务\" class=\"headerlink\" title=\"调用任务\"></a>调用任务</h3><p>打开<code>ipython</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入任务</span></span><br><span class=\"line\">In[<span class=\"number\">3</span>]: <span class=\"keyword\">from</span> tasks <span class=\"keyword\">import</span> add</span><br><span class=\"line\"><span class=\"comment\"># 运行任务</span></span><br><span class=\"line\">In[<span class=\"number\">4</span>]: add.delay(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果ID</span></span><br><span class=\"line\">Out[<span class=\"number\">4</span>]: &lt;AsyncResult: 070956a9-0791-43c6-9bb6-55af6460cc37&gt;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到我们启动的worker已经把结果计算完了</p>\n<p><img data-src=\"/../images/Celery-%E4%BB%8B%E7%BB%8D/image-20210119221336068.png\" alt=\"image-20210119221336068\"></p>\n<p>我们还可以去<code>redis</code>中查看</p>\n<p><img data-src=\"/../images/Celery-%E4%BB%8B%E7%BB%8D/image-20210119221812325.png\" alt=\"image-20210119221812325\"></p>\n<h3 id=\"获取结果\"><a href=\"#获取结果\" class=\"headerlink\" title=\"获取结果\"></a>获取结果</h3><p>那么我们如何获取到执行的结果呢？</p>\n<p>我们可以</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> celery.result <span class=\"keyword\">import</span> AsyncResult</span><br><span class=\"line\">res=AsyncResult(<span class=\"string\">&quot;070956a9-0791-43c6-9bb6-55af6460cc37&quot;</span>) <span class=\"comment\"># 参数为task id</span></span><br><span class=\"line\">res.result</span><br></pre></td></tr></table></figure>\n\n","categories":["异步消息队列"],"tags":["异步消息","celery"]},{"title":"centos开放指定端口","url":"/post/f39c9d09.html","content":"<center>centos7开放指定端口</center>\n\n<span id=\"more\"></span>\n\n<h4 id=\"开启指定端口：\"><a href=\"#开启指定端口：\" class=\"headerlink\" title=\"开启指定端口：\"></a>开启指定端口：</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=端口号/tcp --permanent</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"开启指定端口后必须重启防火墙，重启命令\"><a href=\"#开启指定端口后必须重启防火墙，重启命令\" class=\"headerlink\" title=\"开启指定端口后必须重启防火墙，重启命令\"></a>开启指定端口后必须重启防火墙，重启命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查看防火墙状态\"><a href=\"#查看防火墙状态\" class=\"headerlink\" title=\"查看防火墙状态\"></a>查看防火墙状态</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl status firewalld.service</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"开启防火墙\"><a href=\"#开启防火墙\" class=\"headerlink\" title=\"开启防火墙\"></a>开启防火墙</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl start firewalld.service</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"禁止开机启动\"><a href=\"#禁止开机启动\" class=\"headerlink\" title=\"禁止开机启动\"></a>禁止开机启动</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"开启开机启动\"><a href=\"#开启开机启动\" class=\"headerlink\" title=\"开启开机启动\"></a>开启开机启动</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl enable firewalld.service</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查看已开放端口\"><a href=\"#查看已开放端口\" class=\"headerlink\" title=\"查看已开放端口\"></a>查看已开放端口</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure>\n\n","categories":["centos"],"tags":["centos","防火墙","端口"]},{"title":"Dockerfile","url":"/post/5624fad4.html","content":"<h2 id=\"什么是Dockerfile\"><a href=\"#什么是Dockerfile\" class=\"headerlink\" title=\"什么是Dockerfile?\"></a>什么是Dockerfile?</h2><p>Dockerfile是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker通过读取 Dockerfile 中的指令自动生成映像。</p>\n<p>Dockerfile 一般分为四部分：</p>\n<ol>\n<li>基础镜像信息</li>\n<li>维护者信息</li>\n<li>镜像操作指令</li>\n<li>容器启动时执行指令</li>\n</ol>\n<p><code>#</code> 为 Dockerfile 中的注释。</p>\n<p>Docker 以从上到下的顺序运行 Dockerfile 的指令。为了指定基本映像，<strong>第一条指令必须是FROM</strong>。一个声明以<code>＃</code> 字符开头则被视为注释。可以在Docker文件中使用 <code>RUN</code>，<code>CMD</code>，<code>FROM</code>，<code>EXPOSE</code>，<code>ENV</code> 等指令。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><h3 id=\"FROM：指定基础镜像，必须为第一个命令\"><a href=\"#FROM：指定基础镜像，必须为第一个命令\" class=\"headerlink\" title=\"FROM：指定基础镜像，必须为第一个命令\"></a><code>FROM</code>：指定基础镜像，必须为第一个命令</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">　　<span class=\"keyword\">FROM</span> &lt;image&gt;</span><br><span class=\"line\">　　<span class=\"keyword\">FROM</span> &lt;image&gt;:&lt;tag&gt;</span><br><span class=\"line\">　　<span class=\"keyword\">FROM</span> &lt;image&gt;@&lt;digest&gt;</span><br><span class=\"line\">示例：</span><br><span class=\"line\">　　<span class=\"keyword\">FROM</span> mysql:<span class=\"number\">5.6</span></span><br><span class=\"line\">注：</span><br><span class=\"line\">tag 或 digest 是可选的，如果不使用这两个值时，会使用 latest 版本的基础镜像</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MAINTAINER：维护者信息\"><a href=\"#MAINTAINER：维护者信息\" class=\"headerlink\" title=\"MAINTAINER：维护者信息\"></a><code>MAINTAINER</code>：维护者信息</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">    <span class=\"keyword\">MAINTAINER</span> &lt;name&gt;</span><br><span class=\"line\">示例：</span><br><span class=\"line\">    <span class=\"keyword\">MAINTAINER</span> tt</span><br><span class=\"line\">    <span class=\"keyword\">MAINTAINER</span> tt@<span class=\"number\">163</span>.com</span><br><span class=\"line\">    <span class=\"keyword\">MAINTAINER</span> tt &lt;tt@<span class=\"number\">163</span>.com&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RUN：构建镜像时执行的命令\"><a href=\"#RUN：构建镜像时执行的命令\" class=\"headerlink\" title=\"RUN：构建镜像时执行的命令\"></a><code>RUN</code>：构建镜像时执行的命令</h3><p><code>RUN</code> 用于在镜像容器中执行命令，其有以下两种命令执行方式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">shell</span><span class=\"language-bash\">执行</span></span><br><span class=\"line\">\t<span class=\"keyword\">RUN</span><span class=\"language-bash\"> &lt;<span class=\"built_in\">command</span>&gt;</span></span><br><span class=\"line\">exec执行</span><br><span class=\"line\">\t<span class=\"keyword\">RUN</span><span class=\"language-bash\"> [<span class=\"string\">&quot;executable&quot;</span>, <span class=\"string\">&quot;param1&quot;</span>, <span class=\"string\">&quot;param2&quot;</span>]</span></span><br><span class=\"line\">注：</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> 指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定--no-cache参数，如：docker build --no-cache</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"COPY-复制指令，从上下文目录中复制文件或者目录到容器里指定路径\"><a href=\"#COPY-复制指令，从上下文目录中复制文件或者目录到容器里指定路径\" class=\"headerlink\" title=\"COPY:复制指令，从上下文目录中复制文件或者目录到容器里指定路径\"></a><code>COPY</code>:复制指令，从上下文目录中复制文件或者目录到容器里指定路径</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">    <span class=\"keyword\">COPY</span><span class=\"language-bash\"> [--<span class=\"built_in\">chown</span>=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">COPY</span><span class=\"language-bash\"> [--<span class=\"built_in\">chown</span>=&lt;user&gt;:&lt;group&gt;] [<span class=\"string\">&quot;&lt;源路径1&gt;&quot;</span>,...  <span class=\"string\">&quot;&lt;目标路径&gt;&quot;</span>]</span></span><br><span class=\"line\">    [--chown=&lt;<span class=\"keyword\">user</span>&gt;:&lt;group&gt;]：可选参数，用户改变复制到容器内文件的拥有者和属组。</span><br><span class=\"line\">&lt;源路径&gt;：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> hom* /mydir/</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> hom?.txt /mydir/</span></span><br><span class=\"line\">&lt;目标路径&gt;：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ADD-将本地文件添加到容器中\"><a href=\"#ADD-将本地文件添加到容器中\" class=\"headerlink\" title=\"ADD:将本地文件添加到容器中\"></a>ADD:将本地文件添加到容器中</h3><p>ADD 指令和 COPY 的使用格式一致（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：</p>\n<ul>\n<li>ADD 的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;。</li>\n<li>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</li>\n</ul>\n<h3 id=\"CMD-构建容器后调用\"><a href=\"#CMD-构建容器后调用\" class=\"headerlink\" title=\"CMD:构建容器后调用\"></a>CMD:构建容器后调用</h3><p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p>\n<ul>\n<li>CMD 在docker run 时运行。</li>\n<li>RUN 是在 docker build。</li>\n</ul>\n<p><strong>作用</strong>：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。</p>\n<p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</p>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> &lt;shell 命令&gt; </span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;&lt;可执行文件或命令&gt;&quot;</span>,<span class=\"string\">&quot;&lt;param1&gt;&quot;</span>,<span class=\"string\">&quot;&lt;param2&gt;&quot;</span>,...] </span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;&lt;param1&gt;&quot;</span>,<span class=\"string\">&quot;&lt;param2&gt;&quot;</span>,...]  <span class=\"comment\"># 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</span></span></span><br></pre></td></tr></table></figure>\n\n<p>推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。</p>\n<h3 id=\"ENTRYPOINT-追加指令\"><a href=\"#ENTRYPOINT-追加指令\" class=\"headerlink\" title=\"ENTRYPOINT:追加指令\"></a>ENTRYPOINT:追加指令</h3><p>类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。</p>\n<p>但是, 如果运行 docker run 时使用了 —entrypoint 选项，此选项的参数可当作要运行的程序覆盖 ENTRYPOINT 指令指定的程序。</p>\n<p><strong>优点</strong>：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。</p>\n<p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。</p>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;&lt;executeable&gt;&quot;</span>,<span class=\"string\">&quot;&lt;param1&gt;&quot;</span>,<span class=\"string\">&quot;&lt;param2&gt;&quot;</span>,...]</span></span><br></pre></td></tr></table></figure>\n\n<p>可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。</p>\n<p>示例：</p>\n<p>假设已通过 Dockerfile 构建了 nginx:test 镜像：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;nginx&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>] <span class=\"comment\"># 定参</span></span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;/etc/nginx/nginx.conf&quot;</span>] <span class=\"comment\"># 变参</span></span></span><br></pre></td></tr></table></figure>\n\n<p>1、不传参运行</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"keyword\">run</span><span class=\"language-bash\">  nginx:<span class=\"built_in\">test</span></span></span><br></pre></td></tr></table></figure>\n\n<p>容器内会默认运行以下命令，启动主进程。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>2、传参运行</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"keyword\">run</span><span class=\"language-bash\">  nginx:<span class=\"built_in\">test</span> -c /etc/nginx/new.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>容器内会默认运行以下命令，启动主进程(&#x2F;etc&#x2F;nginx&#x2F;new.conf:假设容器内已有此文件)</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx -c /etc/nginx/new.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ENV-设置环境变量\"><a href=\"#ENV-设置环境变量\" class=\"headerlink\" title=\"ENV:设置环境变量\"></a>ENV:设置环境变量</h3><p>设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br></pre></td></tr></table></figure>\n\n<p>以下示例设置 NODE_VERSION &#x3D; 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ENV</span> NODE_VERSION <span class=\"number\">7.2</span>.<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> curl -SLO <span class=\"string\">&quot;https://nodejs.org/dist/v<span class=\"variable\">$NODE_VERSION</span>/node-v<span class=\"variable\">$NODE_VERSION</span>-linux-x64.tar.xz&quot;</span> \\</span></span><br><span class=\"line\"><span class=\"language-bash\">  &amp;&amp; curl -SLO <span class=\"string\">&quot;https://nodejs.org/dist/v<span class=\"variable\">$NODE_VERSION</span>/SHASUMS256.txt.asc&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ARG-设置的环境变量仅对-Dockerfile-内有效\"><a href=\"#ARG-设置的环境变量仅对-Dockerfile-内有效\" class=\"headerlink\" title=\"ARG:设置的环境变量仅对 Dockerfile 内有效\"></a>ARG:设置的环境变量仅对 Dockerfile 内有效</h3><p>构建参数，与 ENV 作用一至。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。</p>\n<p>构建命令 docker build 中可以用 —build-arg &lt;参数名&gt;&#x3D;&lt;值&gt; 来覆盖。</p>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ARG</span> &lt;参数名&gt;[=&lt;默认值&gt;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"VOLUME-定义匿名数据卷\"><a href=\"#VOLUME-定义匿名数据卷\" class=\"headerlink\" title=\"VOLUME:定义匿名数据卷\"></a>VOLUME:定义匿名数据卷</h3><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p>\n<p>作用：</p>\n<ul>\n<li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li>\n<li>避免容器不断变大。</li>\n</ul>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">VOLUME</span><span class=\"language-bash\"> [<span class=\"string\">&quot;&lt;路径1&gt;&quot;</span>, <span class=\"string\">&quot;&lt;路径2&gt;&quot;</span>...]</span></span><br><span class=\"line\"><span class=\"keyword\">VOLUME</span><span class=\"language-bash\"> &lt;路径&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。</p>\n<h3 id=\"EXPOSE-暴露端口\"><a href=\"#EXPOSE-暴露端口\" class=\"headerlink\" title=\"EXPOSE:暴露端口\"></a>EXPOSE:暴露端口</h3><p>仅仅只是声明端口。</p>\n<p>作用：</p>\n<ul>\n<li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li>\n<li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li>\n</ul>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXPOSE</span> &lt;端口<span class=\"number\">1</span>&gt; [&lt;端口<span class=\"number\">2</span>&gt;...]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"WORKDIR-docker-run之后的目录\"><a href=\"#WORKDIR-docker-run之后的目录\" class=\"headerlink\" title=\"WORKDIR:docker run之后的目录\"></a>WORKDIR:docker run之后的目录</h3><p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。</p>\n<p>docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。</p>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> &lt;工作目录路径&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"USER-指定运行后面指令的用户和用户组\"><a href=\"#USER-指定运行后面指令的用户和用户组\" class=\"headerlink\" title=\"USER:指定运行后面指令的用户和用户组\"></a>USER:指定运行后面指令的用户和用户组</h3><p>用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。</p>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">USER</span> &lt;用户名&gt;[:&lt;用户组&gt;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HEALTHCHECK-用于指定某个程序或者指令来监控-docker-容器服务的运行状态。\"><a href=\"#HEALTHCHECK-用于指定某个程序或者指令来监控-docker-容器服务的运行状态。\" class=\"headerlink\" title=\"HEALTHCHECK:用于指定某个程序或者指令来监控 docker 容器服务的运行状态。\"></a>HEALTHCHECK:用于指定某个程序或者指令来监控 docker 容器服务的运行状态。</h3><p>用于指定某个程序或者指令来监控 docker 容器服务的运行状态。</p>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">HEALTHCHECK</span><span class=\"language-bash\"> [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令</span></span><br><span class=\"line\"><span class=\"keyword\">HEALTHCHECK</span><span class=\"language-bash\"> NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</span></span><br><span class=\"line\"><span class=\"keyword\">HEALTHCHECK</span><span class=\"language-bash\"> [选项] CMD &lt;命令&gt; : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ONBUILD-用于延迟构建命令的执行\"><a href=\"#ONBUILD-用于延迟构建命令的执行\" class=\"headerlink\" title=\"ONBUILD:用于延迟构建命令的执行\"></a>ONBUILD:用于延迟构建命令的执行</h3><p>用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这是执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。</p>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ONBUILD</span> &lt;其它指令&gt;</span><br></pre></td></tr></table></figure>\n\n<p>以上参考: <a href=\"https://www.runoob.com/docker/docker-dockerfile.html\">https://www.runoob.com/docker/docker-dockerfile.html</a></p>\n<h2 id=\"实例-制作一个Dockerfile\"><a href=\"#实例-制作一个Dockerfile\" class=\"headerlink\" title=\"实例:制作一个Dockerfile\"></a>实例:制作一个Dockerfile</h2><p>我们在<code>/home</code>下新建一个文件夹 <code>mkdir -f /home/project</code></p>\n<p>进入该目录 <code>cd /home/project</code></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim app.py</span><br><span class=\"line\"><span class=\"comment\">#app.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask import Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(<span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">def hello_world():</span><br><span class=\"line\">    return <span class=\"string\">&#x27;Hello DockerFile!&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run(host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>, port=<span class=\"number\">5000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>新建一个<code>Dockerfile</code>文件,</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Base images 基础镜像 必须放在开头</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> centos</span><br><span class=\"line\"><span class=\"comment\">#MAINTAINER 维护者信息</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> Tigercoll</span><br><span class=\"line\"><span class=\"comment\"># 更新 以及安装python</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum -y install python3</span></span><br><span class=\"line\"><span class=\"comment\"># 安装flask</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip3 install flask</span></span><br><span class=\"line\"><span class=\"comment\"># 设置环境项目目录</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> WORKPATH /flask/project</span><br><span class=\"line\"><span class=\"comment\"># 创建目录</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$WORKPATH</span></span></span><br><span class=\"line\"><span class=\"comment\"># 拷贝文件到项目目录</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> app.py <span class=\"variable\">$WORKPATH</span></span></span><br><span class=\"line\"><span class=\"comment\"># 切换工作目录</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> <span class=\"variable\">$WORKPATH</span></span></span><br><span class=\"line\"><span class=\"comment\"># 暴露端口</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"comment\"># 容器启动时执行</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> python3 app.py</span></span><br></pre></td></tr></table></figure>\n\n<p>制作镜像 <code>docker build -t flask:1.0 .</code> 如果名字是Dockerfile的话就不需要 <code>-f</code> 指定,如果不是请用 <code>-f</code> 指定文件,</p>\n<p>这个<code>.</code>是上下文路径:上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p>\n<p><strong>解析</strong>：由于 docker 的运行模式是 C&#x2F;S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p>\n<p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。</p>\n<p><strong>注意</strong>：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">Removing intermediate container <span class=\"number\">53</span>b01ced53d2</span><br><span class=\"line\"> ---&gt; <span class=\"number\">708</span>e9ab6c83e</span><br><span class=\"line\">Step <span class=\"number\">10</span>/<span class=\"number\">10</span> : <span class=\"keyword\">CMD</span><span class=\"language-bash\"> python3 app.py</span></span><br><span class=\"line\"> ---&gt; Running in <span class=\"number\">871455</span>a7187c</span><br><span class=\"line\">Removing intermediate container <span class=\"number\">871455</span>a7187c</span><br><span class=\"line\"> ---&gt; <span class=\"number\">90</span>d4d1c76098</span><br><span class=\"line\">Successfully built <span class=\"number\">90</span>d4d1c76098</span><br><span class=\"line\">Successfully tagged flask:<span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到这里制作成功了我们<code>docker images</code>看一下</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost project]<span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">flask               <span class=\"number\">1.0</span>                 <span class=\"number\">90</span>d4d1c76098        <span class=\"number\">4</span> minutes ago       <span class=\"number\">275</span>MB</span><br><span class=\"line\">centos              latest              <span class=\"number\">470671670</span>cac        <span class=\"number\">4</span> months ago        <span class=\"number\">237</span>MB</span><br></pre></td></tr></table></figure>\n\n<p>运行一下 <code>docker run -d -p 5000:5000 flask:1.0</code></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost project]<span class=\"comment\"># docker run -d -p 5000:5000 flask:1.0</span></span><br><span class=\"line\">ea4400c411b18c286731b51ce2e4b7b13c320e08a10b3f7b55e6fb5ed6220722</span><br></pre></td></tr></table></figure>\n\n<p>查看<code>docker ps</code></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost project]<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class=\"line\">ea4400c411b1        flask:<span class=\"number\">1.0</span>           <span class=\"string\">&quot;/bin/sh -c &#x27;python3…&quot;</span>   <span class=\"number\">23</span> seconds ago      Up <span class=\"number\">22</span> seconds       <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">5000</span>-&gt;<span class=\"number\">5000</span>/tcp   admiring_agnesi</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/Dockerfile/image-20200604233641684-16506093032071.png\" alt=\"img\"></p>\n<p>可以看到浏览器能正常访问,说明我们的Dockerfile 制作成功</p>\n","categories":["Dockerfile"],"tags":["docker","Dockerfile"]},{"title":"DHCP","url":"/post/fb84813c.html","content":"<p>动态主机配置协议是一个局域网的<a href=\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/328636?fromModule=lemma_inlink\">网络协议</a>。指的是由<a href=\"https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571?fromModule=lemma_inlink\">服务器</a>控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和<a href=\"https://baike.baidu.com/item/%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81/100207?fromModule=lemma_inlink\">子网掩码</a>。担任DHCP服务器的计算机需要安装<a href=\"https://baike.baidu.com/item/TCP%2FIP%E5%8D%8F%E8%AE%AE?fromModule=lemma_inlink\">TCP&#x2F;IP协议</a>，并为其设置<a href=\"https://baike.baidu.com/item/%E9%9D%99%E6%80%81IP%E5%9C%B0%E5%9D%80?fromModule=lemma_inlink\">静态IP地址</a>、子网掩码、<a href=\"https://baike.baidu.com/item/%E9%BB%98%E8%AE%A4%E7%BD%91%E5%85%B3/2152622?fromModule=lemma_inlink\">默认网关</a>等内容。</p>\n<p>DHCP是由<a href=\"https://baike.baidu.com/item/IETF?fromModule=lemma_inlink\">IETF</a>（internet 工作任务小组）开发设计的，于1993年10月成为标准协议，其前身是BOOTP协议。当前的DHCP定义可以在RFC 2131中找到，而基于<a href=\"https://baike.baidu.com/item/IPv6?fromModule=lemma_inlink\">IPv6</a>的建议标准（DHCPv6）可以在RFC 3315中找到。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h3><p><img data-src=\"/../images/DHCP/8ad461295fb94e6f9aeaecce6deea128.png\" alt=\"DHCP工作流程\"></p>\n<h3 id=\"DHCP两种配置办法\"><a href=\"#DHCP两种配置办法\" class=\"headerlink\" title=\"DHCP两种配置办法\"></a>DHCP两种配置办法</h3><ol>\n<li><p>接口配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">dhcp enable                          # 开启dhcp功能</span><br><span class=\"line\">interface G0/0/0                     # 进入接口</span><br><span class=\"line\">dhcp select interface                # 关联接口</span><br><span class=\"line\">dhcp server dns-list X.X.X.X         # 配置DNS\t</span><br><span class=\"line\">dhcp excluded-ip-address X.X.X.X     # 排除地址</span><br><span class=\"line\">dhcp server static-bind ip-address X.X.X.X mac-address XXX-XXX-XXX 配置静态绑定</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>全局配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">dhcp enable              # 开启全局</span><br><span class=\"line\">ip pool 地址池名称        # 创建全局地址池</span><br><span class=\"line\">network ip地址 mask      # 配置全局地址池可分配网段</span><br><span class=\"line\">gateway-list ip地址      # 配置网关地址</span><br><span class=\"line\">dns-list ip地址          # 配置DNS</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入接口</span></span><br><span class=\"line\">dhcp select global</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看地址池属性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">display ip pool [接口名称] # 查看地址池属性</span><br></pre></td></tr></table></figure></li>\n</ol>\n","categories":["交换机"],"tags":["DHCP","交换机"]},{"title":"Docker数据管理(数据卷&数据卷容器)","url":"/post/bba4516c.html","content":"<p>有些时候，我们的服务运行时必不可少的会产生一些日志，或是我们需要把容器内的数据进行备份，甚至多个容器之间进行数据共享，这必然涉及容器的数据管理操作。</p>\n<p><strong>容器中管理数据主要有两种方式：</strong></p>\n<p>数据卷</p>\n<p>数据卷容器</p>\n<span id=\"more\"></span>\n\n<h2 id=\"数据卷\"><a href=\"#数据卷\" class=\"headerlink\" title=\"数据卷\"></a>数据卷</h2><p>数据卷是一个可供容器使用的特殊目录，它绕过文件系统，可以提供很多有用的特性：</p>\n<ul>\n<li>数据卷可以在容器之间共享和重用</li>\n<li>对数据卷的修改会立马生效</li>\n<li>对数据卷的更新，不会影响镜像</li>\n<li>卷会一直存在，直到没有容器使用</li>\n</ul>\n<p>#(类似linux下的挂载(mount))</p>\n<h3 id=\"命令添加\"><a href=\"#命令添加\" class=\"headerlink\" title=\"命令添加\"></a>命令添加</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -v /宿主机绝对路劲目录:/容器内目录:读写权限 镜像名称</span><br></pre></td></tr></table></figure>\n\n<p>实例:创建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo docker run -it -v /home/apples/Desktop/dateVolume:/dateVolume centos</span></span><br><span class=\"line\">[root@b0f35537f8c3 /]# </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这个时候已经进入到centos容器当中,我们<span class=\"built_in\">ls</span>查看,有刚才的dateVolume</span></span><br><span class=\"line\">[root@b0f35537f8c3 /]# ls</span><br><span class=\"line\">bin\t    dev  home  lib64\t   media  opt\troot  sbin  sys  usr</span><br><span class=\"line\">dateVolume  etc  lib   lost+found  mnt\t  proc\trun   srv   tmp  var</span><br></pre></td></tr></table></figure>\n\n<p>我们新建一个ssh连接查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">apples@apples-PC:~$ ls /home/apples/Desktop/</span><br><span class=\"line\">dateVolume</span><br></pre></td></tr></table></figure>\n\n<p>所以-v 会新建一个目录,如果原来没有的话</p>\n<p>我们可以用<code>docker inspect 容器ID</code>查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;HostConfig&quot;: &#123;</span><br><span class=\"line\">            &quot;Binds&quot;: [</span><br><span class=\"line\">                &quot;/home/apples/Desktop/dateVolume:/dateVolume&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;Mounts&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;Type&quot;: &quot;bind&quot;,</span><br><span class=\"line\">                &quot;Source&quot;: &quot;/home/apples/Desktop/dateVolume&quot;,</span><br><span class=\"line\">                &quot;Destination&quot;: &quot;/dateVolume&quot;,</span><br><span class=\"line\">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class=\"line\">                &quot;RW&quot;: true, #读写</span><br><span class=\"line\">                &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据共享\"><a href=\"#数据共享\" class=\"headerlink\" title=\"数据共享\"></a>数据共享</h3><p>我们进入宿主机刚才创建的目录<code>dateVolume</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">~/Desktop/dateVolume$ </span><span class=\"language-bash\">sudo <span class=\"built_in\">touch</span> a.txt</span></span><br></pre></td></tr></table></figure>\n\n<p>切换回容器中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@b0f35537f8c3 /]# cd dateVolume/</span><br><span class=\"line\">[root@b0f35537f8c3 dateVolume]# ls</span><br><span class=\"line\">a.txt</span><br></pre></td></tr></table></figure>\n\n<p>发现容器中已经存在刚才创建的<code>a.txt</code></p>\n<p>我们在容器中写入数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@b0f35537f8c3 dateVolume]# echo &quot;update in container&quot; &gt; a.txt</span><br></pre></td></tr></table></figure>\n\n<p>我们切换回宿主机 <code>cat</code>查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">apples@apples-PC:~/Desktop/dateVolume$ cat a.txt </span><br><span class=\"line\">update in container</span><br></pre></td></tr></table></figure>\n\n<p>证明:数据卷可以在容器之间共享和重用,对数据卷的修改会立马生效</p>\n<h3 id=\"DockerFile添加\"><a href=\"#DockerFile添加\" class=\"headerlink\" title=\"DockerFile添加\"></a>DockerFile添加</h3><p>Dockfile是一种被Docker程序解释的脚本，Dockerfile由一条一条的指令组成，每条指令对应Linux下面的一条命令。Docker程序将这些Dockerfile指令翻译真正的Linux命令。Dockerfile有自己书写格式和支持的命令，Docker程序解决这些命令间的依赖关系，类似于Makefile。Docker程序将读取Dockerfile，根据指令生成定制的image。相比image这种黑盒子，Dockerfile这种显而易见的脚本更容易被使用者接受，它明确的表明image是怎么产生的。有了Dockerfile，当我们需要定制自己额外的需求时，只需在Dockerfile上添加或者修改指令，重新生成image即可，省去了敲命令的麻烦。</p>\n<p>DockerFile 中有个<code>VOLUME</code>来定义匿名的数据卷</p>\n<h4 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a>VOLUME</h4><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p>\n<p>作用：</p>\n<ul>\n<li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li>\n<li>避免容器不断变大。</li>\n</ul>\n<p>格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</span><br><span class=\"line\">VOLUME &lt;路径&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。</p>\n<p>我们可以在<code>docker inspect</code> 中查看挂载到宿主机上的路径</p>\n<h2 id=\"数据卷容器\"><a href=\"#数据卷容器\" class=\"headerlink\" title=\"数据卷容器\"></a><strong>数据卷容器</strong></h2><p>如果用户需要在容器之间共享一些持续更新的数据，最简单的方式是使用数据卷容器，数据卷容器其实是一个普通的容器，专门用来提供数据卷供其它容器挂载。</p>\n<p>数据卷容器，其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载的。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --volumes-from [容器名称]</span><br></pre></td></tr></table></figure>\n\n<p>我们用刚才已经挂载过的容器(必须要有一个已经挂载过数据卷)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">~/Desktop/dateVolume$ </span><span class=\"language-bash\">sudo docker ps</span></span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">b0f35537f8c3        centos              &quot;/bin/bash&quot;         About an hour ago   Up About an hour                        priceless_cartwright</span><br></pre></td></tr></table></figure>\n\n<p>然后，在其他容器中使用 <code>--volumes-from</code> 来挂载 刚才容器中的数据卷。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">~/Desktop/dateVolume$ </span><span class=\"language-bash\">sudo docker run -it --volumes-from priceless_cartwright --name mycentos_1 centos</span></span><br><span class=\"line\">[root@2192a4befa17 /]#</span><br></pre></td></tr></table></figure>\n\n<p>我们检查一下之前的数据是否存在</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@2192a4befa17 /]# ls</span><br><span class=\"line\">bin  dateVolume  dev  etc  home  lib  lib64  lost+found  media\tmnt  opt  proc\troot  run  sbin  srv  sys  tmp\tusr  var</span><br><span class=\"line\">[root@2192a4befa17 /]# ls dateVolume/</span><br><span class=\"line\">a.txt</span><br></pre></td></tr></table></figure>\n\n<p>注意：使用 <code>--volumes-from</code> 参数所挂载数据卷的容器自己并不需要保持在运行状态。</p>\n<p>如果删除了挂载的容器，数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时使用 <code>docker rm -v</code> 命令来指定同时删除关联的容器。 这可以让用户在容器之间升级和移动数据卷。</p>\n<h3 id=\"利用数据卷容器来备份、恢复、迁移数据卷\"><a href=\"#利用数据卷容器来备份、恢复、迁移数据卷\" class=\"headerlink\" title=\"利用数据卷容器来备份、恢复、迁移数据卷\"></a>利用数据卷容器来备份、恢复、迁移数据卷</h3><p>可以利用数据卷对其中的数据进行进行备份、恢复和迁移。</p>\n<h4 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h4><p>首先使用 <code>--volumes-from</code> 标记来创建一个加载 dbdata 容器卷的容器，并从本地主机挂载当前到容器的 &#x2F;backup 目录。命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo docker run --volumes-from dbdata -v $(<span class=\"built_in\">pwd</span>):/backup ubuntu tar cvf /backup/backup.tar /dbdata</span></span><br></pre></td></tr></table></figure>\n\n<p>容器启动后，使用了 <code>tar</code> 命令来将 dbdata 卷备份为本地的 <code>/backup/backup.tar</code>。</p>\n<h4 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h4><p>如果要恢复数据到一个容器，首先创建一个带有数据卷的容器 dbdata2。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo docker run -v /dbdata --name dbdata2 ubuntu /bin/bash</span></span><br></pre></td></tr></table></figure>\n\n<p>然后创建另一个容器，挂载 dbdata2 的容器，并使用 <code>untar</code> 解压备份文件到挂载的容器卷中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo docker run --volumes-from dbdata2 -v $(<span class=\"built_in\">pwd</span>):/backup busybox tar xvf</span></span><br><span class=\"line\">/backup/backup.tar</span><br></pre></td></tr></table></figure>\n\n","categories":["docker"],"tags":["docker","数据卷","数据卷容器"]},{"title":"Mysql新建用户与授权","url":"/post/4c6977a9.html","content":"<h1 id=\"mysql创建用户\"><a href=\"#mysql创建用户\" class=\"headerlink\" title=\"mysql创建用户\"></a>mysql创建用户</h1><h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令:\"></a>命令:</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE USER &#x27;username&#x27;@&#x27;host&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明:\"></a>说明:</h3><ul>\n<li>username: 用户名,</li>\n<li>host:指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以<strong>从任意远程主机登陆</strong>，可以使用通配符<code>%</code></li>\n<li>password: 密码</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权:\"></a>授权:</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant privilegesCode on dbName.tableName to username@host identified by &quot;password&quot;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"说明-1\"><a href=\"#说明-1\" class=\"headerlink\" title=\"说明:\"></a>说明:</h3><ul>\n<li>privilegesCode:权限,<ul>\n<li>all privileges：所有权限。</li>\n<li>select：读取权限。</li>\n<li>delete：删除权限。</li>\n<li>update：更新权限。</li>\n<li>create：创建权限。</li>\n<li>drop：删除数据库、数据表权限.</li>\n<li>dbName:数据库名.</li>\n<li>tableName:表名.</li>\n<li>username@host:赋予权限的用户.</li>\n<li>password:密码</li>\n</ul>\n</li>\n</ul>\n<p>加完权限需要刷新一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">flush privileges :表示刷新权限变更。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意:\"></a>注意:</h3><p>用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GRANT privileges ON databasename.tablename TO &#x27;username&#x27;@&#x27;host&#x27; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置与更改用户密码\"><a href=\"#设置与更改用户密码\" class=\"headerlink\" title=\"设置与更改用户密码\"></a>设置与更改用户密码</h2><h3 id=\"命令-1\"><a href=\"#命令-1\" class=\"headerlink\" title=\"命令:\"></a>命令:</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SET PASSWORD FOR &#x27;username&#x27;@&#x27;host&#x27; = PASSWORD(&#x27;newpassword&#x27;);</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"撤销用户权限\"><a href=\"#撤销用户权限\" class=\"headerlink\" title=\"撤销用户权限\"></a>撤销用户权限</h2><h3 id=\"命令-2\"><a href=\"#命令-2\" class=\"headerlink\" title=\"命令:\"></a>命令:</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">REVOKE privilege ON databasename.tablename FROM &#x27;username&#x27;@&#x27;host&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h2><h3 id=\"命令-3\"><a href=\"#命令-3\" class=\"headerlink\" title=\"命令:\"></a>命令:</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP USER &#x27;username&#x27;@&#x27;host&#x27;;</span><br></pre></td></tr></table></figure>\n","categories":["mysql"],"tags":["mysql","创建用户","授权"]},{"title":"Linux多命令顺序执行","url":"/post/8827c927.html","content":"<p>对于单个命令执行大多数人都是明了的，也就是在一个命令行上执行一条命令。那对于在一行上执行多个命令怎么办呢，其实也很简单，只需在各命令之间加上特殊命令符号，我们常规使用到的有3个特殊命令符号。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"[;]\"></a>[;]</h2><p>如果被分号(;)所分隔的命令会连续的执行下去，就算是错误的命令也会继续执行后面的命令。</p>\n<p><img data-src=\"/../images/Linux%E5%A4%9A%E5%91%BD%E4%BB%A4%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C/image-20220927160841394.png\" alt=\"image-20220927160841394\"></p>\n<h2 id=\"amp-amp\"><a href=\"#amp-amp\" class=\"headerlink\" title=\"[&amp;&amp;]\"></a>[&amp;&amp;]</h2><p>如果命令被&amp;&amp;所分隔，那么命令也会一直执行下去，但是中间有错误的命令存在就不会执行后面的命令，没错就直行至完为止。</p>\n<p><img data-src=\"/../images/Linux%E5%A4%9A%E5%91%BD%E4%BB%A4%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C/image-20220927160805426.png\" alt=\"image-20220927160805426\"></p>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"[||]\"></a>[||]</h2><p>如果每个命令被双竖线||所分隔，那么一遇到可以执行成功的命令就会停止执行后面的命令，而不管后面的命令是否正确与否。如果执行到错误的命令就是继续执行后一个命令，一直执行到遇到正确的命令为止。</p>\n<p><img data-src=\"/../images/Linux%E5%A4%9A%E5%91%BD%E4%BB%A4%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C/image-20220927160909346.png\" alt=\"image-20220927160909346\"></p>\n","categories":["linux"],"tags":["linux"]},{"title":"JWT json-web-token 介绍","url":"/post/d140a83b.html","content":"<p>根据维基百科的定义，<strong>JSON WEB Token</strong>（<strong>JWT</strong>，读作 [&#x2F;dʒɒt&#x2F;]），是一种基于JSON的、用于在网络上声明某种主张的令牌（token）。JWT通常由三部分组成: 头信息（header）, 消息体（payload）和签名（signature）。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"JWT特点：\"><a href=\"#JWT特点：\" class=\"headerlink\" title=\"JWT特点：\"></a>JWT特点：</h3><ul>\n<li><strong>简洁(Compact)</strong>: 可以通过URL，POST参数或者在HTTP header发送，因为数据量小，传输速度也很快</li>\n<li><strong>自包含(Self-contained)</strong> : 负载中包含了所有用户所需要的信息，避免了多次查询数据库</li>\n</ul>\n<h3 id=\"JWT-的原理\"><a href=\"#JWT-的原理\" class=\"headerlink\" title=\"JWT 的原理\"></a>JWT 的原理</h3><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p>\n<blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;姓名&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;admin&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;角色&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;管理员&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;到期时间&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2021年1月1日0点0分&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p>\n<p>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p>\n<h3 id=\"JWT结构\"><a href=\"#JWT结构\" class=\"headerlink\" title=\"JWT结构\"></a>JWT结构</h3><p>JWT主要包含三个部分之间用英语句号’.’隔开</p>\n<p>header.payload.signature</p>\n<h4 id=\"头部-header\"><a href=\"#头部-header\" class=\"headerlink\" title=\"头部(header)\"></a>头部(header)</h4><p>在header中通常包含两部分,token类型和采用的加密算法</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;alg&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;HS256&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;typ&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;JWT&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>alg</code>属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；<code>typ</code>属性表示这个令牌（token）的类型（type），JWT 令牌统一写为<code>JWT</code>。</p>\n<p>然后再将其进行base64编码得到如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json ,base64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 因为我们有可能把token放到后面 /?token=xxx,所以我们选择urlsafe_b64encode </span></span><br><span class=\"line\">header = base64.urlsafe_b64encode(json.dumps(&#123;<span class=\"string\">&quot;alg&quot;</span>: <span class=\"string\">&quot;HS256&quot;</span>,  <span class=\"string\">&quot;typ&quot;</span>: <span class=\"string\">&quot;JWT&quot;</span>&#125;).encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">header</span><br><span class=\"line\"><span class=\"comment\"># b&#x27;eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JWT的负载-Payload\"><a href=\"#JWT的负载-Payload\" class=\"headerlink\" title=\"JWT的负载(Payload)\"></a>JWT的负载(Payload)</h4><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">iss (issuer)：签发人</span><br><span class=\"line\">exp (expiration time)：过期时间</span><br><span class=\"line\">sub (subject)：主题</span><br><span class=\"line\">aud (audience)：受众</span><br><span class=\"line\">nbf (Not Before)：生效时间</span><br><span class=\"line\">iat (Issued At)：签发时间</span><br><span class=\"line\">jti (JWT ID)：编号</span><br></pre></td></tr></table></figure>\n\n<p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;user_name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;admin&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;user_id&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;123&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后我们再将其用base64编码一下:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">import json <span class=\"punctuation\">,</span>base64</span><br><span class=\"line\"></span><br><span class=\"line\">payload = base64.urlsafe_b64encode(json.dumps(<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;user_name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;admin&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;user_id&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;123&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span>).encode(&#x27;utf<span class=\"number\">-8</span>&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">payload</span><br><span class=\"line\">Out<span class=\"punctuation\">[</span><span class=\"number\">3</span><span class=\"punctuation\">]</span><span class=\"punctuation\">:</span> b&#x27;eyJ1c2VyX25hbWUiOiAiYWRtaW4iLCAidXNlcl9pZCI6ICIxMjMifQ==&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p>\n<h4 id=\"Signature-签名\"><a href=\"#Signature-签名\" class=\"headerlink\" title=\"Signature(签名)\"></a>Signature(签名)</h4><p>签名其实是对JWT的头部和负载整合的一个签名验证</p>\n<p>首先需要将头部和负载通过.连接起来.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">sig = header+<span class=\"string\">b&#x27;.&#x27;</span>+payload</span><br><span class=\"line\"><span class=\"string\">b&#x27;eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJ1c2VyX25hbWUiOiAiYWRtaW4iLCAidXNlcl9pZCI6ICIxMjMifQ==&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后再对其用HMacSHA256加密算法,这里需要用到一个Key</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hmac</span><br><span class=\"line\">key = <span class=\"string\">b&#x27;test&#x27;</span></span><br><span class=\"line\">signature = hmac.new(key,sig,digestmod=<span class=\"string\">&#x27;SHA256&#x27;</span>)</span><br><span class=\"line\">sign = signature.hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 得到字符串 注意这里得到的是字符串</span></span><br><span class=\"line\"><span class=\"string\">&#x27;0867e2b9ca7c5bec8a8d348487df710429324830ccd00652875a809560c28536&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后再对其使用base64位加密</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">sign = base64.urlsafe_b64encode(signature.hexdigest().encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))   <span class=\"string\">b&#x27;MDg2N2UyYjljYTdjNWJlYzhhOGQzNDg0ODdkZjcxMDQyOTMyNDgzMGNjZDAwNjUyODc1YTgwOTU2MGMyODUzNg==&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>最终我们得到JWT</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">jwt = header+<span class=\"string\">b&#x27;.&#x27;</span>+payload+<span class=\"string\">b&#x27;.&#x27;</span>+sign</span><br><span class=\"line\"><span class=\"string\">b&#x27;eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJ1c2VyX25hbWUiOiAiYWRtaW4iLCAidXNlcl9pZCI6ICIxMjMifQ==.MDg2N2UyYjljYTdjNWJlYzhhOGQzNDg0ODdkZjcxMDQyOTMyNDgzMGNjZDAwNjUyODc1YTgwOTU2MGMyODUzNg==&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JWT的使用\"><a href=\"#JWT的使用\" class=\"headerlink\" title=\"JWT的使用\"></a>JWT的使用</h3><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p>\n<p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息<code>Authorization</code>字段里面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Authorization</span>: <span class=\"title class_\">Bearer</span> &lt;token&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JWT-的几个特点\"><a href=\"#JWT-的几个特点\" class=\"headerlink\" title=\"JWT 的几个特点\"></a>JWT 的几个特点</h3><p>（1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</p>\n<p>（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。</p>\n<p>（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</p>\n<p>（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p>\n<p>（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p>\n<p>（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</p>\n<p>以上借鉴了阮一峰大神的博客,<a href=\"https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html\">博客地址</a></p>\n","categories":["jwt"],"tags":["jwt"]},{"title":"NAT地址转换","url":"/post/2a46438c.html","content":"<p>随着Internet的发展和网络应用的增多，IPv4地址枯竭已成为制约网络发展的瓶颈。尽管IPv6可以从根本上解决IPv4地址空间不足问题，但目前众多网络设备和网络应用大多是基于IPv4的，因此在IPv6广泛应用之前，一些过渡技术（如CIDR、私网地址等）的使用是解决这个问题最主要的技术手段。NAT主要用于实现内部网络（简称内网，使用私有IP地址）访问外部网络（简称外网，使用公有IP地址）的功能。当内网的主机要访问外网时，通过NAT技术可以将其私网地址转换为公网地址，可以实现多个私网用户共用一个公网地址来访问外部网络，这样既可保证网络互通，又节省了公网地址。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"NAT-网络地址转换\"><a href=\"#NAT-网络地址转换\" class=\"headerlink\" title=\"NAT:网络地址转换\"></a>NAT:网络地址转换</h2><ul>\n<li>有效避免来自外网的攻击，可以很大程度上提高网络安全性。</li>\n<li>控制内网主机访问外网，同时也可以控制外网主机访问内网，解决了内网和外网不能互通的问题。</li>\n</ul>\n<h2 id=\"NAT类型\"><a href=\"#NAT类型\" class=\"headerlink\" title=\"NAT类型\"></a>NAT类型</h2><h3 id=\"静态NAT\"><a href=\"#静态NAT\" class=\"headerlink\" title=\"静态NAT\"></a>静态NAT</h3><p>一对一的地址转换,一个公网地址只保留一个内网地址使用</p>\n<p><img data-src=\"/../images/NAT%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2/download.png\" alt=\"img\"></p>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nat static enable   # 开启NAT 静态功能</span><br><span class=\"line\">nat static global 公网地址 inside 私网地址   # 配置静态NAT</span><br><span class=\"line\">display nat static  # 验证静态NAT 配置</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"动态NAT\"><a href=\"#动态NAT\" class=\"headerlink\" title=\"动态NAT\"></a>动态NAT</h3><p>动态NAT是指将内部网络的私有IP地址转换为公用IP地址时，IP地址对是不确定的，是随机的，所有被授权访问Internet的私有IP地址可随机转换为任何指定的合法IP地址。也就是说，只要指定哪些内部地址可以进行转换，以及用哪些合法地址作为外部地址时，就可以进行动态转换。</p>\n<h3 id=\"NAPT\"><a href=\"#NAPT\" class=\"headerlink\" title=\"NAPT\"></a>NAPT</h3><p>除了一对一的NAT转换方式外，网络地址端口转换NAPT（Network Address Port Translation）可以实现并发的地址转换。它允许多个内部地址映射到同一个公有地址上，因此也可以称为“多对一地址转换”或地址复用。</p>\n<p>NAPT方式属于多对一的地址转换，它通过使用“IP地址＋端口号”的形式进行转换，使多个私网用户可共用一个公网IP地址访问外网</p>\n<p><img data-src=\"/../images/NAT%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2/download-16835273286532.png\" alt=\"img\"></p>\n<h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">nat address-group 编号 公网地址范围  # 配置NAT 地址池</span><br><span class=\"line\">nat outbound acl 编号     # 关联ACL和NAT地址池</span><br><span class=\"line\">address-group 编号 [no-pat] # ACL用来匹配能够转换的源地址</span><br><span class=\"line\">no-pat                     # 只转换地址而不转换端口</span><br><span class=\"line\">display nat address-group  # 验证NAT地址池配置信息</span><br><span class=\"line\">display nat outbound       # 验证动态NAT 配置信息</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Easy-IP\"><a href=\"#Easy-IP\" class=\"headerlink\" title=\"Easy IP\"></a>Easy IP</h3><p>Easy IP方式可以利用访问控制列表来控制哪些内部地址可以进行地址转换。</p>\n<p>Easy IP方式特别适合小型局域网访问Internet的情况。这里的小型局域网主要指中小型网吧、小型办公室等环境，一般具有以下特点：内部主机较少、出接口通过拨号方式获得临时公网IP地址以供内部主机访问Internet。对于这种情况，可以使用Easy IP方式使局域网用户都通过这个IP地址接入Internet。</p>\n<p><img data-src=\"/../images/NAT%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2/download-16835275826204.png\" alt=\"img\"></p>\n<h4 id=\"配置-2\"><a href=\"#配置-2\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nat outbound acl 编号   # 配置Easy IP ,关联ACL和公网接口</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"NAT-Server\"><a href=\"#NAT-Server\" class=\"headerlink\" title=\"NAT Server\"></a>NAT Server</h3><p>NAT具有“屏蔽”内部主机的作用，但有时内网需要向外网提供服务，比如提供WWW服务或者FTP服务。这种情况下需要内网的服务器不被“屏蔽”，外网用户可以随时访问内网服务器。</p>\n<p>NAT Server可以很好地解决这个问题，当外网用户访问内网服务器时，它通过事先配置好的“公网IP地址+端口号”与“私网IP地址+端口号”间的映射关系，将服务器的“公网IP地址+端口号”根据映射关系替换成对应的“私网IP地址+端口号”。</p>\n<p><img data-src=\"/../images/NAT%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2/download.png\" alt=\"img\"></p>\n<h4 id=\"配置-3\"><a href=\"#配置-3\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">nat server protocol tcp/udp  global 公网地址/接口  端口  inside 私网地址 端口  <span class=\"comment\"># 配置nat 服务器</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"检查配置动态地址转换结果\"><a href=\"#检查配置动态地址转换结果\" class=\"headerlink\" title=\"检查配置动态地址转换结果\"></a>检查配置动态地址转换结果</h2><h4 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h4><ul>\n<li>执行命令<strong>display nat address-group</strong> [ <em>group-index</em> ] [ <strong>verbose</strong> ]，查看NAT地址池的配置信息。</li>\n<li>执行命令<strong>display nat outbound</strong> [ <strong>acl</strong> <em>acl-number</em> | <strong>address-group</strong> <em>group-index</em> | <strong>interface</strong> <em>interface-type</em> <em>interface-number</em> [ <em>.subnumber</em> ] ]，查看NAT Outbound信息。</li>\n<li>执行命令<strong>display nat alg</strong>，查看NAT ALG的配置信息。</li>\n<li>执行命令<strong>display nat overlap-address</strong> { <em>map-index</em> | <strong>all</strong> | <strong>inside-vpn-instance</strong> <em>inside-vpn-instance-name</em>}，查看NAT双向地址转换的相关信息。</li>\n<li>执行命令<strong>display firewall-nat session aging-time</strong>，查看NAT表项老化时间的相关信息。</li>\n<li>执行命令<strong>display nat sip cac bandwidth information</strong> [ <strong>verbose</strong> ]，查看设备上的当前总带宽及被占用带宽。</li>\n<li>执行命令<strong>display nat filter-mode</strong>，查看当前的NAT过滤方式。</li>\n<li>执行命令<strong>display nat mapping-mode</strong>，查看NAT映射模式。</li>\n<li>执行命令<strong>display nat mapping table</strong> { <strong>all</strong> | <strong>number</strong> }或者<strong>display nat mapping table inside-address</strong> <em>ip-address</em> <strong>protocol</strong> <em>protocol-name</em> <strong>port</strong> <em>port-number</em> [ <strong>vpn-instance</strong> <em>vpn-instance-name</em> ]，查看NAT映射表所有表项信息或个数。</li>\n</ul>\n","categories":["网络"],"tags":["NAT"]},{"title":"PRC","url":"/post/f4a5d85e.html","content":"<h2 id=\"什么是RPC\"><a href=\"#什么是RPC\" class=\"headerlink\" title=\"什么是RPC\"></a>什么是RPC</h2><p><strong>远程过程调用</strong>（英语：<strong>Remote Procedure Call</strong>，缩写为 <strong>RPC</strong>，也叫<strong>远程程序调用</strong>）是一个计算机通信协议。该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程。如果涉及的软件采用面向对象编程，那么远程过程调用亦可称作<strong>远程调用</strong>或<strong>远程方法调用</strong>。</p>\n<p><img data-src=\"/../images/PRC/RPC%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"RPC示意图\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"背景与用途\"><a href=\"#背景与用途\" class=\"headerlink\" title=\"背景与用途\"></a>背景与用途</h2><p>在单台计算机中，我们可以通过程序调用来传递控制和数据；或者说通过程序调用，我们可以将多个程序组成一个整体来实现某个功能。</p>\n<p>如果将这种调用机制推广到多台彼此间可以进行网络通讯的计算机，由多台计算机中的多个程序组成一个整体来实现某个功能，这也是可以的。调用的一方（发起远程过程调用，然后调用这方的环境挂起，参数通过网络传递给被调用方，被调用的一方执行程序，当程序执行完成后，产生的结果再通过网络回传给调用的一方，调用的一方恢复继续执行。这样一种原型思想，就是我们所说的RPC远程过程调用。</p>\n<p>RPC这种思想最早可以追溯到1976年，RPC的发展到今天已经40年有余了。</p>\n<p>如今的计算机应用中，单机性能上很难承受住产品的压力，需要不断扩充多台机器来提升整体的性能。同时为了充分利用这些集群里的计算机，需要对其从架构上进行划分，以提供不同的服务，服务间相互调用完成整个产品的功能。RPC就能帮助我们解决这些服务间的信息传递和调用。</p>\n<h2 id=\"RPC结构\"><a href=\"#RPC结构\" class=\"headerlink\" title=\"RPC结构\"></a>RPC结构</h2><p>RPC的设计思想是力图<strong>使远程调用中的通讯细节对于使用者透明</strong>，调用双方无需关心网络通讯的具体实现。因而实现RPC要进行一定的封装。</p>\n<p>RPC原理上是按如下结构流程进行实现的。</p>\n<p><img data-src=\"/../images/PRC/RPC%E7%BB%93%E6%9E%84-16479126287761.png\" alt=\"RPC结构\"></p>\n<h3 id=\"流程：\"><a href=\"#流程：\" class=\"headerlink\" title=\"流程：\"></a>流程：</h3><ol>\n<li>调用者（Caller, 也叫客户端、Client）以本地调用的方式发起调用；</li>\n<li>Client stub（客户端存根，可理解为辅助助手）收到调用后，负责将被调用的方法名、参数等打包编码成特定格式的能进行网络传输的消息体；</li>\n<li>Client stub将消息体通过网络发送给对端（服务端）</li>\n<li>Server stub（服务端存根，同样可理解为辅助助手）收到通过网络接收到消息后按照相应格式进行拆包解码，获取方法名和参数；</li>\n<li>Server stub根据方法名和参数进行本地调用；</li>\n<li>被调用者（Callee，也叫Server）本地调用执行后将结果返回给server stub;</li>\n<li>Server stub将返回值打包编码成消息，并通过网络发送给对端（客户端）；</li>\n<li>Client stub收到消息后，进行拆包解码，返回给Client；</li>\n<li>Client得到本次RPC调用的最终结果。</li>\n</ol>\n<h2 id=\"gRPC\"><a href=\"#gRPC\" class=\"headerlink\" title=\"gRPC\"></a>gRPC</h2><ul>\n<li><p>gRPC是由Google公司开源的高性能RPC框架。</p>\n</li>\n<li><p>gRPC支持多语言</p>\n<p>gRPC原生使用C、Java、Go进行了三种实现，而C语言实现的版本进行封装后又支持C++、C#、Node、ObjC、 Python、Ruby、PHP等开发语言</p>\n</li>\n<li><p>gRPC支持多平台</p>\n<p>支持的平台包括：Linux、Android、iOS、MacOS、Windows</p>\n</li>\n<li><p>gRPC的消息协议使用Google自家开源的Protocol Buffers协议机制（proto3） 序列化</p>\n</li>\n<li><p>gRPC的传输使用HTTP&#x2F;2标准，支持双向流和连接多路复用</p>\n</li>\n</ul>\n<p><img data-src=\"/../images/PRC/grpc.png\" alt=\"grpc\"></p>\n<h2 id=\"Protocol-Buffers\"><a href=\"#Protocol-Buffers\" class=\"headerlink\" title=\"Protocol Buffers\"></a>Protocol Buffers</h2><p>gRPC的消息协议使用Google自家开源的Protocol Buffers协议机制（proto3） 序列化</p>\n<p>详情可看我的另一篇文章 <a href=\"https://tigercoll.top/2022/03/05/Protocol-Buffers/\">Protocol Buffers</a></p>\n<h2 id=\"接口定义\"><a href=\"#接口定义\" class=\"headerlink\" title=\"接口定义\"></a>接口定义</h2><h3 id=\"接口原型\"><a href=\"#接口原型\" class=\"headerlink\" title=\"接口原型\"></a>接口原型</h3><p>接口名称： proto_test</p>\n<p>调用参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">ProtoTestReuqest:</span><br><span class=\"line\">    <span class=\"built_in\">id</span>     \t\t\t<span class=\"comment\"># id</span></span><br><span class=\"line\">    test_content   \t <span class=\"comment\"># 测试内容</span></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<p>返回数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">ProtoTestResponse:</span><br><span class=\"line\">    callback_id    <span class=\"comment\"># 返回测试ID</span></span><br><span class=\"line\">    result         <span class=\"comment\"># 结果</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用Protobuf-定义的接口如下\"><a href=\"#使用Protobuf-定义的接口如下\" class=\"headerlink\" title=\"使用Protobuf 定义的接口如下\"></a>使用Protobuf 定义的接口如下</h3><p><strong>使用protobuf定义的接口文件通常以proto作为文件后缀名</strong></p>\n<p>在rpc目录下新建protoTest.proto文件</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>; <span class=\"comment\">// 在gRPC中推荐使用proto3版本。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">ProtoTestReuqest</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int32</span> id=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">string</span> test_content=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">ProtoTestResponse</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int32</span> callback_id=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">string</span> result=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">service </span><span class=\"title class_\">ProtoTest</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">rpc</span> proto_test(ProtoTestReuqest) <span class=\"keyword\">returns</span>(ProtoTestResponse) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码生成\"><a href=\"#代码生成\" class=\"headerlink\" title=\"代码生成\"></a>代码生成</h2><h3 id=\"安装protobuf编译器和grpc库\"><a href=\"#安装protobuf编译器和grpc库\" class=\"headerlink\" title=\"安装protobuf编译器和grpc库\"></a>安装protobuf编译器和grpc库</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install grpcio-tools</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译生成代码\"><a href=\"#编译生成代码\" class=\"headerlink\" title=\"编译生成代码\"></a>编译生成代码</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. protoTest.proto</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-I</code>表示搜索proto文件中被导入文件的目录</li>\n<li><code>--python_out</code>表示保存生成Python文件的目录，生成的文件中包含接口定义中的数据类型</li>\n<li><code>--grpc_python_out</code>表示保存生成Python文件的目录，生成的文件中包含接口定义中的服务类型</li>\n</ul>\n<p>在rpc目录下执行上述命令，会自动生成如下两个rpc调用辅助代码模块：</p>\n<ul>\n<li>protoTest_pb2.py 保存根据接口定义文件中的数据类型生成的python类</li>\n<li>protoTest_pb2_grpc.py 保存根据接口定义文件中的服务方法类型生成的python调用RPC方法</li>\n</ul>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><p>在rpc目录下新建server.py文件,用来补全服务端代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> protoTest_pb2</span><br><span class=\"line\"><span class=\"keyword\">import</span> protoTest_pb2_grpc</span><br><span class=\"line\"><span class=\"keyword\">import</span> grpc</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ThreadPoolExecutor</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rpc接口定义中服务对应成Python的类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ProtoTestService</span>(protoTest_pb2_grpc.ProtoTestServicer):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 在接口定义的同名方法中补全，被调用时应该执行的逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">proto_test</span>(<span class=\"params\">self, request, context</span>):</span><br><span class=\"line\">        <span class=\"comment\"># request是调用的请求数据对象</span></span><br><span class=\"line\">        <span class=\"built_in\">id</span> = request.<span class=\"built_in\">id</span></span><br><span class=\"line\">        test_content = request.test_content</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>,test_content)</span><br><span class=\"line\">        response = protoTest_pb2.ProtoTestResponse()</span><br><span class=\"line\">        response.callback_id = <span class=\"built_in\">id</span>+<span class=\"number\">1</span></span><br><span class=\"line\">        response.result = <span class=\"string\">&#x27;grpc结果&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\"># 最终要返回一个调用结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">serve</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    rpc服务端启动方法</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建一个rpc服务器</span></span><br><span class=\"line\">    server = grpc.server(ThreadPoolExecutor(max_workers=<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 向服务器中添加被调用的服务方法</span></span><br><span class=\"line\">    protoTest_pb2_grpc.add_ProtoTestServicer_to_server(ProtoTestService(), server)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 微服务器绑定ip地址和端口</span></span><br><span class=\"line\">    server.add_insecure_port(<span class=\"string\">&#x27;127.0.0.1:8888&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 启动rpc服务</span></span><br><span class=\"line\">    server.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># start()不会阻塞，此处需要加上循环睡眠 防止程序退出</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        time.sleep(<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    serve()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><p>在rpc目录下新建client.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> grpc</span><br><span class=\"line\"><span class=\"keyword\">import</span> protoTest_pb2</span><br><span class=\"line\"><span class=\"keyword\">import</span> protoTest_pb2_grpc</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">feed_test</span>(<span class=\"params\">stub</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 构建rpc调用的调用参数</span></span><br><span class=\"line\">    request = protoTest_pb2.ProtoTestReuqest()</span><br><span class=\"line\">    request.<span class=\"built_in\">id</span> = <span class=\"number\">1</span></span><br><span class=\"line\">    request.test_content = <span class=\"string\">&#x27;发送grpc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 通过stub进行方法调用，并接收调用返回值</span></span><br><span class=\"line\">    ret = stub.proto_test(request)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ret.callback_id)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(ret.result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    rpc客户端调用的方法</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用with语句连接rpc服务器</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> grpc.insecure_channel(<span class=\"string\">&#x27;127.0.0.1:8888&#x27;</span>) <span class=\"keyword\">as</span> channel:</span><br><span class=\"line\">        <span class=\"comment\"># 创建调用rpc远端服务的辅助对象stub</span></span><br><span class=\"line\">        stub = protoTest_pb2_grpc.ProtoTestStub(channel)</span><br><span class=\"line\">        <span class=\"comment\"># 通过stub进行rpc调用</span></span><br><span class=\"line\">        feed_test(stub)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    run()</span><br></pre></td></tr></table></figure>\n\n","categories":["PRC"],"tags":["PRC"]},{"title":"Pandas进阶","url":"/post/e6fcc668.html","content":"<p>本章介绍pandas层次化索引,索引的堆（stack）,以及多层索引聚合操作,拼接操作</p>\n<span id=\"more\"></span>\n\n<h2 id=\"创建多层行索引\"><a href=\"#创建多层行索引\" class=\"headerlink\" title=\"创建多层行索引\"></a>创建多层行索引</h2><h3 id=\"隐式构造\"><a href=\"#隐式构造\" class=\"headerlink\" title=\"隐式构造\"></a>隐式构造</h3><p>最常见的方法是给DataFrame构造函数的index参数传递两个或更多的数组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">data = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">150</span>,size=(<span class=\"number\">6</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\">index = [[<span class=\"string\">&#x27;一班&#x27;</span>,<span class=\"string\">&#x27;一班&#x27;</span>,<span class=\"string\">&#x27;一班&#x27;</span>,<span class=\"string\">&#x27;二班&#x27;</span>,<span class=\"string\">&#x27;二班&#x27;</span>,<span class=\"string\">&#x27;二班&#x27;</span>],[<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"string\">&#x27;赵六&#x27;</span>, <span class=\"string\">&#x27;田七&#x27;</span>, <span class=\"string\">&#x27;孙八&#x27;</span>]]</span><br><span class=\"line\">columns = [[<span class=\"string\">&#x27;期中&#x27;</span>,<span class=\"string\">&#x27;期中&#x27;</span>,<span class=\"string\">&#x27;期中&#x27;</span>,<span class=\"string\">&#x27;期末&#x27;</span>,<span class=\"string\">&#x27;期末&#x27;</span>,<span class=\"string\">&#x27;期末&#x27;</span>],[<span class=\"string\">&#x27;语文&#x27;</span>,<span class=\"string\">&#x27;数学&#x27;</span>,<span class=\"string\">&#x27;英语&#x27;</span>,<span class=\"string\">&#x27;语文&#x27;</span>,<span class=\"string\">&#x27;数学&#x27;</span>,<span class=\"string\">&#x27;英语&#x27;</span>]]</span><br><span class=\"line\">df = DataFrame(columns=columns,index=index,data=data)</span><br><span class=\"line\">df</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220711162043742.png\" alt=\"image-20220711162043742\"></p>\n<ul>\n<li>Series也可以创建多层索引</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">index = [[<span class=\"string\">&#x27;一班&#x27;</span>, <span class=\"string\">&#x27;一班&#x27;</span>, <span class=\"string\">&#x27;一班&#x27;</span>, <span class=\"string\">&#x27;二班&#x27;</span>, <span class=\"string\">&#x27;二班&#x27;</span>, <span class=\"string\">&#x27;二班&#x27;</span>], [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"string\">&#x27;赵六&#x27;</span>, <span class=\"string\">&#x27;田七&#x27;</span>, <span class=\"string\">&#x27;孙八&#x27;</span>]]</span><br><span class=\"line\">data = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">150</span>, size=<span class=\"number\">6</span>)</span><br><span class=\"line\">s = Series(data=data, index=index)</span><br><span class=\"line\">s</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220711162635182.png\" alt=\"image-20220711162635182\"></p>\n<h3 id=\"显示构造pd-MultiIndex\"><a href=\"#显示构造pd-MultiIndex\" class=\"headerlink\" title=\"显示构造pd.MultiIndex\"></a>显示构造pd.MultiIndex</h3><ul>\n<li>使用数组</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">data = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">150</span>, size=(<span class=\"number\">6</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">index = pd.MultiIndex.from_arrays([[<span class=\"string\">&#x27;一班&#x27;</span>, <span class=\"string\">&#x27;一班&#x27;</span>, <span class=\"string\">&#x27;一班&#x27;</span>, <span class=\"string\">&#x27;二班&#x27;</span>, <span class=\"string\">&#x27;二班&#x27;</span>, <span class=\"string\">&#x27;二班&#x27;</span>], [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"string\">&#x27;赵六&#x27;</span>, <span class=\"string\">&#x27;田七&#x27;</span>, <span class=\"string\">&#x27;孙八&#x27;</span>]])</span><br><span class=\"line\">columns = pd.MultiIndex.from_arrays([[<span class=\"string\">&#x27;期中&#x27;</span>, <span class=\"string\">&#x27;期中&#x27;</span>, <span class=\"string\">&#x27;期中&#x27;</span>, <span class=\"string\">&#x27;期末&#x27;</span>, <span class=\"string\">&#x27;期末&#x27;</span>, <span class=\"string\">&#x27;期末&#x27;</span>], [<span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>]])</span><br><span class=\"line\">df = DataFrame(index=index, data=data, columns=columns)</span><br><span class=\"line\">df</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220712135538144.png\" alt=\"image-20220712135538144\"></p>\n<ul>\n<li>使用tuple</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">data = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">150</span>, size=(<span class=\"number\">6</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">index = pd.MultiIndex.from_tuples([(<span class=\"string\">&#x27;一班&#x27;</span>, <span class=\"string\">&#x27;张三&#x27;</span>), (<span class=\"string\">&#x27;一班&#x27;</span>, <span class=\"string\">&#x27;李四&#x27;</span>), (<span class=\"string\">&#x27;一班&#x27;</span>, <span class=\"string\">&#x27;王五&#x27;</span>), (<span class=\"string\">&#x27;二班&#x27;</span>, <span class=\"string\">&#x27;赵六&#x27;</span>), (<span class=\"string\">&#x27;二班&#x27;</span>, <span class=\"string\">&#x27;田七&#x27;</span>), (<span class=\"string\">&#x27;二班&#x27;</span>, <span class=\"string\">&#x27;孙八&#x27;</span>)])</span><br><span class=\"line\">columns = pd.MultiIndex.from_arrays([[<span class=\"string\">&#x27;期中&#x27;</span>, <span class=\"string\">&#x27;期中&#x27;</span>, <span class=\"string\">&#x27;期中&#x27;</span>, <span class=\"string\">&#x27;期末&#x27;</span>, <span class=\"string\">&#x27;期末&#x27;</span>, <span class=\"string\">&#x27;期末&#x27;</span>], [<span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>]])</span><br><span class=\"line\">df = DataFrame(index=index, data=data, columns=columns)</span><br><span class=\"line\">df</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220712135613233.png\" alt=\"image-20220712135613233\"></p>\n<ul>\n<li>使用product</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">data = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">150</span>, size=(<span class=\"number\">6</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#product 两两相乘,必须有一样的,如果没有一样的,只能使用上面2种</span></span><br><span class=\"line\">index = pd.MultiIndex.from_product([[<span class=\"string\">&#x27;一班&#x27;</span>, <span class=\"string\">&#x27;二班&#x27;</span>], [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"string\">&#x27;王五&#x27;</span>]])</span><br><span class=\"line\">columns = pd.MultiIndex.from_arrays([[<span class=\"string\">&#x27;期中&#x27;</span>, <span class=\"string\">&#x27;期中&#x27;</span>, <span class=\"string\">&#x27;期中&#x27;</span>, <span class=\"string\">&#x27;期末&#x27;</span>, <span class=\"string\">&#x27;期末&#x27;</span>, <span class=\"string\">&#x27;期末&#x27;</span>], [<span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>]])</span><br><span class=\"line\">df = DataFrame(index=index, data=data, columns=columns)</span><br><span class=\"line\">df</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220712142355726.png\" alt=\"image-20220712142355726\"></p>\n<h2 id=\"多层索引对象的索引与切片操作\"><a href=\"#多层索引对象的索引与切片操作\" class=\"headerlink\" title=\"多层索引对象的索引与切片操作\"></a>多层索引对象的索引与切片操作</h2><h3 id=\"Series的操作\"><a href=\"#Series的操作\" class=\"headerlink\" title=\"Series的操作\"></a>Series的操作</h3><p>【重要】对于Series来说，直接中括号[]与使用.loc()完全一样，推荐使用中括号索引和切片。</p>\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220712154123722.png\" alt=\"image-20220712154123722\"></p>\n<h4 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h4><p>原则: 当有多层索引的时候,不要直接索引内层索引.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先索引外层索引 推荐写法</span></span><br><span class=\"line\">s.loc[<span class=\"string\">&#x27;一班&#x27;</span>, <span class=\"string\">&#x27;张三&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220712154250028.png\" alt=\"image-20220712154250028\"></p>\n<h4 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h4><p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220712160244074.png\" alt=\"image-20220712160244074\"></p>\n<h3 id=\"DataFrame的操作\"><a href=\"#DataFrame的操作\" class=\"headerlink\" title=\"DataFrame的操作\"></a>DataFrame的操作</h3><p>可以直接使用列名称来进行列索引</p>\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220712161801042.png\" alt=\"image-20220712161801042\"></p>\n<p>行多级索引的索引和切片操作</p>\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220712162311855.png\" alt=\"image-20220712162311855\"></p>\n<p>列多级索引的索引和切片操作</p>\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220712162441453.png\" alt=\"image-20220712162441453\"></p>\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220712162449968.png\" alt=\"image-20220712162449968\"></p>\n<p>【极其重要】推荐使用loc()函数</p>\n<p>注意在对行索引的时候，若一级行索引还有多个，对二级行索引会遇到问题！也就是说，无法直接对二级索引进行索引，必须让二级索引变成一级索引后才能对其进行索引！</p>\n<h2 id=\"索引的堆\"><a href=\"#索引的堆\" class=\"headerlink\" title=\"索引的堆\"></a>索引的堆</h2><ul>\n<li><code>stack()</code></li>\n<li><code>unstack()</code></li>\n</ul>\n<p>索引的堆指的就是 多层索引中行索引和列索引的转化</p>\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220712165413101.png\" alt=\"image-20220712165413101\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认level 是-1  </span></span><br><span class=\"line\">df.stack()</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220712170023470.png\" alt=\"image-20220712170023470\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">df.stack(level=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220712170104141.png\" alt=\"image-20220712170104141\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">df.unstack()</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220712170438379.png\" alt=\"image-20220712170438379\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">【小技巧】使用unstack()的时候，level等于哪一个，哪一个就消失，出现在列里。</span><br><span class=\"line\">level的顺序 如下  可以是正序:<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span> 也可以是倒序:-<span class=\"number\">1</span>,-<span class=\"number\">2</span>,-<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220712170512946.png\" alt=\"image-20220712170512946\"></p>\n<h2 id=\"聚合操作\"><a href=\"#聚合操作\" class=\"headerlink\" title=\"聚合操作\"></a>聚合操作</h2><p>所谓的聚合操作：平均数，方差，最大值，最小值……</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sum</span> / <span class=\"built_in\">min</span> /<span class=\"built_in\">max</span> / mean  / std/ var/ prod/ median / percentile....</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220713135057654.png\" alt=\"image-20220713135057654\"></p>\n<p><img data-src=\"/../images/Pandas%E8%BF%9B%E9%98%B6/image-20220713135139465.png\" alt=\"image-20220713135139465\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一班二班,各科成绩的和.</span></span><br><span class=\"line\"><span class=\"comment\"># 新版本改成了groupby</span></span><br><span class=\"line\"><span class=\"comment\"># df.sum(axis=0, level=0) # 不推荐使用了</span></span><br><span class=\"line\">df.groupby(level=<span class=\"number\">0</span>,axis=<span class=\"number\">0</span>).<span class=\"built_in\">sum</span>()</span><br><span class=\"line\"><span class=\"comment\"># 先根据axis的值看对行还是对列进行 操作. 再去看level, level等于哪一层 ,哪一层就保留下来.</span></span><br></pre></td></tr></table></figure>\n\n<p>【注意】</p>\n<ul>\n<li>需要指定axis</li>\n<li>【小技巧】和unstack()相反，聚合的时候，axis等于哪一个，哪一个就保留。</li>\n</ul>\n","categories":["Pandas"],"tags":["Pandas","数据分析"]},{"title":"Redis主从复制","url":"/post/b7e51ad7.html","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ol>\n<li>一个redis服务可以由多个该服务的复制品,这个redis服务称为master,其他复制品称为slaves.</li>\n<li>master会一直将做空的数据更新同步给slaves.保持主从同步.</li>\n<li>只要master可以执行写命令,slave只能执行读命令.</li>\n</ol>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>分担了读的压力(高并发),由于写操作执行的相对较少.</p>\n<span id=\"more\"></span>\n\n<h3 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><h4 id=\"方式一-linux终端上\"><a href=\"#方式一-linux终端上\" class=\"headerlink\" title=\"方式一,linux终端上\"></a>方式一,linux终端上</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-server --port 6300[从服务器端口号] --slaveof 127.0.0.1[主服务器IP地址] 6379[端口号] --masterauth[主服务器密码(如果有的话)]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">从服务器</span> </span><br><span class=\"line\">redis-server --port 6300 --slaveof 127.0.0.1 6379</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">客户端</span> </span><br><span class=\"line\">[root@10-7-189-100 ~]# redis-cli -p 6300</span><br><span class=\"line\">127.0.0.1:6300&gt; select 1</span><br><span class=\"line\">OK</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">从主服务器上复制过来的数据</span></span><br><span class=\"line\">127.0.0.1:6300[1]&gt; keys *</span><br><span class=\"line\">1) &quot;1&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">只能读数据不能写入</span></span><br><span class=\"line\">127.0.0.1:6300[1]&gt; set 1 2 </span><br><span class=\"line\">(error) READONLY You can&#x27;t write against a read only slave.</span><br><span class=\"line\">127.0.0.1:6300[1]&gt; get 1</span><br><span class=\"line\">&quot;2&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方式二-redis命令行\"><a href=\"#方式二-redis命令行\" class=\"headerlink\" title=\"方式二(redis命令行)\"></a>方式二(redis命令行)</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">当然也可以在服务启动后在命令行执行slaveof IP PORT  绑定主服务</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">客户端</span></span><br><span class=\"line\">127.0.0.1:6300[1]&gt; slaveof 127.0.0.1 6379</span><br><span class=\"line\">OK</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">主服务器</span></span><br><span class=\"line\">28696:M 08 Jan 16:53:10.291 * Synchronization with slave 127.0.0.1:6300 succeeded</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">当然也可以执行slaveof no one来解除主从</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">客户端</span></span><br><span class=\"line\">127.0.0.1:6300[1]&gt; slaveof no one</span><br><span class=\"line\">OK</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">服务器端</span>               </span><br><span class=\"line\">28135:M 08 Jan 16:51:34.637 # Connection with slave 127.0.0.1:6300 lost.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方式三-配置文件启动\"><a href=\"#方式三-配置文件启动\" class=\"headerlink\" title=\"方式三(配置文件启动)\"></a>方式三(配置文件启动)</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">只需要在配置文件中添加如下:</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置主服务器</span></span><br><span class=\"line\">slaveof 127.0.0.1 6379</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置端口</span></span><br><span class=\"line\">port 6300</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充:\"></a>补充:</h4><p>配置文件添加后台启动,.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">daemonize yes</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题-如果master-挂了怎么办\"><a href=\"#问题-如果master-挂了怎么办\" class=\"headerlink\" title=\"问题:如果master 挂了怎么办?\"></a>问题:如果master 挂了怎么办?</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">一个master有多个slaves</span><br><span class=\"line\">slave挂一个,只是处理读的性能有所下降</span><br><span class=\"line\">master 如果挂了,那么所有写请求都无法执行.</span><br><span class=\"line\">怎么办?</span><br><span class=\"line\">我们只能在slaves中找一个把他当成master,然后修改别的slave重新指向新的master</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">以上是我们手动处理master挂了的方法,那么有没有什么自动实现的呢?这里我们就要讲一下sentinel哨兵.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"redis-rentine哨兵\"><a href=\"#redis-rentine哨兵\" class=\"headerlink\" title=\"redis-rentine哨兵\"></a>redis-rentine哨兵</h3><p>哨兵就是来帮我我们把手动需要干的事情,自动化.</p>\n<h4 id=\"安装哨兵\"><a href=\"#安装哨兵\" class=\"headerlink\" title=\"安装哨兵\"></a>安装哨兵</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install redis-sentinel</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新建哨兵配置文件\"><a href=\"#新建哨兵配置文件\" class=\"headerlink\" title=\"新建哨兵配置文件\"></a>新建哨兵配置文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim redis_sentin.conf</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置哨兵的端口</span></span><br><span class=\"line\">port 26379</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置哨兵监听服务器地址</span></span><br><span class=\"line\">sentinel monitor 6379[别名] 127.0.0.1[服务器地址] 6379[端口] 1[有几个哨兵服务认为主机挂了才切换]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动哨兵\"><a href=\"#启动哨兵\" class=\"headerlink\" title=\"启动哨兵\"></a>启动哨兵</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@10-7-189-100 ~]# redis-sentinel redis_sentinel.conf</span><br></pre></td></tr></table></figure>\n\n<p>可以自己去启几个redis服务模拟一下 master挂了之后 哨兵是如何切换master的.</p>\n","categories":["redis"],"tags":["redis","主从复制"]},{"title":"Vuex","url":"/post/db4c4335.html","content":"<h3 id=\"什么是Vuex\"><a href=\"#什么是Vuex\" class=\"headerlink\" title=\"什么是Vuex?\"></a>什么是Vuex?</h3><p>Vuex 是实现组件全局状态(数据)管理的一种机制,可以方便的实现组件之间的数据共享.</p>\n<p><img data-src=\"/../images/Vuex/image-20200710180830043.png\" alt=\"image-20200710180830043\"></p>\n<p>如何没有vuex,我们大范围的传值的时候会十分麻烦,而有了vuex 我们只需要跟store相互就可以了</p>\n<p>当然我们也不是所有的数据都需要放到vuex中,有一些组件私有的数据,我们没有必要把他放到vuex中,只有组件之间共享的数据,才有必要放到vuex中.</p>\n<span id=\"more\"></span>\n\n<h3 id=\"使用vuex统一管理状态的优点\"><a href=\"#使用vuex统一管理状态的优点\" class=\"headerlink\" title=\"使用vuex统一管理状态的优点:\"></a>使用vuex统一管理状态的优点:</h3><ol>\n<li>能够在vuex中几种管理共享的数据,易于开发和维护.</li>\n<li>能够高效的实现组件之间的数据共享,提供开发效率.</li>\n<li>存储在vuex中的数据都是响应式的,能够实时保持数据与页面的同步</li>\n</ol>\n<h3 id=\"Vuex的基本使用\"><a href=\"#Vuex的基本使用\" class=\"headerlink\" title=\"Vuex的基本使用\"></a>Vuex的基本使用</h3><h4 id=\"安装vuex依赖包\"><a href=\"#安装vuex依赖包\" class=\"headerlink\" title=\"安装vuex依赖包\"></a>安装vuex依赖包</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install vuex --save</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">当然你也可以用 cnpm</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导入vuex包\"><a href=\"#导入vuex包\" class=\"headerlink\" title=\"导入vuex包\"></a>导入vuex包</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vuex</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vuex&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//将vuex放入vue中</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">Vuex</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建store对象\"><a href=\"#创建store对象\" class=\"headerlink\" title=\"创建store对象\"></a>创建store对象</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将store对象挂载到vue实例中\"><a href=\"#将store对象挂载到vue实例中\" class=\"headerlink\" title=\"将store对象挂载到vue实例中\"></a>将store对象挂载到vue实例中</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 导入store组件中的store实例对象</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;./store&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">productionTip</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">//将创建的共享数据对象,挂载到vue实例中</span></span><br><span class=\"line\">  <span class=\"comment\">//所有组件都可以从store中获取数据</span></span><br><span class=\"line\">  store,</span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> <span class=\"title function_\">h</span>(<span class=\"title class_\">App</span>)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vuex的核心概念\"><a href=\"#vuex的核心概念\" class=\"headerlink\" title=\"vuex的核心概念\"></a>vuex的核心概念</h3><h4 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h4><p>提供唯一的公共数据源,所有的共享数据都统一放到Store的state中进行存储</p>\n<h5 id=\"声明数据\"><a href=\"#声明数据\" class=\"headerlink\" title=\"声明数据\"></a>声明数据</h5><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"组件访问state中的数据\"><a href=\"#组件访问state中的数据\" class=\"headerlink\" title=\"组件访问state中的数据\"></a>组件访问state中的数据</h5><p>第一种方式:this.$store.state.全局数据名称</p>\n<p>第二种方式:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从vuex中按需导入mapState 函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;mapState&#125; <span class=\"keyword\">from</span>  <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//通过刚才导入的mapState函数,将当前组件需要的全局数据,映射为当前组件的computed计算属性</span></span><br><span class=\"line\"><span class=\"attr\">computed</span>:&#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过展开运算符映射成计算属性</span></span><br><span class=\"line\">    ...<span class=\"title function_\">mapState</span>([<span class=\"string\">&#x27;count&#x27;</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Moutation\"><a href=\"#Moutation\" class=\"headerlink\" title=\"Moutation\"></a>Moutation</h4><p>用于变更Store中的数据. 不能写异步的代码!!!</p>\n<ol>\n<li>只能通过mutation变更Store数据,不可以直接操作Store中的数据</li>\n<li>通过这种方式虽然操作起来比较繁琐,但是可以集中监控所有数据的变化</li>\n</ol>\n<p>第一种调用方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//定义mutations</span></span><br><span class=\"line\">    <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">        <span class=\"title function_\">add</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//变更状态</span></span><br><span class=\"line\">            state.<span class=\"property\">count</span> += <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"comment\">//在相应的组件中调用</span></span><br><span class=\"line\"> <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">addCount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//通过commit触发</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;add&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//定义mutations</span></span><br><span class=\"line\">    <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">        <span class=\"title function_\">addN</span>(<span class=\"params\">state,step</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//变更状态</span></span><br><span class=\"line\">            state.<span class=\"property\">count</span> += step</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"comment\">//在相应的组件中调用</span></span><br><span class=\"line\"> <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">addCount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//通过commit触发</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;add&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">step</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二种调用方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//定义mutations</span></span><br><span class=\"line\">    <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">        <span class=\"title function_\">add</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//变更状态</span></span><br><span class=\"line\">            state.<span class=\"property\">count</span> += <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">addN</span>(<span class=\"params\">state, step</span>) &#123;</span><br><span class=\"line\">            state.<span class=\"property\">count</span> += step</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">sub</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">            state.<span class=\"property\">count</span> -= <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">        </span><br><span class=\"line\"> <span class=\"comment\">//在相应的组件中导入mapMutations</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//在methods中通过...映射为当前组件的methods方法</span></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    ...<span class=\"title function_\">mapMutations</span>([<span class=\"string\">&#x27;sub&#x27;</span>])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//有参数的话 可以再定义一个函数,来调用this.subN(参数)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h4><p>我们刚才说过Mutation中不能执行异步操作,那么我们如果要用异步操作怎么办?这时候就需要用到action了</p>\n<p>第一种方式:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义action</span></span><br><span class=\"line\">    <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">        <span class=\"title function_\">addAsync</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//不能直接修改state中的数据,必须通过Mutation中的函数</span></span><br><span class=\"line\">                context.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;add&#x27;</span>)</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">//在相应组件中使用与Mutation类似,通过this.$store.dispatch</span></span><br><span class=\"line\">  <span class=\"title function_\">addAsync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;addAsync&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二种方式:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">subAsync</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                context.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;sub&#x27;</span>)</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> <span class=\"comment\">//在相应的组件中导入mapMutations</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//在methods中通过...映射为当前组件的methods方法</span></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    ...<span class=\"title function_\">mapActions</span>([<span class=\"string\">&#x27;sub&#x27;</span>])</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h4><p>Getter 用于对Store 中的数据进行加工处理形成新的数据.</p>\n<ol>\n<li>Getter 可以对Store中已有数据加工处理之后形成新的数据,类似Vue的计算属性</li>\n<li>Store中数据发生变化,Getter的数据也跟着变化</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义Getter</span></span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">showNum</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">`当前最新的数字:<span class=\"subst\">$&#123;state.count&#125;</span>`</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"comment\">//当然调用也有两种</span></span><br><span class=\"line\"><span class=\"number\">1.</span>使用<span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"property\">getters</span>.名称</span><br><span class=\"line\"><span class=\"number\">2.</span>导入 mapGetters </span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    ...<span class=\"title function_\">mapGetters</span>([<span class=\"string\">&#x27;showNum&#x27;</span>])</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h4><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p>\n<p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;),</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123; ... &#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123; ... &#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;),</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123; ... &#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: moduleA,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: moduleB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.<span class=\"property\">state</span>.<span class=\"property\">a</span> <span class=\"comment\">// -&gt; moduleA 的状态</span></span><br><span class=\"line\">store.<span class=\"property\">state</span>.<span class=\"property\">b</span> <span class=\"comment\">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><p>Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：</p>\n<ol>\n<li>应用层级的状态应该集中到单个 store 对象中。</li>\n<li>提交 <strong>mutation</strong> 是更改状态的唯一方法，并且这个过程是同步的。</li>\n<li>异步逻辑都应该封装到 <strong>action</strong> 里面。</li>\n</ol>\n<p>只要你遵守以上规则，如何组织代码随你便。如果你的 store 文件太大，只需将 action、mutation 和 getter 分割到单独的文件。</p>\n<p>对于大型应用，我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">├── index.<span class=\"property\">html</span></span><br><span class=\"line\">├── main.<span class=\"property\">js</span></span><br><span class=\"line\">├── api</span><br><span class=\"line\">│   └── ... # 抽取出<span class=\"variable constant_\">API</span>请求</span><br><span class=\"line\">├── components</span><br><span class=\"line\">│   ├── <span class=\"title class_\">App</span>.<span class=\"property\">vue</span></span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">└── store</span><br><span class=\"line\">    ├── index.<span class=\"property\">js</span>          # 我们组装模块并导出 store 的地方</span><br><span class=\"line\">    ├── actions.<span class=\"property\">js</span>        # 根级别的 action</span><br><span class=\"line\">    ├── mutations.<span class=\"property\">js</span>      # 根级别的 mutation</span><br><span class=\"line\">    └── modules</span><br><span class=\"line\">        ├── cart.<span class=\"property\">js</span>       # 购物车模块</span><br><span class=\"line\">        └── products.<span class=\"property\">js</span>   # 产品模块</span><br></pre></td></tr></table></figure>\n\n<p>参考官网文档:<a href=\"https://vuex.vuejs.org/zh/installation.html\">https://vuex.vuejs.org/zh/installation.html</a></p>\n","categories":["vuex"],"tags":["vue","vuex"]},{"title":"Protocol Buffers","url":"/post/c05c69b3.html","content":"<p>Protocol Buffers 是一种与语言无关，平台无关的可扩展机制，用于序列化结构化数据。使用Protocol Buffers 可以一次定义结构化的数据，然后可以使用特殊生成的源代码轻松地在各种数据流中使用各种语言编写和读取结构化数据。</p>\n<p>现在有许多框架等在使用Protocol Buffers。gRPC也是基于Protocol Buffers。 Protocol Buffers 目前有2和3两个版本号。</p>\n<p><strong>在gRPC中推荐使用proto3版本。</strong></p>\n<span id=\"more\"></span>\n\n<h2 id=\"文档结构\"><a href=\"#文档结构\" class=\"headerlink\" title=\"文档结构\"></a>文档结构</h2><h3 id=\"Protocol-Buffers版本\"><a href=\"#Protocol-Buffers版本\" class=\"headerlink\" title=\"Protocol Buffers版本\"></a>Protocol Buffers版本</h3><p>Protocol Buffers文档的第一行非注释行，为版本申明，不填写的话默认为版本2。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\">或者</span><br><span class=\"line\">syntax = &quot;proto2&quot;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Package包\"><a href=\"#Package包\" class=\"headerlink\" title=\"Package包\"></a>Package包</h3><p>Protocol Buffers 可以声明package，来防止命名冲突。 Packages是可选的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">package foo.bar;</span><br><span class=\"line\">message Open &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用的时候，也要加上命名空间，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">message Foo &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  foo.bar.Open open = 1;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：对于Python而言，<code>package</code>会被忽略处理，因为Python中的包是以文件目录来定义的。</strong></p>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><p>Protocol Buffers 中可以导入其它文件消息等，与Python的import类似。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import “myproject/other_protos.proto”;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义各种消息和服务\"><a href=\"#定义各种消息和服务\" class=\"headerlink\" title=\"定义各种消息和服务\"></a>定义各种消息和服务</h3><p>消息messge是用来定义数据的，服务service是用来gRPC的方法的。</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>Protocol Buffers 提供以下两种注释方式。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单行注释</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">多行注释 </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><table>\n<thead>\n<tr>\n<th align=\"left\">.proto</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">Python</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">double</td>\n<td align=\"left\"></td>\n<td align=\"left\">float</td>\n</tr>\n<tr>\n<td align=\"left\">float</td>\n<td align=\"left\"></td>\n<td align=\"left\">float</td>\n</tr>\n<tr>\n<td align=\"left\">int32</td>\n<td align=\"left\">使用变长编码，对负数编码效率低， 如果你的变量可能是负数，可以使用sint32</td>\n<td align=\"left\">int</td>\n</tr>\n<tr>\n<td align=\"left\">int64</td>\n<td align=\"left\">使用变长编码，对负数编码效率低，如果你的变量可能是负数，可以使用sint64</td>\n<td align=\"left\">int&#x2F;long</td>\n</tr>\n<tr>\n<td align=\"left\">uint32</td>\n<td align=\"left\">使用变长编码</td>\n<td align=\"left\">int&#x2F;long</td>\n</tr>\n<tr>\n<td align=\"left\">uint64</td>\n<td align=\"left\">使用变长编码</td>\n<td align=\"left\">int&#x2F;long</td>\n</tr>\n<tr>\n<td align=\"left\">sint32</td>\n<td align=\"left\">使用变长编码，带符号的int类型，对负数编码比int32高效</td>\n<td align=\"left\">int</td>\n</tr>\n<tr>\n<td align=\"left\">sint64</td>\n<td align=\"left\">使用变长编码，带符号的int类型，对负数编码比int64高效</td>\n<td align=\"left\">int&#x2F;long</td>\n</tr>\n<tr>\n<td align=\"left\">fixed32</td>\n<td align=\"left\">4字节编码， 如果变量经常大于2^{28} 的话，会比uint32高效</td>\n<td align=\"left\">int</td>\n</tr>\n<tr>\n<td align=\"left\">fixed64</td>\n<td align=\"left\">8字节编码， 如果变量经常大于2^{56} 的话，会比uint64高效</td>\n<td align=\"left\">int&#x2F;long</td>\n</tr>\n<tr>\n<td align=\"left\">sfixed32</td>\n<td align=\"left\">4字节编码</td>\n<td align=\"left\">int</td>\n</tr>\n<tr>\n<td align=\"left\">sfixed64</td>\n<td align=\"left\">8字节编码</td>\n<td align=\"left\">int&#x2F;long</td>\n</tr>\n<tr>\n<td align=\"left\">bool</td>\n<td align=\"left\"></td>\n<td align=\"left\">bool</td>\n</tr>\n<tr>\n<td align=\"left\">string</td>\n<td align=\"left\">必须包含utf-8编码或者7-bit ASCII text</td>\n<td align=\"left\">str</td>\n</tr>\n<tr>\n<td align=\"left\">bytes</td>\n<td align=\"left\">任意的字节序列</td>\n<td align=\"left\">str</td>\n</tr>\n</tbody></table>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><p>在 Proto Buffers 中，我们可以定义枚举和枚举类型，</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum </span><span class=\"title class_\">Corpus</span> &#123;</span><br><span class=\"line\">    UNIVERSAL = <span class=\"number\">0</span>;</span><br><span class=\"line\">    WEB = <span class=\"number\">1</span>;</span><br><span class=\"line\">    IMAGES = <span class=\"number\">2</span>;</span><br><span class=\"line\">    LOCAL = <span class=\"number\">3</span>;</span><br><span class=\"line\">    NEWS = <span class=\"number\">4</span>;</span><br><span class=\"line\">    PRODUCTS = <span class=\"number\">5</span>;</span><br><span class=\"line\">    VIDEO = <span class=\"number\">6</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Corpus corpus = <span class=\"number\">4</span>;</span><br></pre></td></tr></table></figure>\n\n<p>枚举定义在一个消息内部或消息外部都是可以的，如果枚举是 定义在 message 内部，而其他 message 又想使用，那么可以通过 MessageType.EnumType 的方式引用。</p>\n<p><strong>定义枚举的时候，我们要保证第一个枚举值必须是0，枚举值不能重复，除非使用 option allow_alias &#x3D; true 选项来开启别名。</strong></p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum </span><span class=\"title class_\">EnumAllowingAlias</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">option</span> allow_alias = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    UNKNOWN = <span class=\"number\">0</span>;</span><br><span class=\"line\">    STARTED = <span class=\"number\">1</span>;</span><br><span class=\"line\">    RUNNING = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>枚举值的范围是32-bit integer，但因为枚举值使用变长编码，所以不推荐使用负数作为枚举值，因为这会带来效率问题。</p>\n<h2 id=\"消息类型\"><a href=\"#消息类型\" class=\"headerlink\" title=\"消息类型\"></a>消息类型</h2><p>Protocol Buffers使用message定义消息数据。在Protocol Buffers中使用的数据都是通过message消息数据封装基本类型数据或其他消息数据，对应Python中的类。</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SearchRequest</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> query = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">int32</span> page_number = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"type\">int32</span> result_per_page = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字段编号\"><a href=\"#字段编号\" class=\"headerlink\" title=\"字段编号\"></a>字段编号</h3><p>消息定义中的每个字段都有唯一的编号。<strong>这些字段编号用于以消息二进制格式标识字段，并且在使用消息类型后不应更改。</strong> 请注意，<strong>1到15范围内的字段编号需要一个字节进行编码，包括字段编号和字段类型</strong>。<strong>16到2047范围内的字段编号占用两个字节</strong>。因此，您应该为非常频繁出现的消息元素保留数字1到15。请记住为将来可能添加的常用元素留出一些空间。</p>\n<p>最小的标识号可以从1开始，最大到2^29 - 1,或 536,870,911。不可以使用其中的[19000－19999]的标识号， Protobuf协议实现中对这些进行了预留。如果非要在.proto文件中使用这些预留标识号，编译时就会报警。同样你也不能使用早期保留的标识号。</p>\n<h3 id=\"指定字段规则\"><a href=\"#指定字段规则\" class=\"headerlink\" title=\"指定字段规则\"></a>指定字段规则</h3><p>消息字段可以是以下之一：</p>\n<ul>\n<li><p>singular：格式良好的消息可以包含该字段中的零个或一个（但不超过一个）。</p>\n</li>\n<li><p>repeated：此字段可以在格式良好的消息中重复任意次数（包括零）。将保留重复值的顺序。对应Python的列表。</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Result</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> url = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">string</span> title = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> <span class=\"type\">string</span> snippets = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"添加更多消息类型\"><a href=\"#添加更多消息类型\" class=\"headerlink\" title=\"添加更多消息类型\"></a>添加更多消息类型</h3><p>可以在单个.proto文件中定义多个消息类型。</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SearchRequest</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> query = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">int32</span> page_number = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"type\">int32</span> result_per_page = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SearchResponse</span> &#123;</span><br><span class=\"line\"> ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"保留字段\"><a href=\"#保留字段\" class=\"headerlink\" title=\"保留字段\"></a>保留字段</h3><p>保留变量不被使用</p>\n<p>如果通过完全删除字段或将其注释来更新消息类型，则未来用户可以在对类型进行自己的更新时重用字段编号。如果以后加载相同的旧版本，这可能会导致严重问题，包括数据损坏，隐私错误等。确保不会发生这种情况的一种方法是<strong>指定已删除字段的字段编号（或名称）reserved</strong>。如果将来的任何用户尝试使用这些字段标识符，protobuf编译器将会报错。</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  reserved <span class=\"number\">2</span>, <span class=\"number\">15</span>, <span class=\"number\">9</span> to <span class=\"number\">11</span>;</span><br><span class=\"line\">  reserved <span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h3><p>解析消息时，如果编码消息不包含特定的单数元素，则解析对象中的相应字段将设置为该字段的默认值。这些默认值是特定于类型的：</p>\n<ul>\n<li>对于字符串，默认值为空字符串。</li>\n<li>对于字节，默认值为空字节。</li>\n<li>对于bools，默认值为false。</li>\n<li>对于数字类型，默认值为零。</li>\n<li>对于枚举，默认值是第一个定义的枚举值，该值必须为0。</li>\n<li>对于消息字段，未设置该字段。它的确切值取决于语言。</li>\n<li>重复字段的默认值为空（通常是相应语言的空列表）。</li>\n</ul>\n<h3 id=\"嵌套类型\"><a href=\"#嵌套类型\" class=\"headerlink\" title=\"嵌套类型\"></a>嵌套类型</h3><p>你可以在其他消息类型中定义、使用消息类型，在下面的例子中，Result消息就定义在SearchResponse消息内，如：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SearchResponse</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">Result</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">string</span> url = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">string</span> title = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">repeated</span> <span class=\"type\">string</span> snippets = <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> Result results = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果要在其父消息类型之外重用此消息类型，使用</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"code\"><pre><span class=\"line\">SearchResponse.Result</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"map映射\"><a href=\"#map映射\" class=\"headerlink\" title=\"map映射\"></a>map映射</h2><p>如果要在数据定义中创建关联映射，Protocol Buffers提供了一种方便的语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">map&lt; key_type, value_type&gt; map_field = N ;</span><br></pre></td></tr></table></figure>\n\n<p>其中key_type可以是任何整数或字符串类型。请注意，枚举不是有效的key_type。value_type可以是除map映射类型外的任何类型。</p>\n<p>例如，如果要创建项目映射，其中每条Project消息都与字符串键相关联，则可以像下面这样定义它：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">map&lt;string, Project&gt; projects = 3 ;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>map的字段可以是repeated。</li>\n<li>序列化后的顺序和map迭代器的顺序是不确定的，所以你不要期望以固定顺序处理map</li>\n<li>当为.proto文件产生生成文本格式的时候，map会按照key 的顺序排序，数值化的key会按照数值排序。</li>\n<li>从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用，当从文本格式中解析map时，如果存在重复的key，则解析可能会失败。</li>\n<li>如果为映射字段提供键但没有值，则字段序列化时的行为取决于语言。在Python中，使用类型的默认值。</li>\n</ul>\n<h2 id=\"oneof\"><a href=\"#oneof\" class=\"headerlink\" title=\"oneof\"></a>oneof</h2><p>如果你的消息中有很多可选字段， 并且同时至多一个字段会被设置， 你可以加强这个行为，使用oneof特性节省内存。</p>\n<p>为了在.proto定义oneof字段， 你需要在名字前面加上oneof关键字, 比如下面例子的test_oneof:</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SampleMessage</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">oneof</span> test_oneof &#123;</span><br><span class=\"line\">    <span class=\"type\">string</span> name = <span class=\"number\">4</span>;</span><br><span class=\"line\">    SubMessage sub_message = <span class=\"number\">9</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后你可以增加oneof字段到 oneof 定义中. 你可以增加任意类型的字段, 但是不能使用repeated 关键字。</p>\n<h2 id=\"定义服务\"><a href=\"#定义服务\" class=\"headerlink\" title=\"定义服务\"></a>定义服务</h2><p>Protocol Buffers使用service定义RPC服务。</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">HelloRequest</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> greeting = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">HelloResponse</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> reply = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">service </span><span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> SayHello (HelloRequest) <span class=\"keyword\">returns</span> (HelloResponse) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：一个service中可定义多个方法。</strong></p>\n","categories":["PRC"],"tags":["PRC"]},{"title":"Python编程技巧","url":"/post/cc419826.html","content":"<p>分享一下python编程的技巧,在阅读此内容时,请确保你已经掌握了python的基本用法,</p>\n<span id=\"more\"></span>\n\n<h2 id=\"筛选列表-字典\"><a href=\"#筛选列表-字典\" class=\"headerlink\" title=\"筛选列表,字典\"></a>筛选列表,字典</h2><h3 id=\"列表筛选\"><a href=\"#列表筛选\" class=\"headerlink\" title=\"列表筛选\"></a>列表筛选</h3><p>一般都是用for循环加if 来判断如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from random import randint</span><br><span class=\"line\"># 模拟数据</span><br><span class=\"line\">data = [randint(-10,10) for _ in range(10)]</span><br><span class=\"line\">result=[]</span><br><span class=\"line\">for i in data:</span><br><span class=\"line\">    if i &gt;=0:</span><br><span class=\"line\">        result.append(i)</span><br><span class=\"line\">result</span><br><span class=\"line\">out:[4, 4, 1, 6, 2, 9, 6]</span><br></pre></td></tr></table></figure>\n\n<p>我们可以用<code>filter</code>函数</p>\n<p><strong>filter()</strong> 函数用于过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象</p>\n<p>该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">result = <span class=\"built_in\">filter</span>(<span class=\"keyword\">lambda</span> x:x&gt;=<span class=\"number\">0</span>,data)</span><br><span class=\"line\"><span class=\"comment\"># 如果要转换为列表，可以使用 list() 来转换。</span></span><br><span class=\"line\"><span class=\"built_in\">list</span>(result)</span><br><span class=\"line\">out:[<span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure>\n\n<p>我们也可以使用列表生成式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> data <span class=\"keyword\">if</span> x&gt;=<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<p>那到底哪个更快呢?我们可以用<code>%timeit</code>来测一下,发现是<code>filter</code>函数更快</p>\n<p><img data-src=\"/../images/Python%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/image-20200703232926291.png\" alt=\"image-20200703232926291\"></p>\n<h3 id=\"字典筛选\"><a href=\"#字典筛选\" class=\"headerlink\" title=\"字典筛选\"></a>字典筛选</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 模拟一个&#123;学号:分数&#125;的字典</span></span><br><span class=\"line\">data=&#123;k:randint(<span class=\"number\">60</span>,<span class=\"number\">100</span>) <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">11</span>)&#125;</span><br><span class=\"line\">data</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>: <span class=\"number\">66</span>, <span class=\"number\">2</span>: <span class=\"number\">100</span>, <span class=\"number\">3</span>: <span class=\"number\">67</span>, <span class=\"number\">4</span>: <span class=\"number\">60</span>, <span class=\"number\">5</span>: <span class=\"number\">70</span>, <span class=\"number\">6</span>: <span class=\"number\">99</span>, <span class=\"number\">7</span>: <span class=\"number\">71</span>, <span class=\"number\">8</span>: <span class=\"number\">95</span>, <span class=\"number\">9</span>: <span class=\"number\">88</span>, <span class=\"number\">10</span>: <span class=\"number\">69</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 筛选出大于90的</span></span><br><span class=\"line\">&#123;k:v <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> data.items() <span class=\"keyword\">if</span> v&gt;=<span class=\"number\">90</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"number\">2</span>: <span class=\"number\">100</span>, <span class=\"number\">6</span>: <span class=\"number\">99</span>, <span class=\"number\">8</span>: <span class=\"number\">95</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名元组\"><a href=\"#命名元组\" class=\"headerlink\" title=\"命名元组\"></a>命名元组</h2><p>我们有一个固定格式的数据,如:</p>\n<p>学生信息:(姓名,年龄,性别,邮箱),而数据量很大,为了减少开销,我们可以用元组表示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"string\">&#x27;小明&#x27;</span>,<span class=\"number\">15</span>,<span class=\"string\">&#x27;男&#x27;</span>,<span class=\"string\">&#x27;xiaoming@qq.com&#x27;</span>)</span><br><span class=\"line\">(<span class=\"string\">&#x27;小里&#x27;</span>,<span class=\"number\">11</span>,<span class=\"string\">&#x27;男&#x27;</span>,<span class=\"string\">&#x27;xiaolig@qq.com&#x27;</span>)</span><br><span class=\"line\">(<span class=\"string\">&#x27;小话&#x27;</span>,<span class=\"number\">13</span>,<span class=\"string\">&#x27;女&#x27;</span>,<span class=\"string\">&#x27;xiaohuag@qq.com&#x27;</span>)</span><br><span class=\"line\">(<span class=\"string\">&#x27;小图&#x27;</span>,<span class=\"number\">14</span>,<span class=\"string\">&#x27;男&#x27;</span>,<span class=\"string\">&#x27;xiaotug@qq.com&#x27;</span>)</span><br><span class=\"line\">data= (<span class=\"string\">&#x27;小明&#x27;</span>,<span class=\"number\">15</span>,<span class=\"string\">&#x27;男&#x27;</span>,<span class=\"string\">&#x27;xiaoming@qq.com&#x27;</span>)</span><br><span class=\"line\">我们需要访问的话会使用索引index来访问,但是如果用</span><br><span class=\"line\">姓名:data[<span class=\"number\">0</span>],年龄data[<span class=\"number\">1</span>]这种的话大大降低了可读性</span><br></pre></td></tr></table></figure>\n\n<p>1.我们可以用全局变量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">NAME = <span class=\"number\">0</span></span><br><span class=\"line\">AGE = <span class=\"number\">1</span></span><br><span class=\"line\">GENDER = <span class=\"number\">2</span></span><br><span class=\"line\">EMAIL = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># 我们也可以用拆包的形式</span></span><br><span class=\"line\"><span class=\"comment\"># NAME,AGE,GENDER,EMAIL = range(4)</span></span><br><span class=\"line\">data = (<span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"number\">15</span>, <span class=\"string\">&#x27;男&#x27;</span>, <span class=\"string\">&#x27;xiaoming@qq.com&#x27;</span>)</span><br><span class=\"line\">data[NAME]</span><br></pre></td></tr></table></figure>\n\n<p>2.也可以用<code>namedtuple</code>来替换元组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> namedtuple</span><br><span class=\"line\"><span class=\"comment\"># 定义一个namedtuple类型Student，并包含name，age,gender,email属性。</span></span><br><span class=\"line\">Student = namedtuple(<span class=\"string\">&#x27;Student&#x27;</span>,[<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;age&#x27;</span>,<span class=\"string\">&#x27;gemder&#x27;</span>,<span class=\"string\">&#x27;email&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\"># 创建一个Student对象</span></span><br><span class=\"line\"><span class=\"comment\"># student = Student(&#x27;小明&#x27;, 15, &#x27;男&#x27;, &#x27;xiaoming@qq.com&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># 我也可以使用关键字传参</span></span><br><span class=\"line\"><span class=\"comment\"># student=Student(name=&#x27;小明&#x27;, age=15, gemder=&#x27;男&#x27;, email=&#x27;xiaoming@qq.com&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># 也可以传入一个列表,这里注意需要使用&quot;_make&quot;方法</span></span><br><span class=\"line\">student = Student._make([<span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"number\">15</span>, <span class=\"string\">&#x27;男&#x27;</span>, <span class=\"string\">&#x27;xiaoming@qq.com&#x27;</span>])</span><br><span class=\"line\">student</span><br><span class=\"line\">out:Student(name=<span class=\"string\">&#x27;小明&#x27;</span>, age=<span class=\"number\">15</span>, gemder=<span class=\"string\">&#x27;男&#x27;</span>, email=<span class=\"string\">&#x27;xiaoming@qq.com&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 这样的好处是,我们可以直接用属性来访问</span></span><br><span class=\"line\">student.name</span><br><span class=\"line\">out:<span class=\"string\">&#x27;小明&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"统计列表或字典出现的次数\"><a href=\"#统计列表或字典出现的次数\" class=\"headerlink\" title=\"统计列表或字典出现的次数\"></a>统计列表或字典出现的次数</h2><p>我们希望统计一下列表中,每个元素出现的个数,</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\"><span class=\"comment\"># 用randint模拟</span></span><br><span class=\"line\">data = [randint(<span class=\"number\">0</span>,<span class=\"number\">20</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>)]</span><br><span class=\"line\">data</span><br><span class=\"line\">out:[<span class=\"number\">13</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">14</span>, <span class=\"number\">13</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">13</span>, <span class=\"number\">11</span>, <span class=\"number\">19</span>, <span class=\"number\">3</span>, <span class=\"number\">13</span>, <span class=\"number\">5</span>, <span class=\"number\">13</span>, <span class=\"number\">11</span>, <span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>]</span><br></pre></td></tr></table></figure>\n\n<p>第一种做法:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">result = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">        result[i]+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        result[i]=<span class=\"number\">1</span></span><br><span class=\"line\">result</span><br><span class=\"line\">out:&#123;<span class=\"number\">13</span>: <span class=\"number\">5</span>, <span class=\"number\">5</span>: <span class=\"number\">3</span>, <span class=\"number\">1</span>: <span class=\"number\">1</span>, <span class=\"number\">2</span>: <span class=\"number\">1</span>, <span class=\"number\">14</span>: <span class=\"number\">1</span>, <span class=\"number\">6</span>: <span class=\"number\">2</span>, <span class=\"number\">11</span>: <span class=\"number\">2</span>, <span class=\"number\">19</span>: <span class=\"number\">1</span>, <span class=\"number\">3</span>: <span class=\"number\">1</span>, <span class=\"number\">10</span>: <span class=\"number\">1</span>, <span class=\"number\">17</span>: <span class=\"number\">1</span>, <span class=\"number\">18</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 如果我们要统计前3个的话,就要对字典进行排序,我们可以使用内置函数sorted,将字典转化为元组</span></span><br><span class=\"line\">new_tuple = [(v,k)<span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> result.items()]</span><br><span class=\"line\"><span class=\"comment\"># 然后用sorted</span></span><br><span class=\"line\"><span class=\"built_in\">sorted</span>(new_tuple)</span><br><span class=\"line\">[(<span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\"> (<span class=\"number\">1</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\"> (<span class=\"number\">1</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\"> (<span class=\"number\">1</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\"> (<span class=\"number\">1</span>, <span class=\"number\">14</span>),</span><br><span class=\"line\"> (<span class=\"number\">1</span>, <span class=\"number\">17</span>),</span><br><span class=\"line\"> (<span class=\"number\">1</span>, <span class=\"number\">18</span>),</span><br><span class=\"line\"> (<span class=\"number\">1</span>, <span class=\"number\">19</span>),</span><br><span class=\"line\"> (<span class=\"number\">2</span>, <span class=\"number\">6</span>),</span><br><span class=\"line\"> (<span class=\"number\">2</span>, <span class=\"number\">11</span>),</span><br><span class=\"line\"> (<span class=\"number\">3</span>, <span class=\"number\">5</span>),</span><br><span class=\"line\"> (<span class=\"number\">5</span>, <span class=\"number\">13</span>)]</span><br><span class=\"line\"><span class=\"comment\"># 我们也可以用zip拼接</span></span><br><span class=\"line\">new_tuple_1 = <span class=\"built_in\">zip</span>(result.values(),result.keys())</span><br><span class=\"line\"><span class=\"built_in\">sorted</span>(new_tuple_1)</span><br><span class=\"line\">[(<span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\"> (<span class=\"number\">1</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\"> (<span class=\"number\">1</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\"> (<span class=\"number\">1</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\"> (<span class=\"number\">1</span>, <span class=\"number\">14</span>),</span><br><span class=\"line\"> (<span class=\"number\">1</span>, <span class=\"number\">17</span>),</span><br><span class=\"line\"> (<span class=\"number\">1</span>, <span class=\"number\">18</span>),</span><br><span class=\"line\"> (<span class=\"number\">1</span>, <span class=\"number\">19</span>),</span><br><span class=\"line\"> (<span class=\"number\">2</span>, <span class=\"number\">6</span>),</span><br><span class=\"line\"> (<span class=\"number\">2</span>, <span class=\"number\">11</span>),</span><br><span class=\"line\"> (<span class=\"number\">3</span>, <span class=\"number\">5</span>),</span><br><span class=\"line\"> (<span class=\"number\">5</span>, <span class=\"number\">13</span>)]</span><br><span class=\"line\"><span class=\"comment\"># 也可以用sorted函数内置的key来指定比较</span></span><br><span class=\"line\"><span class=\"comment\"># 第一个参数为传入的数据,第二个key来指定用哪个值作为比较</span></span><br><span class=\"line\"><span class=\"built_in\">sorted</span>(result.items(),key=<span class=\"keyword\">lambda</span> x:x[<span class=\"number\">1</span>])</span><br><span class=\"line\">[(<span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\"> (<span class=\"number\">2</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\"> (<span class=\"number\">14</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\"> (<span class=\"number\">19</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\"> (<span class=\"number\">3</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\"> (<span class=\"number\">10</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\"> (<span class=\"number\">17</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\"> (<span class=\"number\">18</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\"> (<span class=\"number\">6</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\"> (<span class=\"number\">11</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\"> (<span class=\"number\">5</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\"> (<span class=\"number\">13</span>, <span class=\"number\">5</span>)]</span><br></pre></td></tr></table></figure>\n\n<p>第二种,使用<code>collections</code>的<code>Counter</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</span><br><span class=\"line\">c = Counter(data)</span><br><span class=\"line\">Counter(&#123;<span class=\"number\">13</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">         <span class=\"number\">5</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">         <span class=\"number\">1</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">         <span class=\"number\">2</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">         <span class=\"number\">14</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">         <span class=\"number\">6</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">         <span class=\"number\">11</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">         <span class=\"number\">19</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">         <span class=\"number\">3</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">         <span class=\"number\">10</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">         <span class=\"number\">17</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">         <span class=\"number\">18</span>: <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 我们如果要取最多的话只需要使用most_common</span></span><br><span class=\"line\"><span class=\"comment\"># 表示取出现次数最多的前三个</span></span><br><span class=\"line\">c.most_common(<span class=\"number\">3</span>)</span><br><span class=\"line\">[(<span class=\"number\">13</span>, <span class=\"number\">5</span>), (<span class=\"number\">5</span>, <span class=\"number\">3</span>), (<span class=\"number\">6</span>, <span class=\"number\">2</span>)]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查找公共键\"><a href=\"#查找公共键\" class=\"headerlink\" title=\"查找公共键\"></a>查找公共键</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">需求:</span></span><br><span class=\"line\"><span class=\"string\">现有3个字典,需要查找出在三个字典中公共出现的键</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">dict_1 = &#123;k:randint(<span class=\"number\">60</span>,<span class=\"number\">100</span>) <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> sample(<span class=\"string\">&#x27;abcdefg&#x27;</span>,randint(<span class=\"number\">1</span>,<span class=\"number\">7</span>))&#125;</span><br><span class=\"line\">dict_2 = &#123;k:randint(<span class=\"number\">60</span>,<span class=\"number\">100</span>) <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> sample(<span class=\"string\">&#x27;abcdefg&#x27;</span>,randint(<span class=\"number\">1</span>,<span class=\"number\">7</span>))&#125;</span><br><span class=\"line\">dict_3 = &#123;k:randint(<span class=\"number\">60</span>,<span class=\"number\">100</span>) <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> sample(<span class=\"string\">&#x27;abcdefg&#x27;</span>,randint(<span class=\"number\">1</span>,<span class=\"number\">7</span>))&#125;</span><br><span class=\"line\">dict_1</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;e&#x27;</span>: <span class=\"number\">68</span>, <span class=\"string\">&#x27;c&#x27;</span>: <span class=\"number\">73</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">68</span>, <span class=\"string\">&#x27;f&#x27;</span>: <span class=\"number\">80</span>&#125;</span><br><span class=\"line\">dict_2</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;e&#x27;</span>: <span class=\"number\">99</span>, <span class=\"string\">&#x27;g&#x27;</span>: <span class=\"number\">74</span>, <span class=\"string\">&#x27;c&#x27;</span>: <span class=\"number\">96</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">78</span>&#125;</span><br><span class=\"line\">dict_3</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">90</span>, <span class=\"string\">&#x27;g&#x27;</span>: <span class=\"number\">93</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一种方法:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">result = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> dict_1.keys():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> k <span class=\"keyword\">in</span> dict_2 <span class=\"keyword\">and</span> k <span class=\"keyword\">in</span> dict_3:</span><br><span class=\"line\">        result.append(k)</span><br><span class=\"line\">result</span><br><span class=\"line\">[<span class=\"string\">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>这种的话 如果我有很多个字典,我就要一个一个判断</p>\n<p>第二种:我们可以用集合的交集</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">dict_1.keys()&amp; dict_2.keys() &amp;dict_3.keys()</span><br><span class=\"line\"><span class=\"comment\"># 如果有多个 我们可以用</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">reduce() 函数会对参数序列中元素进行累积。</span></span><br><span class=\"line\"><span class=\"string\">函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 在python3中已将reduce移除,我们需要在functools中导入</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\">reduce(<span class=\"keyword\">lambda</span> a,b:a&amp;b,<span class=\"built_in\">map</span>(<span class=\"built_in\">dict</span>.keys,[dict_1,dict_2,dict_3]))</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;b&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何实现历史记录功能\"><a href=\"#如何实现历史记录功能\" class=\"headerlink\" title=\"如何实现历史记录功能\"></a>如何实现历史记录功能</h2><p>需求:记录用户的每次输入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\"><span class=\"comment\"># 定义一个deque 他是一个双端循环队列</span></span><br><span class=\"line\"><span class=\"comment\"># deque(可迭代对象, 长度)</span></span><br><span class=\"line\">q = deque([], <span class=\"number\">5</span>)</span><br><span class=\"line\">q.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">q.append(<span class=\"number\">2</span>)</span><br><span class=\"line\">q.append(<span class=\"number\">3</span>)</span><br><span class=\"line\">q.append(<span class=\"number\">4</span>)</span><br><span class=\"line\">q.append(<span class=\"number\">5</span>)</span><br><span class=\"line\">q.append(<span class=\"number\">6</span>)</span><br><span class=\"line\">q</span><br><span class=\"line\">deque([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>])</span><br><span class=\"line\"><span class=\"comment\"># 其实内部实现了一个判断列表长度,判断如果长度太长就把左边先进的剔除掉</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"迭代多个可迭代对象\"><a href=\"#迭代多个可迭代对象\" class=\"headerlink\" title=\"迭代多个可迭代对象\"></a>迭代多个可迭代对象</h2><p>需求:</p>\n<ol>\n<li>有一个班的,希望得到语文,数学,英语的总分</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randint</span><br><span class=\"line\">chinese = [randint(<span class=\"number\">60</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">30</span>)]</span><br><span class=\"line\">math = [randint(<span class=\"number\">60</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">30</span>)]</span><br><span class=\"line\">enlish = [randint(<span class=\"number\">60</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">30</span>)]</span><br><span class=\"line\"><span class=\"comment\"># 我们可以使用zip函数</span></span><br><span class=\"line\">total = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(chinese, math, enlish):</span><br><span class=\"line\">    total.append(<span class=\"built_in\">sum</span>(i))</span><br><span class=\"line\">total</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>多个班,希望得到分数超过90的人数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from random import randint</span><br><span class=\"line\">c1 = [randint(60, 100) for _ in range(30)]</span><br><span class=\"line\">c2 = [randint(60, 100) for _ in range(33)]</span><br><span class=\"line\">c3 = [randint(60, 100) for _ in range(32)]</span><br><span class=\"line\">c4 = [randint(60, 100) for _ in range(31)]</span><br><span class=\"line\">count = 0</span><br><span class=\"line\">from itertools import chain</span><br><span class=\"line\"># 也可以直接相加,两个效率是一样的</span><br><span class=\"line\"># for i in c1+c2+c3+c4:</span><br><span class=\"line\">for i in chain(c1 ,c2 , c3 , c4):</span><br><span class=\"line\">    if i &gt;= 90:</span><br><span class=\"line\">        count += 1</span><br><span class=\"line\">count</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拆分多个分隔符的字符串\"><a href=\"#拆分多个分隔符的字符串\" class=\"headerlink\" title=\"拆分多个分隔符的字符串\"></a>拆分多个分隔符的字符串</h2><p>需求:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">有一个字符串包含多个分隔符,如:</span><br><span class=\"line\">s = <span class=\"string\">&#x27;ads;cd|efesada,fjasd,fasd\\tfasd;feas,asdas:fefa\\tffgg&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>使用<code>split</code>方法,进行多次</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&#x27;ads;cd|efesada,fjasd,fasd\\tfasd;feas,asdas:fefa\\tffgg&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 我们可以对s进行split()</span></span><br><span class=\"line\">res = s.split(<span class=\"string\">&#x27;;&#x27;</span>)</span><br><span class=\"line\">res</span><br><span class=\"line\">[<span class=\"string\">&#x27;ads&#x27;</span>, <span class=\"string\">&#x27;cd|efesada,fjasd,fasd\\tfasd&#x27;</span>, <span class=\"string\">&#x27;feas,asdas:fefa\\tffgg&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 然后再对res进行一次split()</span></span><br><span class=\"line\">[i.split(<span class=\"string\">&#x27;|&#x27;</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res]</span><br><span class=\"line\">[[<span class=\"string\">&#x27;ads&#x27;</span>], [<span class=\"string\">&#x27;cd&#x27;</span>, <span class=\"string\">&#x27;efesada,fjasd,fasd\\tfasd&#x27;</span>], [<span class=\"string\">&#x27;feas,asdas:fefa\\tffgg&#x27;</span>]]</span><br><span class=\"line\"><span class=\"comment\"># 这并不是我们想要的结果,我们可以用变量t来接收</span></span><br><span class=\"line\">t=[]</span><br><span class=\"line\">[t.extend(i.split(<span class=\"string\">&#x27;|&#x27;</span>)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res]</span><br><span class=\"line\">t</span><br><span class=\"line\">[<span class=\"string\">&#x27;ads&#x27;</span>, <span class=\"string\">&#x27;cd&#x27;</span>, <span class=\"string\">&#x27;efesada,fjasd,fasd\\tfasd&#x27;</span>, <span class=\"string\">&#x27;feas,asdas:fefa\\tffgg&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 然后再对其进行split()</span></span><br><span class=\"line\"><span class=\"comment\"># 所以我们可以定义一个函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mySplit</span>(<span class=\"params\">s,separators</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 这里需要把传进来的字符串变成列表</span></span><br><span class=\"line\">    res=[s]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> separator <span class=\"keyword\">in</span> separators:</span><br><span class=\"line\">        t = []</span><br><span class=\"line\">        [t.extend(i.split(separator)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res]</span><br><span class=\"line\">        res =t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">s = <span class=\"string\">&#x27;ads;cd|efesada,fjasd,fasd\\tfasd;feas,asdas:fefa\\tffgg&#x27;</span></span><br><span class=\"line\">result = mySplit(s,<span class=\"string\">&#x27;;,|\\t&#x27;</span>)</span><br><span class=\"line\">result</span><br><span class=\"line\">[<span class=\"string\">&#x27;ads&#x27;</span>, <span class=\"string\">&#x27;cd&#x27;</span>, <span class=\"string\">&#x27;efesada&#x27;</span>, <span class=\"string\">&#x27;fjasd&#x27;</span>, <span class=\"string\">&#x27;fasd&#x27;</span>, <span class=\"string\">&#x27;fasd&#x27;</span>, <span class=\"string\">&#x27;feas&#x27;</span>, <span class=\"string\">&#x27;asdas:fefa&#x27;</span>, <span class=\"string\">&#x27;ffgg&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>使用<code>re.split</code></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">s = <span class=\"string\">&#x27;ads;cd|efesada,fjasd,fasd\\tfasd;feas,asdas:fefa\\tffgg&#x27;</span></span><br><span class=\"line\">re.split(<span class=\"string\">&#x27;[;|,\\t]+&#x27;</span>,s)</span><br><span class=\"line\">[<span class=\"string\">&#x27;ads&#x27;</span>, <span class=\"string\">&#x27;cd&#x27;</span>, <span class=\"string\">&#x27;efesada&#x27;</span>, <span class=\"string\">&#x27;fjasd&#x27;</span>, <span class=\"string\">&#x27;fasd&#x27;</span>, <span class=\"string\">&#x27;fasd&#x27;</span>, <span class=\"string\">&#x27;feas&#x27;</span>, <span class=\"string\">&#x27;asdas:fefa&#x27;</span>, <span class=\"string\">&#x27;ffgg&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进行字符串对齐\"><a href=\"#进行字符串对齐\" class=\"headerlink\" title=\"进行字符串对齐\"></a>进行字符串对齐</h2><ol>\n<li>字符串方法</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">s=<span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># ljust 左对齐,第二个参数为填充</span></span><br><span class=\"line\">s.ljust(<span class=\"number\">20</span>,<span class=\"string\">&#x27;#&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;aaa#################&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 右对齐</span></span><br><span class=\"line\">s.rjust(<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;                 aaa&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 居中对齐</span></span><br><span class=\"line\">s.center(<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;        aaa         &#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>format</code>方法</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#左对齐</span></span><br><span class=\"line\"><span class=\"built_in\">format</span>(s,<span class=\"string\">&#x27;&lt;20&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;aaa                 &#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#右对齐</span></span><br><span class=\"line\"><span class=\"built_in\">format</span>(s,<span class=\"string\">&#x27;&gt;20&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;                 aaa&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#居中对齐</span></span><br><span class=\"line\"><span class=\"built_in\">format</span>(s,<span class=\"string\">&#x27;^20&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;        aaa         &#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何设置文件缓冲\"><a href=\"#如何设置文件缓冲\" class=\"headerlink\" title=\"如何设置文件缓冲\"></a>如何设置文件缓冲</h2><ul>\n<li>全缓冲:<code>open</code>函数的bufering设置为大于1的整数n,n为缓冲区大小</li>\n<li>行缓冲:<code>open</code>函数的buffering设置为1,当有换行时写入</li>\n<li>无缓冲:<code>open</code>函数的buffering设置为0,实时写入</li>\n</ul>\n<h2 id=\"如何使用临时文件\"><a href=\"#如何使用临时文件\" class=\"headerlink\" title=\"如何使用临时文件\"></a>如何使用临时文件</h2><p>你需要在程序执行时创建一个临时文件或目录，并希望使用完之后可以自动销毁掉。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tempfile <span class=\"keyword\">import</span> TemporaryFile</span><br><span class=\"line\"></span><br><span class=\"line\">f = TemporaryFile(mode=<span class=\"string\">&#x27;w+t&#x27;</span>)</span><br><span class=\"line\">f.write(<span class=\"string\">&#x27;abcdef&#x27;</span> * <span class=\"number\">1000</span>)</span><br><span class=\"line\">f.seek(<span class=\"number\">0</span>)</span><br><span class=\"line\">data = f.read(<span class=\"number\">100</span>)</span><br><span class=\"line\">data</span><br><span class=\"line\">f.close()</span><br><span class=\"line\"><span class=\"keyword\">from</span> tempfile <span class=\"keyword\">import</span> TemporaryFile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> TemporaryFile(<span class=\"string\">&#x27;w+t&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"comment\"># Read/write to the file</span></span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;Hello World\\n&#x27;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;Testing\\n&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># Seek back to beginning and read the data</span></span><br><span class=\"line\">    f.seek(<span class=\"number\">0</span>)</span><br><span class=\"line\">    data = f.read()</span><br><span class=\"line\">TemporaryFile`是匿名的文件,如果你需要有名字的文件,可以使用`NamedTemporaryFile</span><br><span class=\"line\"><span class=\"keyword\">from</span> tempfile <span class=\"keyword\">import</span> NamedTemporaryFile</span><br><span class=\"line\"><span class=\"keyword\">with</span> NamedTemporaryFile(<span class=\"string\">&#x27;w+t&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;filename is:&#x27;</span>, f.name)</span><br><span class=\"line\">    </span><br><span class=\"line\">filename <span class=\"keyword\">is</span>: C:\\Users\\Tiger\\AppData\\Local\\Temp\\tmphjupdmz8</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">这里，被打开文件的 f.name 属性包含了该临时文件的文件名。 当你需要将文件名传递给其他代码来打开这个文件的时候，这个就很有用了。 和 TemporaryFile() 一样，结果文件关闭时会被自动删除掉。 如果你不想这么做，可以传递一个关键字参数 delete=False 即可</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何在一个现有类中-添加自己的逻辑\"><a href=\"#如何在一个现有类中-添加自己的逻辑\" class=\"headerlink\" title=\"如何在一个现有类中,添加自己的逻辑\"></a>如何在一个现有类中,添加自己的逻辑</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">比如,我已经有一个<span class=\"built_in\">tuple</span>类,这个类可以把列表变成元组</span><br><span class=\"line\"><span class=\"built_in\">tuple</span>([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, -<span class=\"number\">1</span>, <span class=\"string\">&#x27;abc&#x27;</span>, [<span class=\"string\">&#x27;x&#x27;</span>, <span class=\"string\">&#x27;u&#x27;</span>], <span class=\"number\">3</span>]])</span><br><span class=\"line\">([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, -<span class=\"number\">1</span>, <span class=\"string\">&#x27;abc&#x27;</span>, [<span class=\"string\">&#x27;x&#x27;</span>, <span class=\"string\">&#x27;u&#x27;</span>], <span class=\"number\">3</span>],)</span><br><span class=\"line\">而我们希望得到过滤掉字符串已经小于<span class=\"number\">0</span>的数</span><br></pre></td></tr></table></figure>\n\n<p>我们可以重写<code>new</code>方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">intTuple</span>(<span class=\"title class_ inherited__\">tuple</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__new__</span>(<span class=\"params\">cls, iterable</span>):</span><br><span class=\"line\">        g = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> iterable <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(i, <span class=\"built_in\">int</span>) <span class=\"keyword\">and</span> i &gt; <span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>().__new__(cls,g)</span><br><span class=\"line\">t = intTuple([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, -<span class=\"number\">1</span>, <span class=\"string\">&#x27;abc&#x27;</span>, [<span class=\"string\">&#x27;x&#x27;</span>, <span class=\"string\">&#x27;u&#x27;</span>], <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(t)</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"上下文管理\"><a href=\"#上下文管理\" class=\"headerlink\" title=\"上下文管理\"></a>上下文管理</h2><p>实现一个新的上下文管理器的最简单的方法就是使用 <code>contexlib</code> 模块中的 <code>@contextmanager</code> 装饰器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> contextlib <span class=\"keyword\">import</span> contextmanager</span><br><span class=\"line\"><span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\"><span class=\"meta\">@contextmanager</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">conn_sqlite3</span>(<span class=\"params\">db</span>):</span><br><span class=\"line\">    conn = sqlite3.connect(db)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;start&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> conn</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;close&#x27;</span>)</span><br><span class=\"line\">    conn.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> conn_sqlite3(<span class=\"string\">&#x27;db.sqlite3&#x27;</span>) <span class=\"keyword\">as</span>  conn:</span><br><span class=\"line\">    cur = conn.cursor()</span><br><span class=\"line\">    cur.execute(<span class=\"string\">&#x27;select * from main.api_userunfo&#x27;</span>)</span><br><span class=\"line\">    result = cur.fetchall()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br></pre></td></tr></table></figure>\n\n<p>在函数 <code>conn_sqlite3</code> 中，<code>yield</code> 之前的代码会在上下文管理器中作为 <code>__enter__()</code> 方法执行， 所有在 <code>yield</code> 之后的代码会作为 <code>__exit__()</code> 方法执行。 如果出现了异常，异常会在yield语句那里抛出。</p>\n<p>当然也可以在类中用<code>__enter__()</code>方法 跟 <code>__exit__()</code>方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">connSqlite3</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,db</span>):</span><br><span class=\"line\">        self.db =db</span><br><span class=\"line\">        self.conn=<span class=\"literal\">None</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__enter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;start&#x27;</span>)</span><br><span class=\"line\">        self.conn = sqlite3.connect(self.db)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.conn</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__exit__</span>(<span class=\"params\">self, exc_type, exc_val, exc_tb</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;close&#x27;</span>)</span><br><span class=\"line\">        self.conn.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> connSqlite3(<span class=\"string\">&#x27;db.sqlite3&#x27;</span>) <span class=\"keyword\">as</span>  conn:</span><br><span class=\"line\">    cur = conn.cursor()</span><br><span class=\"line\">    cur.execute(<span class=\"string\">&#x27;select * from main.api_userunfo&#x27;</span>)</span><br><span class=\"line\">    result = cur.fetchall()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br></pre></td></tr></table></figure>\n\n","categories":["python"],"tags":["python","技巧"]},{"title":"YAML的基本语法，以及每个语法元素与Python语法的对应示例","url":"/post/a547ee48.html","content":"<p>YAML（YAML Ain’t Markup Language）是一种人类可读的数据序列化格式，通常用于配置文件和数据交换。YAML以清晰、简洁和易于阅读的方式表示数据，并且常被用于各种编程语言的配置文件和数据交换格式。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"YAML的基本语法规则：\"><a href=\"#YAML的基本语法规则：\" class=\"headerlink\" title=\"YAML的基本语法规则：\"></a>YAML的基本语法规则：</h3><ul>\n<li>YAML的数据是键值对（key-value）的形式，采用冒号（:）分隔键和值。</li>\n<li>YAML使用缩进表示层级关系。缩进时不允许使用Tab键，只允许使用空格。缩进的空格数不重要，但同级元素必须左侧对齐。</li>\n<li>YAML支持多种数据类型，包括对象、数组、纯量等。</li>\n</ul>\n<h3 id=\"YAML的数据类型\"><a href=\"#YAML的数据类型\" class=\"headerlink\" title=\"YAML的数据类型:\"></a>YAML的数据类型:</h3><p><strong>1.简单值：</strong> YAML中的简单值可以是字符串、整数、浮点数、布尔值或null。</p>\n<p>YAML示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">codename:</span> <span class=\"string\">John</span></span><br><span class=\"line\"><span class=\"attr\">age:</span> <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attr\">is_student:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>对应Python示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"> codedata = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;John&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;is_student&#x27;</span>: <span class=\"literal\">True</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. 列表：</strong> YAML中的列表使用横杠（-）表示，可以包含多个元素。</p>\n<p>YAML示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">codefruits:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">apple</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">banana</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">orange</span></span><br></pre></td></tr></table></figure>\n\n<p>对应Python示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">codedata = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;fruits&#x27;</span>: [<span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"string\">&#x27;banana&#x27;</span>, <span class=\"string\">&#x27;orange&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. 嵌套结构：</strong> YAML允许嵌套的数据结构，如字典中嵌套列表或其他字典。</p>\n<p>YAML示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">codeperson:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">Alice</span></span><br><span class=\"line\">  <span class=\"attr\">address:</span></span><br><span class=\"line\">    <span class=\"attr\">street:</span> <span class=\"number\">123</span> <span class=\"string\">Main</span> <span class=\"string\">St</span></span><br><span class=\"line\">    <span class=\"attr\">city:</span> <span class=\"string\">Anytown</span></span><br></pre></td></tr></table></figure>\n\n<p>对应Python示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">codedata = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;person&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;Alice&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;address&#x27;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;street&#x27;</span>: <span class=\"string\">&#x27;123 Main St&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;city&#x27;</span>: <span class=\"string\">&#x27;Anytown&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4. 多行文本：</strong> YAML支持多行文本的表示，可以使用<code>|</code>表示保留换行符，或者<code>&gt;</code>表示折叠换行符。</p>\n<p>YAML示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">codedescription:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">  This is a multi-line</span></span><br><span class=\"line\"><span class=\"string\">  description in YAML.</span></span><br></pre></td></tr></table></figure>\n\n<p>对应Python示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">codedata = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;description&#x27;</span>: <span class=\"string\">&#x27;This is a multi-line\\ndescription in YAML.&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些是YAML的一些基本语法元素和相应的Python示例。YAML还支持更复杂的数据结构和高级特性，具体语法取决于您的需求和应用场景。在Python中，您可以使用PyYAML等库来解析和生成YAML数据。</p>\n","categories":["yaml"],"tags":["yaml"]},{"title":"docker-compose安装gitlab","url":"/post/a6b516b8.html","content":"<p><code>docker-compose</code> 是一个用于定义和运行多个 Docker 容器的工具，它通过一个单独的配置文件来管理和组织多个容器的部署。使用 <code>docker-compose</code>，您可以轻松地定义一个包含多个服务的应用程序，每个服务可以运行在一个独立的 Docker 容器中，然后通过一个命令就可以启动、停止和管理整个应用程序的容器。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"docker-compose安装\"><a href=\"#docker-compose安装\" class=\"headerlink\" title=\"docker-compose安装\"></a>docker-compose安装</h2><p>具体查看<a href=\"https://docs.docker.com.zh.xy2401.com/compose/install/\">https://docs.docker.com.zh.xy2401.com/compose/install/</a></p>\n<h2 id=\"docker-compose-基本使用\"><a href=\"#docker-compose-基本使用\" class=\"headerlink\" title=\"docker-compose 基本使用\"></a>docker-compose 基本使用</h2><p>以下是一些关键概念和 <code>docker-compose</code> 的基本使用方法：</p>\n<p><strong>关键概念：</strong></p>\n<ol>\n<li>**服务 (Service)**：一个服务对应一个应用程序的组件，通常运行在一个独立的 Docker 容器中。例如，一个 web 应用程序可能包括一个后端服务和一个前端服务。</li>\n<li>**容器 (Container)**：Docker 容器是一个独立的运行环境，包含应用程序及其依赖。<code>docker-compose</code> 允许您定义和管理多个容器。</li>\n<li><strong>docker-compose.yml 文件</strong>：这是 <code>docker-compose</code> 的配置文件，使用 YAML 格式编写。在这个文件中，您可以定义需要的服务、它们的镜像、容器设置、网络配置等信息。</li>\n</ol>\n<p><strong>基本使用方法：</strong></p>\n<ol>\n<li><strong>安装 Docker 和 Docker Compose</strong>：首先，确保您的系统上已经安装了 Docker 和 Docker Compose。您可以从 Docker 官方网站上获得安装指南。</li>\n<li><strong>创建 docker-compose.yml 文件</strong>：在您的项目根目录中创建一个名为 <code>docker-compose.yml</code> 的文件。</li>\n<li><strong>编写配置</strong>：在 <code>docker-compose.yml</code> 文件中，您可以定义您的各个服务。以下是一个简单的示例：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yamlCopy codeversion: &#x27;3&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  web:</span><br><span class=\"line\">    image: nginx:latest</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;80:80&quot;</span><br><span class=\"line\">  database:</span><br><span class=\"line\">    image: mysql:latest</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: example</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，我们定义了两个服务：<code>web</code> 和 <code>database</code>。<code>web</code> 服务使用最新版本的 Nginx 镜像，并将主机的 80 端口映射到容器的 80 端口。<code>database</code> 服务使用最新版本的 MySQL 镜像，并设置了一个环境变量以配置 MySQL 的 root 密码。</p>\n<ol>\n<li><strong>运行应用程序</strong>：在项目目录中，打开终端并运行以下命令来启动应用程序：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose up</span><br></pre></td></tr></table></figure>\n\n<p>这将会根据配置文件创建并启动定义的服务。</p>\n<ol>\n<li><strong>停止应用程序</strong>：要停止应用程序，只需在终端中按下 <code>Ctrl + C</code>，或者在另一个终端中运行以下命令：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose down</span><br></pre></td></tr></table></figure>\n\n<p>这将停止并移除所有相关的容器、网络和卷。</p>\n<h2 id=\"gitlab安装\"><a href=\"#gitlab安装\" class=\"headerlink\" title=\"gitlab安装\"></a>gitlab安装</h2><p>创建<code>gitlab_docker</code>目录,并在下面创建<code>docker-compose.yml</code>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cd  /usr/local/</span></span><br><span class=\"line\">[root@localhost <span class=\"built_in\">local</span>]<span class=\"comment\"># mkdir docker/</span></span><br><span class=\"line\">[root@localhost <span class=\"built_in\">local</span>]<span class=\"comment\"># cd docker/</span></span><br><span class=\"line\">[root@localhost docker]<span class=\"comment\"># mkdir gitlab_docker/</span></span><br><span class=\"line\">[root@localhost docker]<span class=\"comment\"># cd gitlab_docker/</span></span><br><span class=\"line\">[root@localhost gitlab_docker]<span class=\"comment\"># vim docker-compose.yml </span></span><br></pre></td></tr></table></figure>\n\n<p>当然需要先拉去镜像,我这边用的是中文版的gitlab</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull twang2218/gitlab-ce-zh:latest</span><br></pre></td></tr></table></figure>\n\n\n\n<p>打开<code>docker-compose.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.1&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">gitlab:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&#x27;twang2218/gitlab-ce-zh:latest&#x27;</span></span><br><span class=\"line\">\t<span class=\"attr\">container_name:</span> <span class=\"string\">gitlab</span></span><br><span class=\"line\">\t<span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">\t  <span class=\"attr\">GITLAB_OMNIBUS_CONFIG:</span> <span class=\"string\">|</span></span><br><span class=\"line\">\t    <span class=\"string\">external_url</span> <span class=\"string\">&#x27;http://192.168.205.252:8929&#x27;</span></span><br><span class=\"line\">\t\t<span class=\"string\">gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;]</span> <span class=\"string\">=</span> <span class=\"number\">2224</span></span><br><span class=\"line\">\t<span class=\"attr\">ports:</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">&#x27;8929:8929&#x27;</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">&#x27;2224:2224&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;./config:/etc/gitlab&#x27;</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">&#x27;./logs:/var/log/gitlab&#x27;</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"string\">&#x27;./data:/var/opt/gitlab&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n","categories":["gitlab"],"tags":["gitlab","docker-compose"]},{"title":"asyncio","url":"/post/31833c90.html","content":"<ol>\n<li>回调模式编码的复杂度高,</li>\n<li>同步编码的并发性不高,</li>\n<li>多线程编程需要线程间同步, 通过lock机制,会影响效率,</li>\n</ol>\n<p>所以我们就需要采用同步的方式去编写异步的代码,</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_url</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 我们获取网页信息是耗时操作,我们需要在这里等待</span></span><br><span class=\"line\">    html = get_html(url)<span class=\"comment\"># 所以我们希望在这里能跳出函数,去做一下别的事情,等获取到了数据再回来,</span></span><br><span class=\"line\">    parse_html(html)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_next</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<p>这样我们也就不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。</p>\n<p>所以就有了协程</p>\n<span id=\"more\"></span>\n\n<p>协程，又称微线程,也就是一个可以暂停的函数,等有了结果再切换回去,是我们程序员自己来切换的</p>\n<p>那有什么办法能暂停函数,然后再回来呢?</p>\n<p>我们想到了生成器,所以我们这里再提一下 生成器</p>\n<h2 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h2><h3 id=\"send\"><a href=\"#send\" class=\"headerlink\" title=\"send\"></a><code>send</code></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_url</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 这里有一个耗时的请求,需要用另一个函数来处理,并把处理好的结果返回回来</span></span><br><span class=\"line\">    html = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;耗时操作&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(html)</span><br><span class=\"line\">    <span class=\"comment\"># 这里需要加一个yield,不然会报错StopIteration,所以send也会接收到值</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成生成器</span></span><br><span class=\"line\">gen = get_url()</span><br><span class=\"line\"><span class=\"comment\"># 获取值,模拟另一个函数处理,必须先用一次next来启动生成器</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">next</span>(gen))</span><br><span class=\"line\"><span class=\"comment\"># 发送值,处理完后把结果发送回去</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(gen.send(<span class=\"string\">&#x27;返回结果&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;耗时操作</span><br><span class=\"line\">&gt;&gt;返回结果</span><br><span class=\"line\">&gt;&gt;<span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"yield-from-允许发送生成器\"><a href=\"#yield-from-允许发送生成器\" class=\"headerlink\" title=\"yield from:允许发送生成器\"></a><code>yield from</code>:允许发送生成器</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gen1</span>():</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gen2</span>():</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"comment\"># 可以返回或者说发送一个 生成器</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> gen1()</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">g2 = gen2()</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> g2:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例:\"></a>案例:</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 我们这样一个数据,我们希望获取一个总数,然后跟一个原来的列表</span></span><br><span class=\"line\">items = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;小明&#x27;</span>:[<span class=\"number\">94</span>,<span class=\"number\">68</span>,<span class=\"number\">46</span>,<span class=\"number\">66</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;小红&#x27;</span>:[<span class=\"number\">99</span>,<span class=\"number\">33</span>,<span class=\"number\">43</span>,<span class=\"number\">66</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;小白&#x27;</span>:[<span class=\"number\">98</span>,<span class=\"number\">45</span>,<span class=\"number\">46</span>,<span class=\"number\">66</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;小黑&#x27;</span>:[<span class=\"number\">101</span>,<span class=\"number\">64</span>,<span class=\"number\">46</span>,<span class=\"number\">66</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;小路&#x27;</span>:[<span class=\"number\">93</span>,<span class=\"number\">65</span>,<span class=\"number\">46</span>,<span class=\"number\">66</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;小兰&#x27;</span>:[<span class=\"number\">91</span>,<span class=\"number\">66</span>,<span class=\"number\">46</span>,<span class=\"number\">66</span>],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">result = &#123;</span></span><br><span class=\"line\"><span class=\"string\">            总数</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;小明&#x27;: (274, [94, 68, 46, 66]),</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;小红&#x27;: (241, [99, 33, 43, 66]),</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;小白&#x27;: (255, [98, 45, 46, 66]),</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;小黑&#x27;: (277, [101, 64, 46, 66]),</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;小路&#x27;: (270, [93, 65, 46, 66]),</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;小兰&#x27;: (269, [91, 66, 46, 66])</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">result = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">computer</span>(<span class=\"params\">key</span>):</span><br><span class=\"line\">    total = <span class=\"number\">0</span></span><br><span class=\"line\">    temp = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 获得main函数发送过来的数据</span></span><br><span class=\"line\">        a = <span class=\"keyword\">yield</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(key,<span class=\"string\">&#x27;传了一个值过来&#x27;</span>,a)</span><br><span class=\"line\">        <span class=\"comment\"># 如果发送过来的是None则退出循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> a:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        total+=a</span><br><span class=\"line\">        temp.append(a)</span><br><span class=\"line\">    <span class=\"comment\"># 返回一个元组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> total,temp</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">middle</span>(<span class=\"params\">key</span>):</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        result[key] = <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> computer(key)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> items.items():</span><br><span class=\"line\">        m=middle(k)</span><br><span class=\"line\">        <span class=\"comment\"># 激活生成器</span></span><br><span class=\"line\">        m.send(<span class=\"literal\">None</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> v:</span><br><span class=\"line\">            m.send(i)</span><br><span class=\"line\">        <span class=\"comment\">#关闭computer生成器</span></span><br><span class=\"line\">        m.send(<span class=\"literal\">None</span>)</span><br><span class=\"line\">main()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"asyncio异步模块\"><a href=\"#asyncio异步模块\" class=\"headerlink\" title=\"asyncio异步模块\"></a><code>asyncio</code>异步模块</h2><p><code>asyncio</code>是python 用于解决异步IO变成的一整套方案</p>\n<p>实现了:</p>\n<ul>\n<li>包括各种特定系统实现的模块化的事件循环</li>\n<li>传输和协议抽象</li>\n<li>对<code>TCP,UDP,SSL</code>,子进程,延时调用,以及其他的具体支持</li>\n<li>模块futures模块,但适用于事件循环使用的Future类</li>\n<li>基于<code>yield from</code> 的协议和任务.可以让你用顺序的方式编写并发代码</li>\n<li>必须使用一个将产生阻塞IO的调用时,有接口可以把这个事件转移到线程池</li>\n<li>模仿<code>threading</code>模块中的同步原语,可以用在单线程内的协程之间</li>\n</ul>\n<p>三个要素:事件循环,回调函数(驱动生成器),以及IO多路复用</p>\n<h3 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 asyncio中 我们用async 表示这个函数是一个异步函数</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_html</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;start get html&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 我们用asyncio.sleep(2) 来模拟一个耗时操作,这里我们不用time.sleep</span></span><br><span class=\"line\">    <span class=\"comment\"># 要记住在异步函数内不能使用同步</span></span><br><span class=\"line\">    <span class=\"comment\"># 需要加上await 来表示这是一个 耗时操作</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;end get html&#x27;</span>)</span><br><span class=\"line\">start_time = time.time()</span><br><span class=\"line\"><span class=\"comment\"># 我们创建事件循环</span></span><br><span class=\"line\">loop = asyncio.get_event_loop()</span><br><span class=\"line\"><span class=\"comment\"># 运行我们的异步程序</span></span><br><span class=\"line\">loop.run_until_complete(get_html(<span class=\"string\">&#x27;url&#x27;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(time.time()-start_time)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;start get html</span><br><span class=\"line\">&gt;&gt;end get html</span><br><span class=\"line\">&gt;&gt;<span class=\"number\">2.001361608505249</span></span><br></pre></td></tr></table></figure>\n\n<p>这样看我们并不能感受到异步带来的好处,我们接下来创建100个任务来模拟</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 asyncio中 我们用async 表示这个函数是一个异步函数</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_html</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;start get html&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 我们用asyncio.sleep(2) 来模拟一个耗时操作,这里我们不用time.sleep</span></span><br><span class=\"line\">    <span class=\"comment\"># 要记住在异步函数内不能使用同步</span></span><br><span class=\"line\">    <span class=\"comment\"># 需要加上await 来表示这是一个 耗时操作</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;end get html&#x27;</span>)</span><br><span class=\"line\">start_time = time.time()</span><br><span class=\"line\"><span class=\"comment\"># 我们创建事件循环</span></span><br><span class=\"line\">loop = asyncio.get_event_loop()</span><br><span class=\"line\"><span class=\"comment\"># 创建一个100个task任务</span></span><br><span class=\"line\">tasks = [get_html(<span class=\"string\">&#x27;url&#x27;</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>)]</span><br><span class=\"line\"><span class=\"comment\"># 运行我们的异步程序</span></span><br><span class=\"line\"><span class=\"comment\"># 这时需要使用asyncio.gather,也可以用wait 推荐实用gather</span></span><br><span class=\"line\"><span class=\"comment\"># loop.run_until_complete(asyncio.wait(tasks))</span></span><br><span class=\"line\">loop.run_until_complete(asyncio.gather(*tasks))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(time.time()-start_time)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;<span class=\"number\">2.0133612155914307</span></span><br><span class=\"line\">大家可以去运行一下 时间还是2s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"取消task\"><a href=\"#取消task\" class=\"headerlink\" title=\"取消task\"></a>取消task</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">cancel_test</span>(<span class=\"params\">sleep_time</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;start&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(sleep_time)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(sleep_time)</span><br><span class=\"line\">tasks = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">    tasks.append(cancel_test(i+<span class=\"number\">1</span>))</span><br><span class=\"line\">loop = asyncio.get_event_loop()</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    loop.run_until_complete(asyncio.gather(*tasks))</span><br><span class=\"line\"><span class=\"keyword\">except</span> KeyboardInterrupt <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"comment\"># 返回事件循环所运行的未完成的 Task 对象的集合。</span></span><br><span class=\"line\">    <span class=\"comment\"># asyncio.all_tasks() 实测 3.7.3 不会创建loop 需要传当前loop</span></span><br><span class=\"line\">    <span class=\"comment\"># 如果 loop 为 None，则会使用 get_running_loop() 获取当前事件循环。</span></span><br><span class=\"line\">    <span class=\"comment\"># 可以用asyncio.Task.all_tasks():</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> task <span class=\"keyword\">in</span> asyncio.all_tasks(loop):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(task.cancel())</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    loop.close()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"子协程调度\"><a href=\"#子协程调度\" class=\"headerlink\" title=\"子协程调度\"></a>子协程调度</h3><h4 id=\"案例-1\"><a href=\"#案例-1\" class=\"headerlink\" title=\"案例:\"></a>案例:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"># 计算协程</span><br><span class=\"line\">async def compute(x, y):</span><br><span class=\"line\">    print(&quot;Compute %s + %s ...&quot; % (x, y))</span><br><span class=\"line\">    await asyncio.sleep(1.0)</span><br><span class=\"line\">    return x + y</span><br><span class=\"line\"></span><br><span class=\"line\"># 执行print_sum函数</span><br><span class=\"line\">async def print_sum(x, y):</span><br><span class=\"line\">    # 交给子协程</span><br><span class=\"line\">    result = await compute(x, y)</span><br><span class=\"line\">    print(&quot;%s + %s = %s&quot; % (x, y, result))</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建事件循环</span><br><span class=\"line\">loop = asyncio.get_event_loop()</span><br><span class=\"line\"># 创建task事件</span><br><span class=\"line\">task = loop.create_task(print_sum(1,2))</span><br><span class=\"line\"># 放入事件循环</span><br><span class=\"line\">loop.run_until_complete(task)</span><br><span class=\"line\">loop.close()</span><br></pre></td></tr></table></figure>\n\n<p>该图在3.6的官方文档中</p>\n<p><img data-src=\"/../images/asyncio/tulip_coro-1593686114663.png\" alt=\"tulip_coro\"></p>\n<h4 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析:\"></a>解析:</h4><p><img data-src=\"/../images/asyncio/image-20200702193436174.png\" alt=\"image-20200702193436174\"></p>\n<h2 id=\"线程池结合asyncio\"><a href=\"#线程池结合asyncio\" class=\"headerlink\" title=\"线程池结合asyncio\"></a>线程池结合asyncio</h2><p>线程池为什么要跟asyncio 结合呢?</p>\n<p>由于协程中不能处理阻塞IO 如mysql库是阻塞的,如果我们需要在协程中强行使用,怎么办?asyncio也可以使用多线程下面我们来模拟一下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures.thread <span class=\"keyword\">import</span> ThreadPoolExecutor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 模拟阻塞的函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_url</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;*&#x27;</span>*<span class=\"number\">10</span>,url)</span><br><span class=\"line\">    <span class=\"comment\"># 模拟阻塞操作</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">start_time = time.time()</span><br><span class=\"line\">loop = asyncio.get_event_loop()</span><br><span class=\"line\"><span class=\"comment\"># 生成一个线程池</span></span><br><span class=\"line\">executor = ThreadPoolExecutor(<span class=\"number\">3</span>)</span><br><span class=\"line\">tasks = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 生成任务,用线程池run_in_executor(线程池,函数,参数)</span></span><br><span class=\"line\">    task = loop.run_in_executor(executor,get_url,url)</span><br><span class=\"line\">    <span class=\"comment\"># 添加任务</span></span><br><span class=\"line\">    tasks.append(task)</span><br><span class=\"line\"><span class=\"comment\"># 调用任务</span></span><br><span class=\"line\">loop.run_until_complete(asyncio.gather(*tasks))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;===&#x27;</span>*<span class=\"number\">10</span>,time.time()-start_time)</span><br></pre></td></tr></table></figure>\n\n<p>其实就是将阻塞的函数放到线程池中</p>\n<p>建议大家不要在协程中调用阻塞方式,如果非要运行的话,建议使用线程池</p>\n<h2 id=\"future-和-task\"><a href=\"#future-和-task\" class=\"headerlink\" title=\"future 和 task\"></a>future 和 task</h2><p><code>future</code>是一个结果容器,用来存放结果</p>\n<p><code>task</code>是future的子类,主要用作协程与future的桥梁</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, coro, *, loop=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"built_in\">super</span>().__init__(loop=loop)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> self._source_traceback:</span><br><span class=\"line\">        <span class=\"keyword\">del</span> self._source_traceback[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> coroutines.iscoroutine(coro):</span><br><span class=\"line\">        <span class=\"comment\"># raise after Future.__init__(), attrs are required for __del__</span></span><br><span class=\"line\">        <span class=\"comment\"># prevent logging for pending task in __del__</span></span><br><span class=\"line\">        self._log_destroy_pending = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">f&quot;a coroutine was expected, got <span class=\"subst\">&#123;coro!r&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    self._must_cancel = <span class=\"literal\">False</span></span><br><span class=\"line\">    self._fut_waiter = <span class=\"literal\">None</span></span><br><span class=\"line\">    self._coro = coro</span><br><span class=\"line\">    self._context = contextvars.copy_context()</span><br><span class=\"line\">\t<span class=\"comment\"># 初始化的时候调用自己的_step方法</span></span><br><span class=\"line\">    self._loop.call_soon(self.__step, context=self._context)</span><br><span class=\"line\">    _register_task(self)</span><br></pre></td></tr></table></figure>\n\n<p><code>__step</code>方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">__step</span>(<span class=\"params\">self, exc=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.done():</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> futures.InvalidStateError(</span><br><span class=\"line\">            <span class=\"string\">f&#x27;_step(): already done: <span class=\"subst\">&#123;self!r&#125;</span>, <span class=\"subst\">&#123;exc!r&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> self._must_cancel:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(exc, futures.CancelledError):</span><br><span class=\"line\">            exc = futures.CancelledError()</span><br><span class=\"line\">        self._must_cancel = <span class=\"literal\">False</span></span><br><span class=\"line\">    coro = self._coro</span><br><span class=\"line\">    self._fut_waiter = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    _enter_task(self._loop, self)</span><br><span class=\"line\">    <span class=\"comment\"># Call either coro.throw(exc) or coro.send(None).</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 第一次请求</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> exc <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"comment\"># We use the `send` method directly, because coroutines</span></span><br><span class=\"line\">            <span class=\"comment\"># don&#x27;t have `__iter__` and `__next__` methods.</span></span><br><span class=\"line\">            <span class=\"comment\"># 激活协程</span></span><br><span class=\"line\">            result = coro.send(<span class=\"literal\">None</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result = coro.throw(exc)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration <span class=\"keyword\">as</span> exc:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._must_cancel:</span><br><span class=\"line\">            <span class=\"comment\"># Task is cancelled right before coro stops.</span></span><br><span class=\"line\">            self._must_cancel = <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"built_in\">super</span>().set_exception(futures.CancelledError())</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 处理报错 并获取值</span></span><br><span class=\"line\">            <span class=\"built_in\">super</span>().set_result(exc.value)</span><br><span class=\"line\">   <span class=\"comment\"># 下面还有很多逻辑,做了很多处理</span></span><br></pre></td></tr></table></figure>\n\n<p>协程还是需要很多底层知识的,还是乖乖去看一下 底层原理</p>\n","categories":["协程"],"tags":["asyncio","协程","异步"]},{"title":"centos 更新yum源","url":"/post/d69fe3be.html","content":"<p>centos的yum源是国外的,有时候我们访问的速度会很慢,所以我们要把yum的源 设置成国内的镜像</p>\n<span id=\"more\"></span>\n\n<p>备份原来的yum源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br></pre></td></tr></table></figure>\n\n<p>下载ali源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /etc/yum.repos.d/</span><br><span class=\"line\">wget -nc http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>\n\n<p>更改ali源为默认源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mv Centos-7.repo  CentOS-Base.repo</span><br></pre></td></tr></table></figure>\n\n<p>更新本地缓存</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">清空所有</span></span><br><span class=\"line\">yum clean all</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新列表</span></span><br><span class=\"line\">yum list</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">缓存到本机</span></span><br><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure>\n\n","categories":["linux"],"tags":["centos","yum源"]},{"title":"docker基础","url":"/post/5ae6092.html","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的<a href=\"https://baike.baidu.com/item/Linux\">Linux</a>机器或Windows 机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口。</p>\n<p>Docker是基于Go语言实现的云开源项目</p>\n<p>Docker 的核心理念是 <code>Build, Ship, and Run Any App, Anywher</code>，即一次封装，到处运行。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"三大要素\"><a href=\"#三大要素\" class=\"headerlink\" title=\"三大要素\"></a>三大要素</h2><p>镜像(image)</p>\n<ul>\n<li>docker镜像（image）就是一个 只读 的模板。 镜像可以用来创建docker容器，一个镜像可以创建很多容器 。</li>\n</ul>\n<p>Docker 镜像可以看作是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>\n<p><img data-src=\"/../images/docker%E5%9F%BA%E7%A1%80/v2-820aee2a33654099d87cdd2b7a1ce741_720w.jpg\" alt=\"img\"></p>\n<p><img data-src=\"/../images/docker%E5%9F%BA%E7%A1%80/v2-d5c06c456761b5a27090e3328b1f6882_720w.jpg\" alt=\"img\"></p>\n<p>总的来说，你最需要记住这点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">在 Dockerfile 中， 每一条指令都会创建一个镜像层，继而会增加整体镜像的大小。</span><br></pre></td></tr></table></figure>\n\n<p>镜像作为 Docker 最突出的创新之一，它变革了软件交付标准。理解镜像，对理解整个 Docker 的生命周期非常重要。</p>\n<p>容器(container)</p>\n<ul>\n<li>docker利用容器（container）独立运行的一个或者一组应用。容器是利用镜像创建的运行实例（相对于Python中的类和对象的概念）。</li>\n<li>它可以被启动、开始、停止、删除。每个容器都是互相隔离的，保证安全的平台。</li>\n<li>可以把容器看做是一个简易版的Linux环境 (包括root用户名权限、进程空间、用户空间和网络空间等)和运行在其中的应用程序。</li>\n<li>容器的定义和镜像几乎是一模一样的，也是一堆层的统一视角， 唯一区别的是容器的最上面那一次是可读写的。</li>\n</ul>\n<p>相当于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">p1 =<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\">p2 =<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\">p3 =<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()   </span><br><span class=\"line\">p1,p2,p3相当于容器,Person相当于镜像</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/docker%E5%9F%BA%E7%A1%80/image-20200602185842222.png\" alt=\"image-20200602185842222\"></p>\n<p>仓库(repository)</p>\n<ul>\n<li>仓库（repository）是集中存放镜像文件的场所 。</li>\n<li>仓库(repository)和仓库注册服务器（registry）是有区别的。仓库注册服务器上往往放着很多个仓库，每个仓库中又包含了很多个镜像，每个镜像有不同的标签（tag）。</li>\n<li>仓库分为公开仓库（public）和私有仓库（private）两种形式。</li>\n<li>最大的公开仓库是docker hub(<a href=\"https://hub.docker.com/),%E5%AD%98%E6%94%BE%E4%BA%86%E6%95%B0%E9%87%8F%E5%BA%9E%E5%A4%A7%E7%9A%84%E9%95%9C%E5%83%8F%E4%BE%9B%E7%94%A8%E6%88%B7%E4%B8%8B%E8%BD%BD.%E5%9B%BD%E5%86%85%E7%9A%84%E5%85%AC%E5%BC%80%E4%BB%93%E5%BA%93%E5%8C%85%E6%8B%AC%E9%98%BF%E9%87%8C%E4%BA%91,%E7%BD%91%E6%98%93%E4%BA%91%E7%AD%89\">https://hub.docker.com/),存放了数量庞大的镜像供用户下载.国内的公开仓库包括阿里云,网易云等</a></li>\n</ul>\n<p>镜像 容器 仓库 他们三者之间的关系图如下:</p>\n<p><img data-src=\"/../images/docker%E5%9F%BA%E7%A1%80/1.png\" alt=\"img\"></p>\n<p>docker本身是一个容器运行载体或者称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就叫image镜像文件。 只有通过这个镜像文件才能生成docker容器。image文件可以看做是容器的模板。 docker根据image文件生成容器的实例。 同一个image文件，可以生成多个同时运行的容器实例。</p>\n<ul>\n<li>image文件生成的容器实例，本身也是一个文件，称为镜像文件；</li>\n<li>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器；</li>\n<li>至于仓库，就是放了一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候从仓库中拉下来就可以了。</li>\n</ul>\n<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><p>要安装Docker Engine，您需要一个CentOS 7的维护版本。不支持或未测试存档版本。</p>\n<h3 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h3><p>您可以根据需要以不同的方式安装Docker Engine：</p>\n<ul>\n<li>大多数用户会 <a href=\"https://docs.docker.com/engine/install/centos/#install-using-the-repository\">设置Docker的存储库</a>并从中进行安装，以简化安装和升级任务。这是推荐的方法。</li>\n<li>一些用户下载并<a href=\"https://docs.docker.com/engine/install/centos/#install-from-a-package\">手动安装</a> RPM软件包， 并完全手动管理升级。这在诸如在无法访问互联网的空白系统上安装Docker的情况下非常有用。</li>\n<li>在测试和开发环境中，一些用户选择使用自动 <a href=\"https://docs.docker.com/engine/install/centos/#install-using-the-convenience-script\">便利脚本</a>来安装Docker。</li>\n</ul>\n<p>我们按推荐的安装</p>\n<h3 id=\"使用存储库安装\"><a href=\"#使用存储库安装\" class=\"headerlink\" title=\"使用存储库安装\"></a>使用存储库安装</h3><p>在新主机上首次安装Docker Engine之前，需要设置Docker存储库。之后，您可以从存储库安装和更新Docker。</p>\n<h4 id=\"设置存储库\"><a href=\"#设置存储库\" class=\"headerlink\" title=\"设置存储库\"></a>设置存储库</h4><p>安装<code>yum-utils</code>软件包（提供<code>yum-config-manager</code> 实用程序）并设置<strong>稳定的</strong>存储库。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo yum install -y yum-utils</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo yum-config-manager \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    --add-repo \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    https://download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装DOCKER引擎\"><a href=\"#安装DOCKER引擎\" class=\"headerlink\" title=\"安装DOCKER引擎\"></a>安装DOCKER引擎</h4><ol>\n<li>安装<em>最新版本</em>的Docker Engine和容器，或者转到下一步安装稳定版本：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure>\n\n<p>如果提示您接受GPG密钥，请验证指纹是否匹配 <code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code>，如果是，则接受它。</p>\n<blockquote>\n<p>有多个Docker存储库吗？</p>\n<p>如果启用了多个Docker存储库，则在未在<code>yum install</code>or <code>yum update</code>命令中指定版本的情况下进行安装或更新将始终安装可能的最高版本，这可能不适合您的稳定性需求。</p>\n</blockquote>\n<p>Docker已安装但尚未启动。<code>docker</code>创建该组，但没有用户添加到该组。</p>\n<ol start=\"2\">\n<li>要安装<em>特定版本</em>的Docker Engine，请在存储库中列出可用版本，然后选择并安装：</li>\n</ol>\n<p>a. 列出并排序您存储库中可用的版本。此示例按版本号（从高到低）对结果进行排序，并被截断：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">yum list docker-ce --showduplicates | <span class=\"built_in\">sort</span> -r</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure>\n\n<p>返回的列表取决于启用了哪些存储库，并且特定于您的CentOS版本（<code>.el7</code>在此示例中以后缀表示）。</p>\n<p>b.通过其完全合格的软件包名称安装特定版本，该软件包名称是软件包名称（<code>docker-ce</code>）加上版本字符串（第二列），从第一个冒号（<code>:</code>）一直到第一个连字符，并用连字符（<code>-</code>）分隔。例如，<code>docker-ce-18.09.1</code>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span></span><br></pre></td></tr></table></figure>\n\n<p>Docker已安装但尚未启动。<code>docker</code>创建该组，但没有用户添加到该组。</p>\n<ol>\n<li>启动Docker。</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo systemctl start docker</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>通过运行<code>hello-world</code> 映像来验证是否正确安装了Docker Engine 。</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>\n\n<p>此命令下载测试图像并在容器中运行。容器运行时，它会打印参考消息并退出。</p>\n<p>Docker Engine已安装并正在运行。您需要使用<code>sudo</code>来运行Docker命令。继续进行<a href=\"https://docs.docker.com/engine/install/linux-postinstall/\">Linux后安装，</a>以允许非特权用户运行Docker命令以及其他可选配置步骤。</p>\n<p>其他安装方法可以查看docker的官方文档 :<a href=\"https://docs.docker.com/engine/install/centos/#prerequisites\">https://docs.docker.com/engine/install/centos/#prerequisites</a></p>\n<h4 id=\"升级DOCKER引擎\"><a href=\"#升级DOCKER引擎\" class=\"headerlink\" title=\"升级DOCKER引擎\"></a>升级DOCKER引擎</h4><p>要升级Docker Engine，请按照<a href=\"https://docs.docker.com/engine/install/centos/#install-using-the-repository\">安装说明</a>，选择要安装的新版本。</p>\n<h2 id=\"配置阿里云加速\"><a href=\"#配置阿里云加速\" class=\"headerlink\" title=\"配置阿里云加速\"></a>配置阿里云加速</h2><p>因为docker默认访问的镜像是在国外的,会导致访问过慢的问题,所以需要配置成国内的,当然有些主机本来就是在国外的你也可以不配置,</p>\n<h3 id=\"注册阿里云账号\"><a href=\"#注册阿里云账号\" class=\"headerlink\" title=\"注册阿里云账号\"></a>注册阿里云账号</h3><p>注册地址:<a href=\"https://account.aliyun.com/\">https://account.aliyun.com/</a></p>\n<p>可以用淘宝的账号密码</p>\n<p>进入后点击控制台 搜索容器镜像服务</p>\n<p><img data-src=\"/../images/docker%E5%9F%BA%E7%A1%80/1-1591095562907.png\" alt=\"1\"></p>\n<p>找到镜像加速器</p>\n<p><img data-src=\"/../images/docker%E5%9F%BA%E7%A1%80/2.png\" alt=\"2\"></p>\n<p>按提示在你的linux机器上配置即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>\n\n<p>把这个写入保存</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;你的加速器地址&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">:wq 保存</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启配置文件</span></span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重启docker</span></span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p><font color=\"red\"> 这里的所有操作都是针对centos7以及以上的 </font></p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"镜像命令\"><a href=\"#镜像命令\" class=\"headerlink\" title=\"镜像命令\"></a>镜像命令</h3><h4 id=\"docker-images\"><a href=\"#docker-images\" class=\"headerlink\" title=\"docker images\"></a>docker images</h4><p><code>docker images</code> :列出本机的所有镜像</p>\n<p><img data-src=\"/../images/docker%E5%9F%BA%E7%A1%80/3.png\" alt=\"3\"></p>\n<p>各个选项说明:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">REPOSITORY :表示镜像的仓库源</span><br><span class=\"line\">TAG:镜像的标签,也就是版本</span><br><span class=\"line\">IMAGE ID: 表示镜像的ID</span><br><span class=\"line\">CREATED: 镜像的创建时间</span><br><span class=\"line\">SIZE: 镜像的大小</span><br></pre></td></tr></table></figure>\n\n<p>同一个仓库源可以有多个TAG,代表这个仓库源的不同个版本,我们使用REPOSITORY:TAG来定义不同镜像.如果不指定就表示:latest</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Usage:\tdocker images [OPTIONS] [REPOSITORY[:TAG]]</span><br><span class=\"line\"></span><br><span class=\"line\">List images</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -a, --all             Show all images (default hides intermediate images)# 显示本地说有镜像,包含中间映像层</span><br><span class=\"line\">      --digests         Show digests #显示摘要信息</span><br><span class=\"line\">  -f, --filter filter   Filter output based on conditions provided # 显示满足条件的镜像</span><br><span class=\"line\">      --format string   Pretty-print images using a Go template # 指定返回值的模板文件</span><br><span class=\"line\">      --no-trunc        `Don&#x27;t truncate output` # 显示完成镜像信息</span><br><span class=\"line\">  -q, --quiet           Only show numeric IDs #  只显示镜像ID</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"docker-search\"><a href=\"#docker-search\" class=\"headerlink\" title=\"docker search\"></a>docker search</h4><p><code>docker search [OPTIONS] 镜像名称</code>:查询 <a href=\"https://hub.docker.com/\">https://hub.docker.com</a> 上的所有镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">OPTIONS说明：</span><br><span class=\"line\">--automated :只列出 automated build类型的镜像；</span><br><span class=\"line\">--no-trunc :显示完整的镜像描述；</span><br><span class=\"line\">-s :列出收藏数不小于指定值的镜像。</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/docker%E5%9F%BA%E7%A1%80/4.png\" alt=\"4\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">参数说明：</span><br><span class=\"line\">NAME: 镜像仓库源的名称</span><br><span class=\"line\">DESCRIPTION: 镜像的描述</span><br><span class=\"line\">OFFICIAL: 是否 docker 官方发布</span><br><span class=\"line\">stars: 类似 Github 里面的 star，表示点赞、喜欢的意思。</span><br><span class=\"line\">AUTOMATED: 自动构建。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"docker-rmi\"><a href=\"#docker-rmi\" class=\"headerlink\" title=\"docker rmi\"></a><code>docker rmi</code></h4><p><code>docker rmi [OPTIONS] IMAGE [IMAGE...]</code>: 删除本地一个或多少镜像。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">OPTIONS说明：</span><br><span class=\"line\">-f :强制删除；</span><br><span class=\"line\">--no-prune :不移除该镜像的过程镜像，默认移除；</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"docker-pull\"><a href=\"#docker-pull\" class=\"headerlink\" title=\"docker pull\"></a><code>docker pull</code></h4><p><code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code>: 从镜像仓库中拉取或者更新指定镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">OPTIONS说明：</span><br><span class=\"line\">-a :拉取所有 tagged 镜像</span><br><span class=\"line\">--disable-content-trust :忽略镜像的校验,默认开启</span><br><span class=\"line\">docker build</span><br></pre></td></tr></table></figure>\n\n<p><code>docker build [OPTIONS] PATH | URL | -</code> :使用 Dockerfile 创建镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">OPTIONS说明：</span><br><span class=\"line\">--build-arg=[] :设置镜像创建时的变量；</span><br><span class=\"line\">--cpu-shares :设置 cpu 使用权重；</span><br><span class=\"line\">--cpu-period :限制 CPU CFS周期；</span><br><span class=\"line\">--cpu-quota :限制 CPU CFS配额；</span><br><span class=\"line\">--cpuset-cpus :指定使用的CPU id；</span><br><span class=\"line\">--cpuset-mems :指定使用的内存 id；</span><br><span class=\"line\">--disable-content-trust :忽略校验，默认开启；</span><br><span class=\"line\">-f :指定要使用的Dockerfile路径；</span><br><span class=\"line\">--force-rm :设置镜像过程中删除中间容器；</span><br><span class=\"line\">--isolation :使用容器隔离技术；</span><br><span class=\"line\">--label=[] :设置镜像使用的元数据；</span><br><span class=\"line\">-m :设置内存最大值；</span><br><span class=\"line\">--memory-swap :设置Swap的最大值为内存+swap，&quot;-1&quot;表示不限swap；</span><br><span class=\"line\">--no-cache :创建镜像的过程不使用缓存；</span><br><span class=\"line\">--pull :尝试去更新镜像的新版本；</span><br><span class=\"line\">--quiet, -q :安静模式，成功后只输出镜像 ID；</span><br><span class=\"line\">--rm :设置镜像成功后删除中间容器；</span><br><span class=\"line\">--shm-size :设置/dev/shm的大小，默认值是64M；</span><br><span class=\"line\">--ulimit :Ulimit配置。</span><br><span class=\"line\">--tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</span><br><span class=\"line\">--network: 默认 default。在构建期间设置RUN指令的网络模式</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"容器命令\"><a href=\"#容器命令\" class=\"headerlink\" title=\"容器命令\"></a>容器命令</h3><h4 id=\"docker-run\"><a href=\"#docker-run\" class=\"headerlink\" title=\"docker run\"></a><code>docker run</code></h4><p><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code>:创建一个新的容器并运行一个命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">OPTIONS说明：</span><br><span class=\"line\">-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</span><br><span class=\"line\">-d: 后台运行容器，并返回容器ID；</span><br><span class=\"line\">-i: 以交互模式运行容器，通常与 -t 同时使用；  </span><br><span class=\"line\">-P: 随机端口映射，容器内部端口随机映射到主机的高端口</span><br><span class=\"line\">-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class=\"line\">-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class=\"line\">--name=&quot;nginx-lb&quot;: 为容器指定一个名称；</span><br><span class=\"line\">--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</span><br><span class=\"line\">--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</span><br><span class=\"line\">-h &quot;mars&quot;: 指定容器的hostname；</span><br><span class=\"line\">-e username=&quot;ritchie&quot;: 设置环境变量；</span><br><span class=\"line\">--env-file=[]: 从指定文件读入环境变量；</span><br><span class=\"line\">--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；</span><br><span class=\"line\">-m :设置容器使用内存最大值；</span><br><span class=\"line\">--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</span><br><span class=\"line\">--link=[]: 添加链接到另一个容器；</span><br><span class=\"line\">--expose=[]: 开放一个端口或一组端口；</span><br><span class=\"line\">--volume , -v: 绑定一个卷</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>我先从仓库pull一个centos的镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@10-7-189-100 ~]# docker pull centos</span><br></pre></td></tr></table></figure>\n\n<p>用之前学的<code>docker images</code>查看一下 本地的镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@10-7-189-100 ~]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">centos              latest              470671670cac        4 months ago        237MB</span><br><span class=\"line\">hello-world         latest              bf756fb1ae65        5 months ago        13.3kB</span><br></pre></td></tr></table></figure>\n\n<p>我们使用run命令创建一个容器.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@10-7-189-100 ~]# docker run -it --name myCentos centos</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这样我们就以命令行的模式进入了容器</span></span><br><span class=\"line\">[root@de8864d110f0 /]# </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">我们用<span class=\"built_in\">ls</span>命令查看是否进入了容器</span></span><br><span class=\"line\">[root@de8864d110f0 /]# ls</span><br><span class=\"line\">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-i -t 一般都是连起来用的 --name 相当于给容器起个别名 centos 是容器的本地镜像名,也可以用IMAGE ID</span></span><br></pre></td></tr></table></figure>\n\n<p>当然你也会问,你怎么证明是在centos 里面的容器呢?我们用下面的命令来列出容器</p>\n<h4 id=\"docker-ps\"><a href=\"#docker-ps\" class=\"headerlink\" title=\"docker ps\"></a><code>docker ps</code></h4><p><code>docker ps [OPTIONS]</code>: 列出容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">OPTIONS说明：</span><br><span class=\"line\">-a :显示所有的容器，包括未运行的。</span><br><span class=\"line\">-f :根据条件过滤显示的内容。</span><br><span class=\"line\">--format :指定返回值的模板文件。</span><br><span class=\"line\">-l :显示最近创建的容器。</span><br><span class=\"line\">-n :列出最近创建的n个容器。</span><br><span class=\"line\">--no-trunc :不截断输出。</span><br><span class=\"line\">-q :静默模式，只显示容器编号。</span><br><span class=\"line\">-s :显示总的文件大小。</span><br></pre></td></tr></table></figure>\n\n<p>我们新开一个终端:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@10-7-189-100 ~]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">de8864d110f0        centos              &quot;/bin/bash&quot;         9 minutes ago       Up 9 minutes                            myCentos</span><br></pre></td></tr></table></figure>\n\n<p>CONTAINER ID 跟我们上面的root@de8864d110f0 是一样的.NAMES 也是我们自己命名的</p>\n<h4 id=\"docker-commit\"><a href=\"#docker-commit\" class=\"headerlink\" title=\"docker commit\"></a><code>docker commit</code></h4><p><code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code>:从容器创建一个新的镜像。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">OPTIONS说明：</span><br><span class=\"line\">-a :提交的镜像作者；</span><br><span class=\"line\">-c :使用Dockerfile指令来创建镜像；</span><br><span class=\"line\">-m :提交时的说明文字；</span><br><span class=\"line\">-p :在commit时，将容器暂停。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"退出容器\"><a href=\"#退出容器\" class=\"headerlink\" title=\"退出容器\"></a>退出容器</h4><p><code>exit</code>: 退出容器,并停止</p>\n<p><code>ctrl+P+Q</code>: 退出容器,不停止</p>\n<h4 id=\"Docker-start-x2F-stop-x2F-restart-命令\"><a href=\"#Docker-start-x2F-stop-x2F-restart-命令\" class=\"headerlink\" title=\"Docker start&#x2F;stop&#x2F;restart 命令\"></a>Docker start&#x2F;stop&#x2F;restart 命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker start 容器ID 或容器名 :启动一个或多个已经被停止的容器</span><br><span class=\"line\">docker stop 容器ID 或容器名 :停止一个运行中的容器</span><br><span class=\"line\">docker kill 容器ID 或容器名 :强制关闭容器</span><br><span class=\"line\">docker restart :重启容器</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除已停止的容器\"><a href=\"#删除已停止的容器\" class=\"headerlink\" title=\"删除已停止的容器\"></a>删除已停止的容器</h4><p><code>docker rm [OPTIONS] CONTAINER [CONTAINER...]</code> :删除一个或多个容器。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">OPTIONS说明：</span><br><span class=\"line\">-f :通过 SIGKILL 信号强制删除一个运行中的容器。</span><br><span class=\"line\">-l :移除容器间的网络连接，而非容器本身。</span><br><span class=\"line\">-v :删除与容器关联的卷。</span><br></pre></td></tr></table></figure>\n\n<p><font color=\"red\">     以下为重点</font></p>\n<h4 id=\"启动守护式容器\"><a href=\"#启动守护式容器\" class=\"headerlink\" title=\"启动守护式容器\"></a>启动守护式容器</h4><p><code>docker run -d 容器名</code> 我们用后台模式来运行一个centos 容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@10-7-189-100 ~]# docker run -d centos</span><br><span class=\"line\">b4bc6e623bc47914981e404445af7fbef7ac38a777cabfe10d30c0e20ea6a665</span><br></pre></td></tr></table></figure>\n\n<p>我们看到已经运行起来了,我们用<code>docker ps</code> 来查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@10-7-189-100 ~]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br></pre></td></tr></table></figure>\n\n<p>原来:<font color=\"red\">Docker 容器后台运行必须有一个前端进程.</font>.容器运行的命令如果不是那些一直挂起的命令(比如运行top,tail),就是会自动退出的</p>\n<p>这个是docker的机制问题</p>\n<h4 id=\"查看容器日志\"><a href=\"#查看容器日志\" class=\"headerlink\" title=\"查看容器日志\"></a>查看容器日志</h4><p><code>docker logs [OPTIONS] CONTAINER</code>:获取容器的日志</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">OPTIONS说明：</span><br><span class=\"line\">-f : 跟踪日志输出</span><br><span class=\"line\">--since :显示某个开始时间的所有日志</span><br><span class=\"line\">-t : 显示时间戳</span><br><span class=\"line\">--tail :仅列出最新N条容器日志</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器中运行的进程信息\"><a href=\"#查看容器中运行的进程信息\" class=\"headerlink\" title=\"查看容器中运行的进程信息\"></a>查看容器中运行的进程信息</h4><p><code>docker top [OPTIONS] CONTAINER [ps OPTIONS]</code>: 查看容器中运行的进程信息，支持 ps 命令参数。</p>\n<h4 id=\"查看容器内部细节\"><a href=\"#查看容器内部细节\" class=\"headerlink\" title=\"查看容器内部细节\"></a>查看容器内部细节</h4><p><code>docker inspect [OPTIONS] NAME|ID [NAME|ID...]</code>:获取容器&#x2F;镜像的元数据。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">OPTIONS说明：</span><br><span class=\"line\">-f :指定返回值的模板文件。</span><br><span class=\"line\">-s :显示总的文件大小。</span><br><span class=\"line\">--type :为指定类型返回JSON。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"连接到正在运行中的容器\"><a href=\"#连接到正在运行中的容器\" class=\"headerlink\" title=\"连接到正在运行中的容器\"></a>连接到正在运行中的容器</h4><p><code>docker attach [OPTIONS] CONTAINER</code>:连接到正在运行中的容器</p>\n<p>要attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕（与screen命令的attach类似）。</p>\n<p>官方文档中说attach后可以通过CTRL-C来detach，但实际上经过我的测试，如果container当前在运行bash，CTRL-C自然是当前行的输入，没有退出；如果container当前正在前台运行进程，如输出nginx的access.log日志，CTRL-C不仅会导致退出容器，而且还stop了。这不是我们想要的，detach的意思按理应该是脱离容器终端，但容器依然运行。好在attach是可以带上—sig-proxy&#x3D;false来确保CTRL-D或CTRL-C不会关闭容器。</p>\n<h4 id=\"在运行的容器中执行命令\"><a href=\"#在运行的容器中执行命令\" class=\"headerlink\" title=\"在运行的容器中执行命令\"></a>在运行的容器中执行命令</h4><p><code>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</code>: 在运行的容器中执行命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">OPTIONS说明：</span><br><span class=\"line\">-d :分离模式: 在后台运行</span><br><span class=\"line\">-i :即使没有附加也保持STDIN 打开</span><br><span class=\"line\">-t :分配一个伪终端</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数据拷贝\"><a href=\"#数据拷贝\" class=\"headerlink\" title=\"数据拷贝\"></a>数据拷贝</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|- # 从容器内拷贝到宿主机</span><br><span class=\"line\">docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH # 从宿主机拷贝到容器内</span><br><span class=\"line\">OPTIONS说明：</span><br><span class=\"line\">-L :保持源目标中的链接</span><br></pre></td></tr></table></figure>\n\n<p>还有很命令,可以查文档 :<a href=\"https://www.runoob.com/docker/docker-command-manual.html\">https://www.runoob.com/docker/docker-command-manual.html</a></p>\n","categories":["docker"],"tags":["docker"]},{"title":"django配置离线脚本","url":"/post/ef5a7802.html","content":"<p>有些时候我们需要在不启动<code>django</code>的时候通过ORM操作数据,所以我们就需要配置离线脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> django</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取项目的根目录</span></span><br><span class=\"line\">base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class=\"line\"><span class=\"comment\"># 添加到系统环境变量</span></span><br><span class=\"line\">sys.path.append(base_dir)</span><br><span class=\"line\"><span class=\"comment\"># 加载项目的配置文件</span></span><br><span class=\"line\">os.environ.setdefault(<span class=\"string\">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class=\"string\">&quot;项目.settings&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 启动django</span></span><br><span class=\"line\">django.setup()</span><br></pre></td></tr></table></figure>\n","categories":["Django"],"tags":["Django","脚本"]},{"title":"elasticsearch","url":"/post/60537c10.html","content":"<p>Elasticsearch 是一个分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。 作为 Elastic Stack 的核心，它集中存储您的数据，帮助您发现意料之中以及意料之外的情况</p>\n<span id=\"more\"></span>\n\n<h2 id=\"docker安装es\"><a href=\"#docker安装es\" class=\"headerlink\" title=\"docker安装es\"></a>docker安装es</h2><p>因为elasticsearch是java写的需要安装java虚拟机，所以我们这里推荐用docker进行安装。</p>\n<h3 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里我们拉取7.12.1</span></span><br><span class=\"line\">docker pull elasticsearch:7.12.1</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/elasticsearch/image-20210530143835569.png\" alt=\"image-20210530143835569\"></p>\n<h3 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name es -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; b0e9f9f047e6</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-d: 在后台运行</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--name: 别名</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-p: 映射端口号</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-e:discovery.type=single-node：单机运行</span></span><br></pre></td></tr></table></figure>\n\n<p>然后就可以在浏览器中查看，我们键入127.0.0.1:9200</p>\n<p><img data-src=\"/../images/elasticsearch/image-20210530145904787.png\" alt=\"image-20210530145904787\"></p>\n<p><img data-src=\"/../images/elasticsearch/image-20210530145944925.png\" alt=\"image-20210530145944925\"></p>\n<h3 id=\"配置跨域\"><a href=\"#配置跨域\" class=\"headerlink\" title=\"配置跨域\"></a>配置跨域</h3><p>我们进入es的docker容器中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker exec -it es /bin/bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">找到配置文件</span></span><br><span class=\"line\">[root@e0cfd719797d elasticsearch]# vi config/elasticsearch.yml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在末尾添加如下两行，注意冒号后面需要加上空格</span></span><br><span class=\"line\">http.cors.enabled: true</span><br><span class=\"line\">http.cors.allow-origin: &quot;*&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">保存退出</span></span><br><span class=\"line\">:wq</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启es容器</span></span><br><span class=\"line\">docker restart es</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/elasticsearch/image-20210530150640434.png\" alt=\"image-20210530150640434\"></p>\n<h3 id=\"安装ik分词器\"><a href=\"#安装ik分词器\" class=\"headerlink\" title=\"安装ik分词器\"></a>安装ik分词器</h3><p>es自带的分词器对中文分词不是很友好，所以我们下载开源的IK分词器来解决这个问题。首先进入到plugins目录中下载分词器，下载完成后然后解压，再重启es即可。具体步骤如下:<br><strong>注意：</strong>elasticsearch的版本和ik分词器的版本需要保持一致，不然在重启的时候会失败。可以在这查看所有版本，选择合适自己版本的右键复制链接地址即可。<a href=\"https://aichh.com/redirect/aHR0cHM6Ly9naXRodWIuY29tL21lZGNsL2VsYXN0aWNzZWFyY2gtYW5hbHlzaXMtaWsvcmVsZWFzZXM=\">点击这里</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入容器</span></span><br><span class=\"line\">docker exec -it es /bin/bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入plugins目录</span></span><br><span class=\"line\">cd /usr/share/elasticsearch/plugins/ </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行</span></span><br><span class=\"line\">elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">退出容器</span></span><br><span class=\"line\">exit</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启</span></span><br><span class=\"line\">docker restart es</span><br></pre></td></tr></table></figure>\n\n<p>我们可以用postman 试一下</p>\n<p><img data-src=\"/../images/elasticsearch/image-20210530151905035.png\" alt=\"image-20210530151905035\"></p>\n<p>不加ik分词的话是把每个词都分开了。然后我们加上中文分词</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;tokens&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;测&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;position&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;试&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;position&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;一&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;position&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;下&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;position&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;中&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;position&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;文&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;position&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;分&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">7</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;position&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;词&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">7</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">8</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;position&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">7</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>不加ik分词的话是把每个词都分开了。然后我们加上中文分词</p>\n<p><img data-src=\"/../images/elasticsearch/image-20210530152041731.png\" alt=\"image-20210530152041731\"></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;tokens&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;测试&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CN_WORD&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;position&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;试一下&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CN_WORD&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;position&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;一下&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CN_WORD&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;position&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;一&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TYPE_CNUM&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;position&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;下&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;COUNT&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;position&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;中文&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CN_WORD&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;position&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;分词&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;start_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;end_offset&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">8</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CN_WORD&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;position&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到效果对比很明显。</p>\n<h3 id=\"kibana安装\"><a href=\"#kibana安装\" class=\"headerlink\" title=\"kibana安装\"></a>kibana安装</h3><p>Kibana 是一款开源的数据分析和可视化平台，它是 Elastic Stack 成员之一，设计用于和 Elasticsearch 协作。您可以使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。您可以很方便的利用图表、表格及地图对数据进行多元化的分析和呈现。</p>\n<p>Kibana 可以使大数据通俗易懂。它很简单，基于浏览器的界面便于您快速创建和分享动态数据仪表板来追踪 Elasticsearch 的实时数据变化。</p>\n<p>搭建 Kibana 非常简单。您可以分分钟完成 Kibana 的安装并开始探索 Elasticsearch 的索引数据 — 没有代码、不需要额外的基础设施。</p>\n<p>这里一定要注意！！！！</p>\n<p>Kibana 的版本需要和 Elasticsearch 的版本一致。这是官方支持的配置。</p>\n<h4 id=\"拉取镜像-1\"><a href=\"#拉取镜像-1\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker 安装</span></span><br><span class=\"line\">docker pull docker.elastic.co/kibana/kibana:7.12.1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置kibana-yml\"><a href=\"#配置kibana-yml\" class=\"headerlink\" title=\"配置kibana.yml\"></a>配置kibana.yml</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建配置文件目录</span></span><br><span class=\"line\">mkdir -p ~/docker/kibana/config</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入该目录</span></span><br><span class=\"line\">cd ~/docker/kibana/config/</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建并写入配置文件</span> </span><br><span class=\"line\">vim kibana.yml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"comment\"># ** THIS IS AN AUTO-GENERATED FILE **</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"></span><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Default Kibana configuration <span class=\"keyword\">for</span> docker target</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kibana的服务名称</span></span><br><span class=\"line\">server.name: kibana</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kibana的主机地址</span></span><br><span class=\"line\">server.host: &quot;0&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">elasticsearch的主机IP</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里填入你的外网地址，因为是在docker容器里面，如果填回环地址的话就有问题</span></span><br><span class=\"line\">elasticsearch.hosts: [ &quot;http://es_ip:9200&quot; ]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置中文</span></span><br><span class=\"line\">i18n.locale: &quot;zh-CN&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行容器-1\"><a href=\"#运行容器-1\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name=kibana \\</span><br><span class=\"line\">  --restart=always \\</span><br><span class=\"line\">  -p 5601:5601 \\</span><br><span class=\"line\">  -v ~/docker/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml \\</span><br><span class=\"line\">  kibana:7.12.1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"访问页面\"><a href=\"#访问页面\" class=\"headerlink\" title=\"访问页面\"></a>访问页面</h4><p>输入:<code>http://127.0.0.1:5601/</code></p>\n<p>我们可以使用kibana来给es发送restfulAPI了</p>\n<p><img data-src=\"/../images/elasticsearch/image-20210530195642885.png\" alt=\"image-20210530195642885\"></p>\n<p>具体es如何操作，这里我推荐一下这个为老哥的ElasticSerach 7 教程 <a href=\"https://github.com/xr2117/ElasticSearch7\">github</a></p>\n","categories":["search"],"tags":["搜素"]},{"title":"linux nl 命令","url":"/post/501da393.html","content":"<p><strong>Linux nl命令</strong>读取 file 参数（缺省情况下标准输入），计算输入中的行号，将计算过的行号写入标准输出。在输出中，nl命令根据您在命令行中指定的标志来计算左边的行。输入文本必须写在逻辑页中。每个逻辑页有头、主体和页脚节（可以有空节）。除非使用<code>-p</code>选项，nl 命令在每个逻辑页开始的地方重新设置行号。可以单独为头、主体和页脚节设置行计算标志（例如，头和页脚行可以被计算然而文本行不能）。其默认的结果与<code>cat -n</code>有点不太一样， nl 可以将行号做比较多的显示设计，包括位数与是否自动补齐0等等的功能。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nl</span> (选项) (参数)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">-b ：指定行号指定的方式，主要有两种：</span><br><span class=\"line\">    -b a ：表示不论是否为空行，也同样列出行号(类似 <span class=\"built_in\">cat</span> -n)；</span><br><span class=\"line\">    -b t ：如果有空行，空的那一行不要列出行号(默认值)；</span><br><span class=\"line\"></span><br><span class=\"line\">-n ：列出行号表示的方法，主要有三种：</span><br><span class=\"line\">    -n <span class=\"built_in\">ln</span> ：行号在萤幕的最左方显示；</span><br><span class=\"line\">    -n rn ：行号在自己栏位的最右方显示，且不加 0 ；</span><br><span class=\"line\">    -n rz ：行号在自己栏位的最右方显示，且加 0 ；</span><br><span class=\"line\"></span><br><span class=\"line\">-w ：行号栏位的占用的位数。</span><br><span class=\"line\">-p ：在逻辑定界符处不重新开始计算。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>准备一个文件testfile</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">我是第一行 111</span><br><span class=\"line\">我是第二行 222</span><br><span class=\"line\"></span><br><span class=\"line\">我是第四行 444</span><br><span class=\"line\"></span><br><span class=\"line\">我是第六行 666</span><br><span class=\"line\"></span><br><span class=\"line\">========== 888</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nl-testfile\"><a href=\"#nl-testfile\" class=\"headerlink\" title=\"nl testfile\"></a><code>nl testfile</code></h3><p><img data-src=\"/../images/linux-nl-%E5%91%BD%E4%BB%A4/image-20220929091718751.png\" alt=\"image-20220929091718751\"></p>\n<p>说明：文件中的空白行，nl 不会加上行号</p>\n<h3 id=\"b-a空行也加上行号\"><a href=\"#b-a空行也加上行号\" class=\"headerlink\" title=\"-b a空行也加上行号\"></a><code>-b a</code>空行也加上行号</h3><p><img data-src=\"/../images/linux-nl-%E5%91%BD%E4%BB%A4/image-20220929091949323.png\" alt=\"image-20220929091949323\"></p>\n<h3 id=\"n-ln-行号在萤幕的最左方显示\"><a href=\"#n-ln-行号在萤幕的最左方显示\" class=\"headerlink\" title=\"-n ln 行号在萤幕的最左方显示\"></a><code>-n ln</code> 行号在萤幕的最左方显示</h3><p><img data-src=\"/../images/linux-nl-%E5%91%BD%E4%BB%A4/image-20220929092259272.png\" alt=\"image-20220929092259272\"></p>\n<h3 id=\"n-rn-行号在自己栏位的最右方显示，且不加-0\"><a href=\"#n-rn-行号在自己栏位的最右方显示，且不加-0\" class=\"headerlink\" title=\"-n rn 行号在自己栏位的最右方显示，且不加 0\"></a><code>-n rn </code>行号在自己栏位的最右方显示，且不加 0</h3><p><img data-src=\"/../images/linux-nl-%E5%91%BD%E4%BB%A4/image-20220929092357601.png\" alt=\"image-20220929092357601\"></p>\n<h3 id=\"n-rz-行号在自己栏位的最右方显示，且加-0\"><a href=\"#n-rz-行号在自己栏位的最右方显示，且加-0\" class=\"headerlink\" title=\"-n rz 行号在自己栏位的最右方显示，且加 0\"></a><code>-n rz</code> 行号在自己栏位的最右方显示，且加 0</h3><p><img data-src=\"/../images/linux-nl-%E5%91%BD%E4%BB%A4/image-20220929092541176.png\" alt=\"image-20220929092541176\"></p>\n<h3 id=\"w-行号栏位的占用的位数\"><a href=\"#w-行号栏位的占用的位数\" class=\"headerlink\" title=\"-w 行号栏位的占用的位数\"></a><code>-w</code> 行号栏位的占用的位数</h3><p><img data-src=\"/../images/linux-nl-%E5%91%BD%E4%BB%A4/image-20220929092632275.png\" alt=\"image-20220929092632275\"></p>\n","categories":["linux"],"tags":["linux","nl命令"]},{"title":"linux基础","url":"/post/22349d84.html","content":"","categories":["linux"],"tags":["linux"]},{"title":"jupyter的使用","url":"/post/eabfeb42.html","content":"<ol>\n<li>Jupyter是基于网页形式的、结合了编写说明文档、数学公式、交互计算和其他富媒体形式的工具等，基本常用的开发工具里面都包含了。</li>\n<li>Jupyter里面编写的内容都可以以文档形式输出，默认保存的后缀名为<code>.ipynb</code>的<code>JSON</code>格式文件，还可以导出为：HTML、PDF、MarkDown、Python等格式。</li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"安装jupyter\"><a href=\"#安装jupyter\" class=\"headerlink\" title=\"安装jupyter\"></a>安装jupyter</h2><p>在终端窗口输入<code>pip install jupyter notebook</code></p>\n<p>当然你也可以再后面加 豆瓣源 <code>-i http://pypi.douban.com/simple/</code></p>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>装完后 在命令行输入 <code>jupyter notebook</code> 就能启动</p>\n<ul>\n<li>打开地址为当前bash的目录，默认的根目录</li>\n<li>浏览器地址为<a href=\"http://localhost:8888/\">http://localhost:8888/</a></li>\n<li>通过control -C终止jupyter程序</li>\n</ul>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a><strong>基本使用</strong></h2><p><img data-src=\"/../images/jupyter%E7%9A%84%E4%BD%BF%E7%94%A8/641.png\" alt=\"图片\"></p>\n<p><img data-src=\"/../images/jupyter%E7%9A%84%E4%BD%BF%E7%94%A8/641-16564684699623.png\" alt=\"图片\"></p>\n<p>在Jupyter中创建的文件默认扩展名是: .ipynb,可以新建Python3文件或者打开原来创建的文件,打开之后如下</p>\n<p><img data-src=\"/../images/jupyter%E7%9A%84%E4%BD%BF%E7%94%A8/641-16564684850256.png\" alt=\"图片\"></p>\n<p>上图基本说明了新建文档的基本结构，特别说明的是“单元格状态”，有代码，Markdown，原生NBconvert，标题。最常用的是前两个，分别是代码状态和Markdown状态。</p>\n<p>一般新建的文档都会以Untitled+数字进行命名，比如Untitled1、Untitled2….,可以通过点击左上方的名字进行重命名。</p>\n<p><img data-src=\"/../images/jupyter%E7%9A%84%E4%BD%BF%E7%94%A8/641-16564685056729.png\" alt=\"图片\"></p>\n<p>在菜单File中可以进行新建、打开、重命名、保存、设置保存点、下载文件等操作。</p>\n<p><img data-src=\"/../images/jupyter%E7%9A%84%E4%BD%BF%E7%94%A8/641-165646851823712.png\" alt=\"图片\"></p>\n<p>其中Downloads as，通常是将当前文件进行其他格式保存的时候选择，可以存储为pdf、md、py等格式</p>\n<p><img data-src=\"/../images/jupyter%E7%9A%84%E4%BD%BF%E7%94%A8/641-165646854040215.png\" alt=\"图片\"></p>\n<p>默认juypter可以通过tab键进行代码的提示，如果想使用Pycharm一样的自动提示，可以添加代码自动补全的扩展。</p>\n<h2 id=\"常用的快捷键是\"><a href=\"#常用的快捷键是\" class=\"headerlink\" title=\"常用的快捷键是\"></a><strong>常用的快捷键是</strong></h2><p>Ctrl + Enter: 执行单元格代码</p>\n<p>Shift + Enter: 执行单元格代码并且移动到下一个单元格</p>\n<p>Alt + Enter: 执行单元格代码，新建并移动到下一个单元格</p>\n<p>这几个快捷键都是非常常用的。</p>\n<p>历史输入和输出变量</p>\n<p>当你写的单元格多了，肯定会注意到，IPython 中每一次的输入输出都有序号。你可以通过一下方法访问这些输入和输出：</p>\n<p>_：访问上一次输出</p>\n<p>__：访问上上一次输出</p>\n<p>_X：访问历史 X 行输出</p>\n<p>_iX：访问历史 X 行输入</p>\n<p>其中小写字母 “i”，代表 “in”。</p>\n<p>双击D：删除当前cell</p>\n<p>单击M：转为markdown文档</p>\n<p>markdown文档下运行变为预览模式</p>\n<p>shift + tab 函数用法全都有，从此不用再百度</p>\n<p>tab键，代码补全</p>\n<p>esc 后 b键，在下方插入单元；esc 后 a键，在上方插入单元</p>\n<p>esc 后 m键，进入markdown模式； esc后 y键 进入代码模式</p>\n<p>shift + tab + - ，代码分割到两个单元中</p>\n<p>esc 后 shift + m键，将当前单元和下方单元合并。这个是上边快捷键的反向操作，上边是分割，这个是合并</p>\n<p>esc 后 Z键，恢复删除的最后一个单元</p>\n<h2 id=\"帮助文档\"><a href=\"#帮助文档\" class=\"headerlink\" title=\"帮助文档\"></a>帮助文档</h2><h3 id=\"help\"><a href=\"#help\" class=\"headerlink\" title=\"help()\"></a>help()</h3><p><img data-src=\"/../images/jupyter%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220629103504416.png\" alt=\"image-20220629103504416\"></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用?\"></a>使用?</h3><p><img data-src=\"/../images/jupyter%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220629103714563.png\" alt=\"image-20220629103714563\"></p>\n<p>此外，使用两个??可以把函数的源代码显示出来</p>\n<h2 id=\"魔法命令\"><a href=\"#魔法命令\" class=\"headerlink\" title=\"魔法命令\"></a>魔法命令</h2><p><code>%run *.py</code> : 运行外部python文件（默认是当前目录，最好加上绝对路径）</p>\n<p><code>%time statement</code> : 计算statement的运行时间</p>\n<p><code>%who</code> : 快速查看当前会话的所有变量与函数名称</p>\n<p><code>%whos</code> : 查看当前会话的所有变量与函数名称的详细信息</p>\n<p><code>lsmagic</code> : 列出所有魔法命令</p>\n","categories":["jupyter"],"tags":["数据分析","jupyter"]},{"title":"linux文本处理三剑客","url":"/post/a67340ea.html","content":"<p>awk、grep、sed是linux操作文本的三大利器，合称文本三剑客，也是必须掌握的linux命令之一。三者的功能都是处理文本，但侧重点各不相同，其中属awk功能最强大，但也最复杂。</p>\n<p><strong>grep更适合单纯的查找或匹配文本，sed更适合编辑匹配到的文本，awk更适合格式化文本，对文本进行较复杂格式处理。</strong></p>\n<span id=\"more\"></span>\n\n<h1 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h1><h2 id=\"什么是grep和egrep\"><a href=\"#什么是grep和egrep\" class=\"headerlink\" title=\"什么是grep和egrep\"></a>什么是grep和egrep</h2><p>Linux系统中grep命令是一种强大的文本搜索工具，它能使用<strong>正则表达式</strong>搜索文本，并把匹配的行打印出来（匹配到的标红）。grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。</p>\n<p>　　grep的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。</p>\n<p>　　grep可用于shell脚本，因为grep通过返回一个状态值来说明搜索的状态，如果模板搜索成功，则返回0，如果搜索不成功，则返回1，如果搜索的文件不存在，则返回2。我们利用这些返回值就可进行一些自动化的文本处理工作。</p>\n<p>　　<strong>egrep &#x3D; grep -E：扩展的正则表达式</strong> （除了<strong>&lt; , &gt; , \\b</strong> 使用其他正则都可以去掉\\）</p>\n<p>正则推荐学习网站:<a href=\"https://regexlearn.com/zh-cn\">https://regexlearn.com/zh-cn</a></p>\n<h2 id=\"使用grep\"><a href=\"#使用grep\" class=\"headerlink\" title=\"使用grep\"></a>使用grep</h2><h3 id=\"grep命令格式\"><a href=\"#grep命令格式\" class=\"headerlink\" title=\"grep命令格式\"></a>grep命令格式</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">grep [option] pattern file</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h3><ul>\n<li>-A&lt;显示行数&gt;：除了显示符合范本样式的那一列之外，并显示该行之后的内容。</li>\n<li>-B&lt;显示行数&gt;：除了显示符合样式的那一行之外，并显示该行之前的内容。</li>\n<li>-C&lt;显示行数&gt;：除了显示符合样式的那一行之外，并显示该行之前后的内容。</li>\n<li>-c：统计匹配的行数</li>\n<li>-e ：实现多个选项间的逻辑or 关系</li>\n<li>-E：扩展的正则表达式</li>\n<li>-f FILE：从FILE获取PATTERN匹配</li>\n<li>-F ：相当于fgrep</li>\n<li>-i –ignore-case #忽略字符大小写的差别。</li>\n<li>-n：显示匹配的行号</li>\n<li>-o：仅显示匹配到的字符串</li>\n<li>-q： 静默模式，不输出任何信息</li>\n<li>-s：不显示错误信息。</li>\n<li>-v：显示不被pattern 匹配到的行，相当于[^] 反向匹配</li>\n<li>-w ：匹配 整个单词</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 准备一个测试文件</span></span><br><span class=\"line\">aaaaa</span><br><span class=\"line\">bbbbbb</span><br><span class=\"line\">ccccCCC</span><br><span class=\"line\">ddDDDdd</span><br><span class=\"line\">ABCD</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929133234367.png\" alt=\"image-20220929133234367\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示匹配到的b的那一行,并显示后面2行</span></span><br><span class=\"line\">grep -A2 b test.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929133423071.png\" alt=\"image-20220929133423071\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示匹配到b的那一行,并显示之前1行</span></span><br><span class=\"line\">grep -B1 b test.txt </span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929133647430.png\" alt=\"image-20220929133647430\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示匹配到b的那一行,并显示前后1行</span></span><br><span class=\"line\">grep -C1 b test.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929133752685.png\" alt=\"image-20220929133752685\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 统计匹配到的行数</span></span><br><span class=\"line\">grep -c D test.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929133953358.png\" alt=\"image-20220929133953358\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 实现多个选项间的逻辑or关系</span></span><br><span class=\"line\">grep -e a -e c test.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929134436988.png\" alt=\"image-20220929134436988\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从FILE获取PATTERN匹配</span></span><br><span class=\"line\">grep -f pattern test.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929135042896.png\" alt=\"image-20220929135042896\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  -i --ignore-case #忽略字符大小写的差别</span></span><br><span class=\"line\">grep -i d  test.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929135222339.png\" alt=\"image-20220929135222339\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -n：显示匹配的行号</span></span><br><span class=\"line\">grep -n D  test.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929135316963.png\" alt=\"image-20220929135316963\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -o：仅显示匹配到的字符串</span></span><br><span class=\"line\">grep -o Dd  test.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929135440679.png\" alt=\"image-20220929135440679\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -v：显示不被pattern 匹配到的行，相当于[^] 反向匹配</span></span><br><span class=\"line\">grep -v  d  test.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929135610559.png\" alt=\"image-20220929135610559\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -w ：匹配 整个单词</span></span><br><span class=\"line\">grep -w  ABCD  test.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929135720976.png\" alt=\"image-20220929135720976\"></p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>一般我们使用grep都是配合管道符号 <code>|</code>使用的 比如查看nginx进程,</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看nginx进程,判断nginx是否开启</span></span><br><span class=\"line\">ps -aux | grep nginx</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929142145897.png\" alt=\"image-20220929142145897\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看80端口是否被占用</span></span><br><span class=\"line\">netstat -tunlp | grep 80</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929142306852.png\" alt=\"image-20220929142306852\"></p>\n<h1 id=\"sed\"><a href=\"#sed\" class=\"headerlink\" title=\"sed\"></a>sed</h1><h2 id=\"什么是sed\"><a href=\"#什么是sed\" class=\"headerlink\" title=\"什么是sed\"></a>什么是sed</h2><p>sed 是一种流编辑器，它一次处理一<strong>行</strong>内容。处理时，把当前处理的行存储在临时缓冲区中，称为“<strong>模式空间</strong>”（patternspace ），接着用sed 命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。然后读入下行，执行下一个循环。如果没有使诸如‘D’ 的特殊命令，那会在两个循环之间清空模式空间，但不会清空<strong>保留空间</strong>。这样不断重复，直到文件末尾。<strong>文件内容并没有改变</strong>，除非你使用<strong>重定向存储输出或-i</strong>。</p>\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/20200622105532480.png\" alt=\"20200622105532480\"></p>\n<p>　　功能：主要用来自动编辑一个或多个文件, 简化对文件的反复操作</p>\n<h2 id=\"sed的使用\"><a href=\"#sed的使用\" class=\"headerlink\" title=\"sed的使用\"></a>sed的使用</h2><h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed  [options]  <span class=\"string\">&#x27;/pattern/ command&#x27;</span>  file(s)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用选项options\"><a href=\"#常用选项options\" class=\"headerlink\" title=\"常用选项options\"></a>常用选项options</h3><ul>\n<li><strong>-n</strong>：不输出模式空间内容到屏幕，即不自动打印，只打印匹配到的行</li>\n<li><strong>-e：</strong>多点编辑，对每行处理时，可以有多个Script</li>\n<li><strong>-f</strong>：把Script写到文件当中，在执行sed时-f 指定文件路径，如果是多个Script，换行写</li>\n<li><strong>-r</strong>：支持<strong>扩展的正则</strong>表达式</li>\n<li><strong>-i</strong>：直接将处理的结果写入文件</li>\n<li><strong>-i.bak</strong>：在将处理的结果写入文件之前备份一份</li>\n</ul>\n<h3 id=\"编辑命令command\"><a href=\"#编辑命令command\" class=\"headerlink\" title=\"编辑命令command\"></a>编辑命令command</h3><ul>\n<li><strong>d：删除</strong>模式空间匹配的行，并立即启用下一轮循环</li>\n<li><strong>p：打印</strong>当前模式空间内容，追加到默认输出之后</li>\n<li><strong>a</strong>：在指定行<strong>后面追加</strong>文本，支持使用\\n实现多行追加</li>\n<li><strong>i</strong>：在行<strong>前面插入</strong>文本，支持使用\\n实现多行追加</li>\n<li><strong>c</strong>：<strong>替换</strong>行为单行或多行文本，支持使用\\n实现多行追加</li>\n<li>w：保存模式匹配的行至指定文件</li>\n<li>r：读取指定文件的文本至模式空间中匹配到的行后</li>\n<li>&#x3D;：为模式空间中的行打印行号</li>\n<li><strong>!<strong>：模式空间中匹配行</strong>取反</strong>处理</li>\n<li>s&#x2F;&#x2F;&#x2F;：查找替换，支持使用其它分隔符，如：s@@@，s###；<ul>\n<li><strong>加g表示行内全局替换；</strong></li>\n<li>在替换时，可以加一下命令，实现大小写转换</li>\n<li>\\l：把下个字符转换成小写。</li>\n<li>\\L：把replacement字母转换成小写，直到\\U或\\E出现。</li>\n<li>\\u：把下个字符转换成大写。</li>\n<li>\\U：把replacement字母转换成大写，直到\\L或\\E出现。</li>\n<li>\\E：停止以\\L或\\U开始的大小写转换</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sed实例\"><a href=\"#sed实例\" class=\"headerlink\" title=\"sed实例\"></a>sed实例</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 还是那个测试文件</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> test.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929151337242.png\" alt=\"image-20220929151337242\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  p：匹配到的行会打印一遍，不匹配的行也会打印</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929153425829.png\" alt=\"image-20220929153425829\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -n：不输出模式空间内容到屏幕，即不自动打印，只打印匹配到的行</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929154541975.png\" alt=\"image-20220929154541975\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -e：多点编辑，对每行处理时，可以有多个Script</span></span><br><span class=\"line\">sed -n -e <span class=\"string\">&#x27;/D/p&#x27;</span> -e <span class=\"string\">&#x27;/a/p&#x27;</span> test.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929155453651.png\" alt=\"image-20220929155453651\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -f：把Script写到文件当中，在执行sed时-f 指定文件路径，如果是多个Script，换行写</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929155703145.png\" alt=\"image-20220929155703145\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># a：在指定行后面追加文本，支持使用\\n实现多行追加</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;2a 111&#x27;</span> test.txt  <span class=\"comment\">#在第二行后面加上111</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929160545221.png\" alt=\"image-20220929160545221\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  i：在行前面插入文本，支持使用\\n实现多行追加</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;2i 111&#x27;</span> test.txt  <span class=\"comment\"># 在第二行前面加上111</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929160951595.png\" alt=\"image-20220929160951595\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  c：替换行为单行或多行文本，支持使用\\n实现多行追加</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;2c 111\\n222&#x27;</span> test.txt <span class=\"comment\"># 替换第二行 \\n 再添加一行</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929161329686.png\" alt=\"image-20220929161329686\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># w：保存模式匹配的行至指定文件</span></span><br><span class=\"line\">sed  <span class=\"string\">&#x27;/bbb/w 1.txt&#x27;</span> test.txt <span class=\"comment\"># 将匹配到的写入1.txt</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929162354187.png\" alt=\"image-20220929162354187\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># r：读取指定文件的文本至模式空间中匹配到的行后</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;3 r 1.txt&#x27;</span> test.txt <span class=\"comment\"># 将1.txt中的内容读取并追加到test第三行后面</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929162834407.png\" alt=\"image-20220929162834407\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  =：为模式空间中的行打印行号</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;=&#x27;</span> test.txt </span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929164239888.png\" alt=\"image-20220929164239888\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  !：模式空间中匹配行取反处理</span></span><br><span class=\"line\">sed -n <span class=\"string\">&#x27;/aaa/!p&#x27;</span> test.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929164759315.png\" alt=\"image-20220929164759315\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># s///：查找替换，支持使用其它分隔符，如：s@@@，s###；</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;s/bbb/111/&#x27;</span> test.txt  <span class=\"comment\"># 将bbb替换为111</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929165839261.png\" alt=\"image-20220929165839261\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 加g表示行内全局替换；</span></span><br><span class=\"line\">sed <span class=\"string\">&#x27;s/bbb/111/g&#x27;</span> test.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20220929165939258.png\" alt=\"image-20220929165939258\"></p>\n<h1 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h1><h2 id=\"什么是awk\"><a href=\"#什么是awk\" class=\"headerlink\" title=\"什么是awk\"></a>什么是awk</h2><p>awk是一种编程语言，用于在linux&#x2F;unix下对文本和数据进行处理。数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出。它<strong>支持用户自定义函数</strong>和动态正则表达式等先进功能，是linux&#x2F;unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。<strong>awk有很多内建的功能</strong>，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。</p>\n<p>　　awk其实不仅仅是工具软件，还是一种编程语言。不过，本文只介绍它的命令行用法，对于大多数场合，应该足够用了。</p>\n<h2 id=\"awk的使用\"><a href=\"#awk的使用\" class=\"headerlink\" title=\"awk的使用\"></a>awk的使用</h2><h3 id=\"命令格式-1\"><a href=\"#命令格式-1\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">awk [options] <span class=\"string\">&#x27;script&#x27;</span> var=value file(s)</span><br><span class=\"line\">awk [options] -f scriptfile var=value file(s)</span><br></pre></td></tr></table></figure>\n\n<p><strong>常用命令选项</strong></p>\n<ul>\n<li>-F fs   fs指定输入分隔符，fs可以是字符串或正则表达式，如-F:</li>\n<li>-v var&#x3D;value   赋值一个用户定义变量，将外部变量传递给awk</li>\n<li>-f scripfile  从脚本文件中读取awk命令</li>\n</ul>\n<h3 id=\"语法结构\"><a href=\"#语法结构\" class=\"headerlink\" title=\"语法结构\"></a>语法结构</h3><p>awk是由<em>pattern</em>和<em>action</em>组成， pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">&#x27;&#123;pattern + action&#125;&#x27;</span> &#123;filenames&#125;</span><br></pre></td></tr></table></figure>\n\n<p>pattern 可以是如下几种或者什么都没有（全部匹配）：</p>\n<ul>\n<li>&#x2F;正则表达式&#x2F;：使用通配符的扩展集。</li>\n<li>关系表达式：使用运算符进行操作，可以是字符串或数字的比较测试。</li>\n<li>模式匹配表达式：用运算符<del>（匹配）和</del>!（不匹配）。</li>\n<li>BEGIN语句块、pattern语句块、END语句块：参见awk的工作原理</li>\n</ul>\n<p>action 由一个或多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内，可以是如下几种，或者什么都没有（print）</p>\n<ul>\n<li>变量或数组赋值</li>\n<li>输出命令</li>\n<li>内置函数</li>\n<li>控制流语句</li>\n</ul>\n<h3 id=\"awk常见应用和工作原理\"><a href=\"#awk常见应用和工作原理\" class=\"headerlink\" title=\"awk常见应用和工作原理\"></a>awk常见应用和工作原理</h3><p>下面列出一个最常用的awk命令结构，借此分析原理</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">&#x27;BEGIN&#123; commands &#125; pattern&#123; commands &#125; END&#123; commands &#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先执行 <code>BEGIN &#123;commands&#125;</code> 内的语句块，注意这只会执行一次，经常用于变量初始化，头行打印一些表头信息，只会执行一次，在通过stdin读入数据前就被执行；</li>\n<li>从文件内容中读取一行，注意<strong>awk是以行为单位处理的，每读取一行使用</strong> <strong><code>pattern&#123;commands&#125;</code></strong> <strong>循环处理</strong> 可以理解成一个for循环，这也是最重要的部分；</li>\n<li>最后执行 <code>END&#123; commands &#125;</code> ,也是执行一次，在所有行处理完后执行，一帮用于打印一些统计结果。</li>\n</ul>\n<p>实例:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> -n /etc/passwd | awk -F <span class=\"string\">&#x27;:&#x27;</span> <span class=\"string\">&#x27;BEGIN &#123;print &quot;start&quot;&#125; &#123; print  $1,$2&#125; END &#123;print &quot;end&quot;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># -F &#x27;:&#x27;  以逗号为分隔符 默认为空格</span></span><br><span class=\"line\"><span class=\"comment\"># BEGIN 执行打印start 且只打印一次</span></span><br><span class=\"line\"><span class=\"comment\"># 正常执行 </span></span><br><span class=\"line\"><span class=\"comment\"># print $1,$2 打印第一列,第二列</span></span><br><span class=\"line\"><span class=\"comment\"># END 执行end 且只打印一次</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221008162809171.png\" alt=\"image-20221008162809171\"></p>\n<h3 id=\"awk的内置变量\"><a href=\"#awk的内置变量\" class=\"headerlink\" title=\"awk的内置变量\"></a>awk的内置变量</h3><ul>\n<li><strong>FS</strong> ：<strong>输入字段分隔符</strong>，<strong>默认为空白字符</strong></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">head</span> -n 5 passwd.bak | awk -v FS=<span class=\"string\">&#x27;:&#x27;</span> <span class=\"string\">&#x27;&#123;print $1,$2&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009085738131.png\" alt=\"image-20221009085738131\"></p>\n<ul>\n<li><strong>OFS</strong> ：<strong>输出字段分隔符</strong>，默认为空白字符</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">head</span> -n 5 passwd.bak | awk -v FS=<span class=\"string\">&#x27;:&#x27;</span> -v OFS=<span class=\"string\">&#x27;----&#x27;</span> <span class=\"string\">&#x27;&#123;print $1,$2&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009085858108.png\" alt=\"image-20221009085858108\"></p>\n<ul>\n<li>RS ：<strong>输入记录分隔符</strong>，指定输入时的换行符，原换行符仍有效,原来是以<code>\\n</code> 作为行分隔符</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看测试文件</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> RStest.txt </span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009090939008.png\" alt=\"image-20221009090939008\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以空格为行分隔符</span></span><br><span class=\"line\">awk -v RS=<span class=\"string\">&#x27; &#x27;</span> <span class=\"string\">&#x27;&#123;print &#125;&#x27;</span> RStest.txt</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009090958640.png\" alt=\"image-20221009090958640\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以段落为分隔符</span></span><br><span class=\"line\">awk -v RS=<span class=\"string\">&#x27;&#x27;</span> <span class=\"string\">&#x27;&#123;print &#125;&#x27;</span> RStest.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009091226879.png\" alt=\"image-20221009091226879\"></p>\n<ul>\n<li>ORS ：<strong>输出记录分隔符</strong>，输出时用指定符号代替换行符</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输出的时候不再用原来的`\\n` 而是改成指定的</span></span><br><span class=\"line\">awk -v ORS=<span class=\"string\">&#x27;====&#x27;</span> <span class=\"string\">&#x27;&#123;print $1 &#125;&#x27;</span> RStest.txt </span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009091833721.png\" alt=\"image-20221009091833721\"></p>\n<ul>\n<li><strong>NF</strong> ：字段数量，<strong>共有</strong>多少字段， <strong>$NF引用最后一列，$(NF-1)引用倒数第2列</strong></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NF显示字段数量</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print $0,NF&#125;&#x27;</span> RStest.txt </span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009092203782.png\" alt=\"image-20221009092203782\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># $NF引用最后一列</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print $NF&#125;&#x27;</span> RStest.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009092301063.png\" alt=\"image-20221009092301063\"></p>\n<ul>\n<li><strong>NR</strong> ：<strong>行号</strong>，后可跟多个文件，第二个文件行号继续从第一个文件最后行号开始</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示行号</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print NR, $0&#125;&#x27;</span> RStest.txt </span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009092415427.png\" alt=\"image-20221009092415427\"></p>\n<ul>\n<li>FNR ：各文件分别计数, 行号，后跟一个文件和NR一样，跟多个文件，第二个文件<strong>行号从1开始</strong> 单个文件与NR没区别</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print FNR,$0&#125;&#x27;</span> RStest.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009093022957.png\" alt=\"image-20221009093022957\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print FNR,$0&#125;&#x27;</span> RStest.txt RStest.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009093044682.png\" alt=\"image-20221009093044682\"></p>\n<ul>\n<li>FILENAME ：<strong>当前文件名</strong></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print FILENAME,$0&#125;&#x27;</span> RStest.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009093824115.png\" alt=\"image-20221009093824115\"></p>\n<ul>\n<li><p>ARGC ：<strong>命令行参数</strong>的个数</p>\n</li>\n<li><p>ARGV ：数组，保存的是命令行所给定的各参数，<strong>查看参数</strong></p>\n</li>\n</ul>\n<h3 id=\"自定义变量\"><a href=\"#自定义变量\" class=\"headerlink\" title=\"自定义变量\"></a>自定义变量</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用-v 自义定变量</span></span><br><span class=\"line\">awk -v name=<span class=\"string\">&#x27;123&#x27;</span> <span class=\"string\">&#x27;&#123;print name&#125;&#x27;</span> RStest.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009094432611.png\" alt=\"image-20221009094432611\"></p>\n<h2 id=\"常用实例\"><a href=\"#常用实例\" class=\"headerlink\" title=\"常用实例\"></a>常用实例</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 a b c d  的b 后面插入新字段 e f g</span></span><br><span class=\"line\"><span class=\"comment\"># 将$2 重新赋值,再打印,两个命令用分号隔开</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;a b c d &#x27;</span> | awk <span class=\"string\">&#x27;&#123;$2=$2&quot; e f g&quot;;print&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009100423723.png\" alt=\"image-20221009100423723\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从ifconfig命令的结果中筛选出除了lo网卡外的所有IPV4地址.</span></span><br><span class=\"line\">ifconfig | awk <span class=\"string\">&#x27;/inet /&amp;&amp;$2!~/127/ &#123;print $2&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009110955242.png\" alt=\"image-20221009110955242\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 读取配置文件中的某一段配置</span></span><br><span class=\"line\"><span class=\"comment\"># 比如说我们要读取yum配置文件中的中间一段</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009111429559.png\" alt=\"image-20221009111429559\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim 1.awk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配centosplus,[] 需要用转义符号\\</span></span><br><span class=\"line\">/\\[centosplus\\]/&#123;</span><br><span class=\"line\"><span class=\"comment\"># 打印</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span></span><br><span class=\"line\">  <span class=\"comment\"># 获取每一行</span></span><br><span class=\"line\">  <span class=\"comment\"># getline &gt; 0 表示有数据</span></span><br><span class=\"line\">  <span class=\"comment\"># getline = 0 表示遇到结尾</span></span><br><span class=\"line\">  <span class=\"comment\"># getline &lt; 0 表示有错误</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> ((getline var)&gt;0)&#123;</span><br><span class=\"line\">  <span class=\"comment\"># 当var 遇到下一个[] 退出 </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (var~/\\[.*\\]/)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">exit</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  <span class=\"comment\"># 打印var</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span> var</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">awk -f 1.awk /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009154416803.png\" alt=\"image-20221009154416803\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 去重</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> 1.txt </span><br><span class=\"line\">aa </span><br><span class=\"line\">aa</span><br><span class=\"line\">aa</span><br><span class=\"line\">bb</span><br><span class=\"line\">bb</span><br><span class=\"line\">cc</span><br><span class=\"line\">cc</span><br><span class=\"line\"><span class=\"comment\"># 用数组arr 将$1存起来,arr[$1]次数+1,然后判断arr[$1]是不是第一次出现,如果是第一次就打印</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;arr[$1]=arr[$1]+1;if(arr[$1]==1)&#123;print&#125;&#125;&#x27;</span> 1.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221009141427509.png\" alt=\"image-20221009141427509\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 统计数量</span></span><br><span class=\"line\"><span class=\"comment\"># 用数组将出现的arr[$1]存起来,</span></span><br><span class=\"line\"><span class=\"comment\"># 打印</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;arr[$1]=arr[$1]+1&#125;END&#123;for (i in arr)&#123;print arr[i],i&#125;&#125;&#x27;</span> 1.txt</span><br><span class=\"line\"><span class=\"comment\"># 更简单</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> 1.txt  | <span class=\"built_in\">uniq</span> -c</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 取字段中的指定字段数量</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> 2.txt</span><br><span class=\"line\">1 001dfad</span><br><span class=\"line\">2 003asda</span><br><span class=\"line\">3 00412312</span><br><span class=\"line\">4 006123asda</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用substr获取子串</span></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;print $1,substr($2,1,3)&#125;&#x27;</span> 2.txt</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/image-20221010144225925.png\" alt=\"image-20221010144225925\"></p>\n","categories":["linux"],"tags":["linux","grep","sed","awk"]},{"title":"mysql8.0主从复制","url":"/post/22f479b4.html","content":"<p>1.传统方式：<br>基于主库的bin-log将日志事件和事件位置复制到从库，从库再加以应用来达到主从同步的目的。</p>\n<p>2.Gtid方式（MySQL&gt;&#x3D;5.7推荐使用）：<br>基于GTID的复制中，从库会告知主库已经执行的事务的GTID的值，然后主库会将所有未执行的事务的GTID的列表返回给从库，并且可以保证同一个事务只在指定的从库执行一次。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>在做主从同步时，如果从机需要主机上原有数据，就要先复制一份到从机。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 收集主机原有数据</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">mysqldump -uroot -pmysql --all-databases --lock-all-tables &gt; ~/master_db.sql</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2. 从机复制主机原有数据</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">mysql -uroot -p123456 -h127.0.0.1 --port=3306 &lt; ~/master_db.sql</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>别忘了开启3306端口,不然会连不上</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">centos7以上</span></span><br><span class=\"line\">firewall-cmd --add-port=3306/tcp --permanen # success 表示成功</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重新载入配置</span>  </span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"传统方式\"><a href=\"#传统方式\" class=\"headerlink\" title=\"传统方式\"></a>传统方式</h2><h3 id=\"master配置\"><a href=\"#master配置\" class=\"headerlink\" title=\"master配置\"></a>master配置</h3><h4 id=\"修改master配置文件\"><a href=\"#修改master配置文件\" class=\"headerlink\" title=\"修改master配置文件\"></a>修改master配置文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##主从数据库配置核心部分</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置同步的binary <span class=\"built_in\">log</span>二进制日志文件名前缀，默认为binlog</span></span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">服务器唯一<span class=\"built_in\">id</span>，默认为1  主数据库和从数据库的server-id不能重复</span></span><br><span class=\"line\">server-id=1          </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##可选配置</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需要主从复制的数据库</span></span><br><span class=\"line\">binlog-do-db=test</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span></span><br><span class=\"line\">binlog-ignore-db=mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">为每个session分配的内存，在事务过程中用来存储二进制日志的缓存</span></span><br><span class=\"line\">binlog_cache_size=1M</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">主从复制的格式（mixed,statement,row，默认格式是statement。建议是设置为row，主从复制时数据更加能够统一）</span></span><br><span class=\"line\">binlog_format=row</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置二进制日志自动删除/过期的天数，避免占用磁盘空间。默认值为0，表示不自动删除。</span></span><br><span class=\"line\">expire_logs_days=7</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class=\"line\">slave_skip_errors=1062</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建一个用户，用来同步（也可以是root）\"><a href=\"#创建一个用户，用来同步（也可以是root）\" class=\"headerlink\" title=\"创建一个用户，用来同步（也可以是root）\"></a>创建一个用户，用来同步（也可以是root）</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">create user &#x27;repl&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改用户权限\"><a href=\"#修改用户权限\" class=\"headerlink\" title=\"修改用户权限\"></a>修改用户权限</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant replication slave on *.* to &#x27;repl&#x27;@&#x27;%&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"刷新权限\"><a href=\"#刷新权限\" class=\"headerlink\" title=\"刷新权限\"></a>刷新权限</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">flush privileges</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看日志以及位置\"><a href=\"#查看日志以及位置\" class=\"headerlink\" title=\"查看日志以及位置\"></a>查看日志以及位置</h4><p>接着执行命令查看并记下binary log二进制日志文件名 File 以及位置 Position的值，需要在从数据库用到：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">show master status</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/mysql%208.0%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210421200137174.png\" alt=\"image-20210421200137174\"></p>\n<h3 id=\"slave配置\"><a href=\"#slave配置\" class=\"headerlink\" title=\"slave配置\"></a>slave配置</h3><h4 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##主从数据库配置核心部分</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置同步的binary <span class=\"built_in\">log</span>二进制日志文件名前缀，默认是binlog</span></span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">服务器唯一ID  主数据库和从数据库的server-id不能重复</span></span><br><span class=\"line\">server-id=2</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##可选配置</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">需要主从复制的数据库</span> </span><br><span class=\"line\">replicate-do-db=test</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span> </span><br><span class=\"line\">binlog-ignore-db=mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">为每个session分配的内存，在事务过程中用来存储二进制日志的缓存</span> </span><br><span class=\"line\">binlog_cache_size=1M</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">主从复制的格式（mixed,statement,row，默认格式是statement。建议是设置为row，主从复制时数据更加能够统一）</span> </span><br><span class=\"line\">binlog_format=row</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置二进制日志自动删除/过期的天数，避免占用磁盘空间。默认值为0，表示不自动删除。</span> </span><br><span class=\"line\">expire_logs_days=7</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span> </span><br><span class=\"line\">slave_skip_errors=1062</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">relay_log配置中继日志，默认采用 主机名-relay-bin 的方式保存日志文件</span> </span><br><span class=\"line\">relay_log=replicas-mysql-relay-bin</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">log_slave_updates表示slave将复制事件写进自己的二进制日志</span></span><br><span class=\"line\">log_slave_updates=1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">防止改变数据(只读操作，除了特殊的线程)</span></span><br><span class=\"line\">read_only=1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"与master建立联系\"><a href=\"#与master建立联系\" class=\"headerlink\" title=\"与master建立联系\"></a>与master建立联系</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">change master to MASTER_HOST=&#x27;master_ip&#x27;,MASTER_PORT=master_port,MASTER_USER=&#x27;repl&#x27;,MASTER_PASSWORD=&#x27;123456&#x27;,MASTER_LOG_FILE=&#x27;mysql-bin.000001&#x27;,MASTER_LOG_POS=116990;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>MASTER_HOST：主数据库的主机ip</li>\n<li>MASTER_PORT：主数据库的端口，不设置则默认是3306</li>\n<li>MASTER_USER：主数据库被授予同步复制权限的用户名</li>\n<li>MASTER_PASSWORD：对应的用户密码</li>\n<li>MASTER_LOG_FILE：在主数据库执行命令<code>show master status</code> 查询到的二进制日志文件名称</li>\n<li>MASTER_LOG_POS：在主数据库执行命令<code>show master status</code> 查询到的位置 Position的值</li>\n</ul>\n<h4 id=\"开启主从复制工作\"><a href=\"#开启主从复制工作\" class=\"headerlink\" title=\"开启主从复制工作\"></a>开启主从复制工作</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">start slave</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看详细信息\"><a href=\"#查看详细信息\" class=\"headerlink\" title=\"查看详细信息\"></a>查看详细信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">show slave status \\G</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/mysql%208.0%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210421201109852.png\" alt=\"image-20210421201109852\"></p>\n<p>假如显示 <code>Slave_IO_Running</code> 和 <code>Slave_SQL_Running</code> 为 <code>Yes</code> ，以及<code>Slave_IO_State</code> 为 <code>Waiting for master to send event</code>，则证明主从复制成功！</p>\n<h4 id=\"停止主从复制\"><a href=\"#停止主从复制\" class=\"headerlink\" title=\"停止主从复制\"></a>停止主从复制</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">stop slave</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基于全局事务标识符（GTID）的方法\"><a href=\"#基于全局事务标识符（GTID）的方法\" class=\"headerlink\" title=\"基于全局事务标识符（GTID）的方法\"></a>基于全局事务标识符（GTID）的方法</h2><h3 id=\"master配置-1\"><a href=\"#master配置-1\" class=\"headerlink\" title=\"master配置\"></a>master配置</h3><h4 id=\"修改master-配置文件\"><a href=\"#修改master-配置文件\" class=\"headerlink\" title=\"修改master 配置文件\"></a>修改master 配置文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##主从数据库配置核心部分</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置同步的binary <span class=\"built_in\">log</span>二进制日志文件名前缀，默认为binlog</span></span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">服务器唯一<span class=\"built_in\">id</span>，默认为1  主数据库和从数据库的server-id不能重复</span></span><br><span class=\"line\">server-id=1     </span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开启 GTID</span></span><br><span class=\"line\">gtid_mode=on</span><br><span class=\"line\">enforce_gtid_consistency=true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建同步用户-与上面一样\"><a href=\"#创建同步用户-与上面一样\" class=\"headerlink\" title=\"创建同步用户(与上面一样)\"></a>创建同步用户(与上面一样)</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">create user &#x27;repl&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"授权用户\"><a href=\"#授权用户\" class=\"headerlink\" title=\"授权用户\"></a>授权用户</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant replication slave on *.* to &#x27;repl&#x27;@&#x27;%&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"刷新权限-1\"><a href=\"#刷新权限-1\" class=\"headerlink\" title=\"刷新权限\"></a>刷新权限</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">flush privileges</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">show master status \\G</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/mysql%208.0%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210421201724219.png\" alt=\"image-20210421201724219\"></p>\n<p>对比发现与基于二进制日志文件的方法不同的是<code>Executed_Gtid_Set</code>会有一个具体的全局事务id值</p>\n<h3 id=\"slave配置-1\"><a href=\"#slave配置-1\" class=\"headerlink\" title=\"slave配置\"></a>slave配置</h3><h4 id=\"修改配置文件-1\"><a href=\"#修改配置文件-1\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##主从数据库配置核心部分</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置同步的binary <span class=\"built_in\">log</span>二进制日志文件名前缀，默认是binlog</span></span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">服务器唯一ID  主数据库和从数据库的server-id不能重复</span></span><br><span class=\"line\">server-id=2</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开启 GTID</span></span><br><span class=\"line\">gtid_mode=on</span><br><span class=\"line\">enforce_gtid_consistency=true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建关联\"><a href=\"#创建关联\" class=\"headerlink\" title=\"创建关联\"></a>创建关联</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">change master to MASTER_HOST=&#x27;master_ip&#x27;,MASTER_PORT=master_port,MASTER_USER=&#x27;repl&#x27;,MASTER_PASSWORD=&#x27;123456&#x27;,MASTER_AUTO_POSITION=1;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看状态-1\"><a href=\"#查看状态-1\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">show slave status</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/mysql%208.0%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210421202116234.png\" alt=\"image-20210421202116234\"></p>\n<p>假如显示 <code>Slave_IO_Running</code> 和 <code>Slave_SQL_Running</code> 为 <code>Yes</code> ，以及<code>Slave_IO_State</code> 为 <code>Waiting for master to send event</code>，则证明主从复制成功！</p>\n","categories":["mysql"],"tags":["mysql","主从备份"]},{"title":"linux磁盘满,清理后空间占用率还是很高,解决方案","url":"/post/4c3a939d.html","content":"<h2 id=\"问题现象\"><a href=\"#问题现象\" class=\"headerlink\" title=\"问题现象\"></a>问题现象</h2><p>之前由于日志文件,导致磁盘满了.删除log日志后,查看发现磁盘占用率还是很满</p>\n<p><img data-src=\"/../images/linux%E7%A3%81%E7%9B%98%E6%BB%A1-%E6%B8%85%E7%90%86%E5%90%8E%E7%A9%BA%E9%97%B4%E5%8D%A0%E7%94%A8%E7%8E%87%E8%BF%98%E6%98%AF%E5%BE%88%E9%AB%98-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20230316160733238.png\" alt=\"image-20230316160733238\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>通常不会出现删除文件后空间不释放的情况，但是也存在例外，比如文件进程锁定，或者有进程一直在向这个文件写数据，要明白这个问题，首先需要知道 linux 下文件的存储机制和存储结构。</p>\n<p>一个文件在文件系统中存放分为两个部分：</p>\n<p>指针部分：指针位于文件系统的meta-data中，在将数据删除后，这个指针就从meta-data中清除了。<br>数据部分：而数据部分存储在磁盘中。<br>将数据对应的指针从meta-data中清除后，文件数据部分占用的空间就可以被覆盖并写入新的内容。之所以出现删除log文件后，空间还没有释放，就是因为进程还在一直向这个文件写入内容，导致虽然删除了log文件，但是由于进程锁定，文件对应的指针部分并未从meta-data中清除，而由于指针并未删除，系统内核就默认文件并未被删除，因此查询文件系统使用率时，显示空间并未释放。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>输入命令<code>lsof -n |grep delete</code></p>\n<p><img data-src=\"/../images/linux%E7%A3%81%E7%9B%98%E6%BB%A1-%E6%B8%85%E7%90%86%E5%90%8E%E7%A9%BA%E9%97%B4%E5%8D%A0%E7%94%A8%E7%8E%87%E8%BF%98%E6%98%AF%E5%BE%88%E9%AB%98-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20230316161639586.png\" alt=\"image-20230316161639586\"></p>\n<p>可以看到进程被锁住了.所以我们只需要kill掉进程就好了.</p>\n","categories":["linux"],"tags":["linux","磁盘空间"]},{"title":"ospf基本命令","url":"/post/87db578c.html","content":"<h3 id=\"OSPF基本命令\"><a href=\"#OSPF基本命令\" class=\"headerlink\" title=\"OSPF基本命令\"></a>OSPF基本命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ospf 1 router-id 1.1.1.1   # 开启ospf.进程号为1手动配置Router ID</span><br><span class=\"line\">area 0/0.0.0.0  # 配置区域</span><br><span class=\"line\">network 192.168.1.0 0.0.0.255 # 宣告网络使用反掩码来匹配(255.255.255.255-掩码)</span><br><span class=\"line\">display ospf peer [brief] # 显示OSPF邻居信息</span><br><span class=\"line\">ospf timer hello 10 # 修改hello包发送间隔</span><br><span class=\"line\">ospf timer dead 40 # 修改hello包超时时间</span><br><span class=\"line\">display ospf interface g0/0/0  # 显示OSPF接口信息</span><br><span class=\"line\">ospf dr-priority 100 # 修改OSPF接口优先级</span><br><span class=\"line\">ospf cost 10 # 修改开销,范围1~65535,默认为1</span><br><span class=\"line\">bandwidth-reference 100 # 调整带宽参考值,默认为100Mbps 需要在整个OSPF网络中统一调整</span><br><span class=\"line\">reset ospf process # 重启OSPF进程</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OSPF-认证命令\"><a href=\"#OSPF-认证命令\" class=\"headerlink\" title=\"OSPF 认证命令\"></a>OSPF 认证命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">int g0/0/0 </span><br><span class=\"line\">\tospf authentication-mode md5 1 cipher password # 配置接口认证</span><br><span class=\"line\">\t</span><br><span class=\"line\">ospf 1</span><br><span class=\"line\">\tarea 0</span><br><span class=\"line\">\t \tauthentication-mode md5 1 cipher password # 配置区域认证</span><br><span class=\"line\"><span class=\"meta prompt_\">\t </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2个同时配置 接口优先</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OSPF缺省理由\"><a href=\"#OSPF缺省理由\" class=\"headerlink\" title=\"OSPF缺省理由\"></a>OSPF缺省理由</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip router-static 0.0.0.0 0.0.0.0</span><br><span class=\"line\">default-router-advertise [always] # 发布缺省路由 always参数: 强制发布,不需要路由表事先存在缺省路由</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["OSPF"],"tags":["动态路由","OSPF"]},{"title":"ospf示例","url":"/post/1c903da4.html","content":"<h2 id=\"OSPF简介\"><a href=\"#OSPF简介\" class=\"headerlink\" title=\"OSPF简介\"></a>OSPF简介</h2><p>OSPF（Open Shortest Path First开放式最短路径优先）是IETF组织开发的一个基于链路状态的内部网关协议（Interior Gateway Protocol）。目前针对IPv4协议使用的是OSPF Version 2（RFC2328）。</p>\n<p>OSPF具有适应范围广、收敛快、无自环、区域划分、等价路由、支持验证、组播发送等特点。由于OSPF具有以上优势，使得OSPF作为目前主流的IGP协议被广泛应用于各个行业，例如企业、运营商、政府、金融、教育、医疗等。</p>\n<p>OSPF采用分层设计的结构，并且具有丰富的路由策略控制功能，能够适用于各种不同规模、不同组网结构的应用场景。因此在部署IGP协议的时候，OSPF经常是用户的首选方案。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p>如图组网</p>\n<p><img data-src=\"/../images/ospf%E7%A4%BA%E4%BE%8B/image-20230306094952658.png\" alt=\"image-20230306094952658\"></p>\n<p>配置R1 接口地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[R1]interface e0/0/1\t</span><br><span class=\"line\">[R1-Ethernet0/0/1]ip address 10.10.13.1 24</span><br><span class=\"line\">[R1-Ethernet0/0/1]qu</span><br><span class=\"line\"></span><br><span class=\"line\">[R1]interface g0/0/0</span><br><span class=\"line\">[R1-GigabitEthernet0/0/0]ip address 10.10.12.1 24</span><br><span class=\"line\">[R1-GigabitEthernet0/0/0]qu</span><br><span class=\"line\"></span><br><span class=\"line\">[R1]interface Eth0/0/0\t</span><br><span class=\"line\">[R1-Ethernet0/0/0]ip address 192.168.1.254 24</span><br></pre></td></tr></table></figure>\n\n<p>配置R2 接口地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[R2]interface e0/0/0</span><br><span class=\"line\">[R2-Ethernet0/0/0]ip address 10.10.12.2 24</span><br><span class=\"line\">[R2-Ethernet0/0/0]q</span><br><span class=\"line\"></span><br><span class=\"line\">[R2]interface e0/0/1</span><br><span class=\"line\">[R2-Ethernet0/0/1]ip addr 10.10.23.1 24</span><br><span class=\"line\">[R2-Ethernet0/0/1]q</span><br><span class=\"line\"></span><br><span class=\"line\">[R2]interface g0/0/0</span><br><span class=\"line\">[R2-GigabitEthernet0/0/0]ip address 192.168.2.254 24</span><br><span class=\"line\">[R2-GigabitEthernet0/0/0]qu</span><br></pre></td></tr></table></figure>\n\n<p>配置R3 接口地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[R3]interface e0/0/1</span><br><span class=\"line\">[R3-Ethernet0/0/1]ip address 10.10.23.2 24</span><br><span class=\"line\">[R3-Ethernet0/0/1]qu</span><br><span class=\"line\"></span><br><span class=\"line\">[R3]interface g0/0/0</span><br><span class=\"line\">[R3-GigabitEthernet0/0/0]ip address 192.168.3.254 24</span><br><span class=\"line\">[R3-GigabitEthernet0/0/0]qu</span><br><span class=\"line\"></span><br><span class=\"line\">[R3]interface e0/0/0\t</span><br><span class=\"line\">[R3-Ethernet0/0/0]ip address 10.10.13.2 24</span><br></pre></td></tr></table></figure>\n\n<p>配置PC1</p>\n<p><img data-src=\"/../images/ospf%E7%A4%BA%E4%BE%8B/image-20230306101042688.png\" alt=\"image-20230306101042688\"></p>\n<p>测试PC1到R1</p>\n<p><img data-src=\"/../images/ospf%E7%A4%BA%E4%BE%8B/image-20230306101116244.png\" alt=\"image-20230306101116244\"></p>\n<p>测试PC1到R2</p>\n<p><img data-src=\"/../images/ospf%E7%A4%BA%E4%BE%8B/image-20230306101135542.png\" alt=\"image-20230306101135542\"></p>\n<p>依次配置PC2,PC3</p>\n<p><img data-src=\"/../images/ospf%E7%A4%BA%E4%BE%8B/image-20230306101304755.png\" alt=\"image-20230306101304755\"></p>\n<p><img data-src=\"/../images/ospf%E7%A4%BA%E4%BE%8B/image-20230306101224694.png\" alt=\"image-20230306101224694\"></p>\n<p>配置 R1 OSPF</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[R1]ospf 1\t</span><br><span class=\"line\">[R1]ospf 1 router-id 10.10.10.10\t  //创建进程号为1，Router ID为10.10.10.10的OSPF进程</span><br><span class=\"line\">[R1-ospf-1]area 0 //创建area 0区域并进入area 0视图</span><br><span class=\"line\">[R1-ospf-1-area-0.0.0.0]network 10.10.13.0 0.0.0.255 //配置area 0所包含的网段</span><br><span class=\"line\">[R1-ospf-1-area-0.0.0.0]network 10.10.12.0 0.0.0.255 //对外宣告IP段,也可以是单IP</span><br><span class=\"line\">[R1-ospf-1-area-0.0.0.0]network 192.168.1.0 0.0.0.255</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/ospf%E7%A4%BA%E4%BE%8B/image-20230306102323793.png\" alt=\"image-20230306102323793\"></p>\n<p>配置R2 OSPF</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[R2]ospf 1 router-id 20.20.20.20\t</span><br><span class=\"line\">[R2-ospf-1]area 0</span><br><span class=\"line\">[R2-ospf-1-area-0.0.0.0]network 10.10.12.0 0.0.0.255</span><br><span class=\"line\">[R2-ospf-1-area-0.0.0.0]network 10.10.23.0 0.0.0.255</span><br><span class=\"line\">[R2-ospf-1-area-0.0.0.0]network 192.168.2.0 0.0.0.255</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/ospf%E7%A4%BA%E4%BE%8B/image-20230306102736202.png\" alt=\"image-20230306102736202\"></p>\n<p>查看可发现已有邻居</p>\n<p><img data-src=\"/../images/ospf%E7%A4%BA%E4%BE%8B/image-20230306102807862.png\" alt=\"image-20230306102807862\"></p>\n<p>配置R3 OSPF</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[R3]ospf 1 router-id 30.30.30.30</span><br><span class=\"line\">[R3-ospf-1]area 0</span><br><span class=\"line\">[R3-ospf-1-area-0.0.0.0]network 10.10.13.0 0.0.0.255</span><br><span class=\"line\">[R3-ospf-1-area-0.0.0.0]network 10.10.23.0 0.0.0.255\t</span><br><span class=\"line\">[R3-ospf-1-area-0.0.0.0]network 192.168.3.0 0.0.0.255</span><br></pre></td></tr></table></figure>\n\n<p>查看邻居</p>\n<p><img data-src=\"/../images/ospf%E7%A4%BA%E4%BE%8B/image-20230306103539028.png\" alt=\"image-20230306103539028\"></p>\n<p>然后我们用PC1测试</p>\n<p><img data-src=\"/../images/ospf%E7%A4%BA%E4%BE%8B/image-20230306105214890.png\" alt=\"image-20230306105214890\"></p>\n<p><img data-src=\"/../images/ospf%E7%A4%BA%E4%BE%8B/image-20230306105225679.png\" alt=\"image-20230306105225679\"></p>\n<p>然后我们把R1到R2的线断了</p>\n<p>断之前</p>\n<p><img data-src=\"/../images/ospf%E7%A4%BA%E4%BE%8B/image-20230306105508480.png\" alt=\"image-20230306105508480\"></p>\n<p><img data-src=\"/../images/ospf%E7%A4%BA%E4%BE%8B/image-20230306105305401.png\" alt=\"image-20230306105305401\"></p>\n<p>断了之后</p>\n<p><img data-src=\"/../images/ospf%E7%A4%BA%E4%BE%8B/image-20230306105338791.png\" alt=\"image-20230306105338791\"></p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>R1</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;R1&gt;dis cu </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">sysname R1</span></span><br><span class=\"line\">interface Ethernet0/0/0</span><br><span class=\"line\"> ip address 192.168.1.254 255.255.255.0</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">interface Ethernet0/0/1</span></span><br><span class=\"line\"> ip address 10.10.13.1 255.255.255.0</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">interface GigabitEthernet0/0/0</span></span><br><span class=\"line\"> ip address 10.10.12.1 255.255.255.0</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">ospf 1 router-id 10.10.10.10</span></span><br><span class=\"line\"> area 0.0.0.0</span><br><span class=\"line\">  network 10.10.13.0 0.0.0.255</span><br><span class=\"line\">  network 10.10.12.0 0.0.0.255</span><br><span class=\"line\">  network 192.168.1.0 0.0.0.255</span><br><span class=\"line\">return</span><br></pre></td></tr></table></figure>\n\n<p>R2</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;R2&gt;dis cu </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">sysname R2</span></span><br><span class=\"line\">interface Ethernet0/0/0</span><br><span class=\"line\"> ip address 10.10.12.2 255.255.255.0</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">interface Ethernet0/0/1</span></span><br><span class=\"line\"> ip address 10.10.23.1 255.255.255.0</span><br><span class=\"line\">interface GigabitEthernet0/0/0</span><br><span class=\"line\"> ip address 192.168.2.254 255.255.255.0</span><br><span class=\"line\">ospf 1 router-id 20.20.20.20</span><br><span class=\"line\"> area 0.0.0.0</span><br><span class=\"line\">  network 10.10.12.0 0.0.0.255</span><br><span class=\"line\">  network 10.10.23.0 0.0.0.255</span><br><span class=\"line\">  network 192.168.2.0 0.0.0.255</span><br><span class=\"line\">return</span><br></pre></td></tr></table></figure>\n\n<p>R3</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;R3&gt;dis cu</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">sysname R3</span></span><br><span class=\"line\">interface Ethernet0/0/0</span><br><span class=\"line\"> ip address 10.10.13.2 255.255.255.0</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">interface Ethernet0/0/1</span></span><br><span class=\"line\"> ip address 10.10.23.2 255.255.255.0</span><br><span class=\"line\">interface GigabitEthernet0/0/0</span><br><span class=\"line\"> ip address 192.168.3.254 255.255.255.0</span><br><span class=\"line\">ospf 1 router-id 30.30.30.30</span><br><span class=\"line\"> area 0.0.0.0</span><br><span class=\"line\">  network 10.10.13.0 0.0.0.255</span><br><span class=\"line\">  network 10.10.23.0 0.0.0.255</span><br><span class=\"line\">  network 192.168.3.0 0.0.0.255</span><br><span class=\"line\">return</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["交换机"],"tags":["交换机","ospf"]},{"title":"Pandas入门","url":"/post/dc90dbaf.html","content":"<p>Pandas 是 Python 的核心数据分析支持库，提供了快速、灵活、明确的数据结构，旨在简单、直观地处理关系型、标记型数据。Pandas 的目标是成为 Python 数据分析实践与实战的必备高级工具，其长远目标是成为最强大、最灵活、可以支持任何语言的开源数据分析工具。经过多年不懈的努力，Pandas 离这个目标已经越来越近了。</p>\n<p>Pandas 适用于处理以下类型的数据：</p>\n<ul>\n<li>与 SQL 或 Excel 表类似的，含异构列的表格数据;</li>\n<li>有序和无序（非固定频率）的时间序列数据;</li>\n<li>带行列标签的矩阵数据，包括同构或异构型数据;</li>\n<li>任意其它形式的观测、统计数据集, 数据转入 Pandas 数据结构时不必事先标记。</li>\n</ul>\n<p>Pandas 的主要数据结构是 Series（一维数据）与 DataFrame（二维数据），这两种数据结构足以处理金融、统计、社会科学、工程等领域里的大多数典型用例。对于 R 用户，DataFrame 提供了比 R 语言 data.frame 更丰富的功能。Pandas 基于 NumPy 开发，可以与其它第三方科学计算支持库完美集成。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Pandas-数据结构\"><a href=\"#Pandas-数据结构\" class=\"headerlink\" title=\"Pandas 数据结构\"></a>Pandas 数据结构</h2><h3 id=\"Series\"><a href=\"#Series\" class=\"headerlink\" title=\"Series\"></a>Series</h3><p>Series是一种类似于一维数组的对象，由下面两个部分组成：</p>\n<ul>\n<li>values：一组数据（ndarray类型）</li>\n<li>index：相关的数据索引标签</li>\n</ul>\n<h4 id=\"Series的创建\"><a href=\"#Series的创建\" class=\"headerlink\" title=\"Series的创建\"></a>Series的创建</h4><h5 id=\"由列表或numpy数组创建\"><a href=\"#由列表或numpy数组创建\" class=\"headerlink\" title=\"由列表或numpy数组创建\"></a>由列表或numpy数组创建</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pandas <span class=\"keyword\">import</span> Series</span><br><span class=\"line\">l = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>)]</span><br><span class=\"line\">s = Series(l,index=<span class=\"built_in\">list</span>(<span class=\"string\">&#x27;abcdef&#x27;</span>))</span><br><span class=\"line\">s</span><br><span class=\"line\"></span><br><span class=\"line\">a    <span class=\"number\">0</span></span><br><span class=\"line\">b    <span class=\"number\">1</span></span><br><span class=\"line\">c    <span class=\"number\">2</span></span><br><span class=\"line\">d    <span class=\"number\">3</span></span><br><span class=\"line\">e    <span class=\"number\">4</span></span><br><span class=\"line\">f    <span class=\"number\">5</span></span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 还可以通过设置index参数指定索引</span></span><br><span class=\"line\">s.index = [<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>,<span class=\"number\">12</span>]</span><br><span class=\"line\">s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>     <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">4</span>     <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">6</span>     <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">8</span>     <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">10</span>    <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">12</span>    <span class=\"number\">5</span></span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"由字典创建\"><a href=\"#由字典创建\" class=\"headerlink\" title=\"由字典创建\"></a>由字典创建</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 字典的key对应Series的索引</span></span><br><span class=\"line\">s = Series(&#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">1</span>, <span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">2</span>, <span class=\"string\">&#x27;c&#x27;</span>:<span class=\"number\">3</span>, <span class=\"string\">&#x27;d&#x27;</span>: <span class=\"number\">4</span>&#125;)</span><br><span class=\"line\">s</span><br><span class=\"line\"></span><br><span class=\"line\">a    <span class=\"number\">1</span></span><br><span class=\"line\">b    <span class=\"number\">2</span></span><br><span class=\"line\">c    <span class=\"number\">3</span></span><br><span class=\"line\">d    <span class=\"number\">4</span></span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Series的索引和切片\"><a href=\"#Series的索引和切片\" class=\"headerlink\" title=\"Series的索引和切片\"></a>Series的索引和切片</h4><p>可以使用中括号取单个索引（此时返回的是元素类型），或者中括号里一个列表取多个索引（此时返回的仍然是一个Series类型）。分为显示索引和隐式索引：</p>\n<h5 id=\"显式索引：\"><a href=\"#显式索引：\" class=\"headerlink\" title=\"显式索引：\"></a>显式索引：</h5><ul>\n<li>使用index中的元素作为索引值</li>\n<li>使用.loc[]（推荐）</li>\n</ul>\n<p>注意，此时是闭区间</p>\n<p><img data-src=\"/../images/pandas%E5%85%A5%E9%97%A8/image-20220710110343599.png\" alt=\"image-20220710110343599\"></p>\n<h5 id=\"隐式索引：\"><a href=\"#隐式索引：\" class=\"headerlink\" title=\"隐式索引：\"></a>隐式索引：</h5><ul>\n<li>使用整数作为索引值</li>\n<li>使用.iloc[]（推荐）</li>\n</ul>\n<p>注意，此时是半开区间</p>\n<p><img data-src=\"/../images/pandas%E5%85%A5%E9%97%A8/image-20220710110727110.png\" alt=\"image-20220710110727110\"></p>\n<h4 id=\"Series的基本概念\"><a href=\"#Series的基本概念\" class=\"headerlink\" title=\"Series的基本概念\"></a>Series的基本概念</h4><p>可以把Series看成一个定长的有序字典</p>\n<p>可以通过shape，size，index,values等得到series的属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">s</span><br><span class=\"line\"></span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    3</span><br><span class=\"line\">d    4</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">s.shape</span><br><span class=\"line\">(<span class=\"number\">4</span>,)</span><br><span class=\"line\"></span><br><span class=\"line\">s.size</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.index</span><br><span class=\"line\">Index([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>], dtype=<span class=\"string\">&#x27;object&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">s.values</span><br><span class=\"line\">array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], dtype=int64)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以通过head(),tail()快速查看Series对象的样式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">s.head(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">a    <span class=\"number\">1</span></span><br><span class=\"line\">b    <span class=\"number\">2</span></span><br><span class=\"line\">c    <span class=\"number\">3</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">s.tail(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">a    <span class=\"number\">1</span></span><br><span class=\"line\">b    <span class=\"number\">2</span></span><br><span class=\"line\">c    <span class=\"number\">3</span></span><br><span class=\"line\">d    <span class=\"number\">4</span></span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure>\n\n<p>当索引没有对应的值时，可能出现缺失数据显示NaN（not a number）的情况</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">s.loc[<span class=\"number\">0</span>] = np.nan</span><br><span class=\"line\"></span><br><span class=\"line\">a    <span class=\"number\">1.0</span></span><br><span class=\"line\">b    <span class=\"number\">2.0</span></span><br><span class=\"line\">c    <span class=\"number\">3.0</span></span><br><span class=\"line\">d    <span class=\"number\">4.0</span></span><br><span class=\"line\"><span class=\"number\">0</span>    NaN</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n\n<p>可以使用pd.isnull()，pd.notnull()，或自带isnull(),notnull()函数检测缺失数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">pd.isnull(s)</span><br><span class=\"line\"></span><br><span class=\"line\">a    <span class=\"literal\">False</span></span><br><span class=\"line\">b    <span class=\"literal\">False</span></span><br><span class=\"line\">c    <span class=\"literal\">False</span></span><br><span class=\"line\">d    <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"number\">0</span>     <span class=\"literal\">True</span></span><br><span class=\"line\">dtype: <span class=\"built_in\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pd.notnull(s)</span><br><span class=\"line\">a     <span class=\"literal\">True</span></span><br><span class=\"line\">b     <span class=\"literal\">True</span></span><br><span class=\"line\">c     <span class=\"literal\">True</span></span><br><span class=\"line\">d     <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"number\">0</span>    <span class=\"literal\">False</span></span><br><span class=\"line\">dtype: <span class=\"built_in\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s.isnull()</span><br><span class=\"line\"></span><br><span class=\"line\">a    <span class=\"literal\">False</span></span><br><span class=\"line\">b    <span class=\"literal\">False</span></span><br><span class=\"line\">c    <span class=\"literal\">False</span></span><br><span class=\"line\">d    <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"number\">0</span>     <span class=\"literal\">True</span></span><br><span class=\"line\">dtype: <span class=\"built_in\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s.notnull()</span><br><span class=\"line\">a     <span class=\"literal\">True</span></span><br><span class=\"line\">b     <span class=\"literal\">True</span></span><br><span class=\"line\">c     <span class=\"literal\">True</span></span><br><span class=\"line\">d     <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"number\">0</span>    <span class=\"literal\">False</span></span><br><span class=\"line\">dtype: <span class=\"built_in\">bool</span></span><br></pre></td></tr></table></figure>\n\n<p>Series对象本身及其实例都有一个name属性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">s.name = <span class=\"string\">&#x27;Series s&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">s</span><br><span class=\"line\"></span><br><span class=\"line\">a    <span class=\"number\">1.0</span></span><br><span class=\"line\">b    <span class=\"number\">2.0</span></span><br><span class=\"line\">c    <span class=\"number\">3.0</span></span><br><span class=\"line\">d    <span class=\"number\">4.0</span></span><br><span class=\"line\"><span class=\"number\">0</span>    NaN</span><br><span class=\"line\">Name: Series s, dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">Series.name = <span class=\"string\">&#x27;Name&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">s</span><br><span class=\"line\"></span><br><span class=\"line\">a    <span class=\"number\">1.0</span></span><br><span class=\"line\">b    <span class=\"number\">2.0</span></span><br><span class=\"line\">c    <span class=\"number\">3.0</span></span><br><span class=\"line\">d    <span class=\"number\">4.0</span></span><br><span class=\"line\"><span class=\"number\">0</span>    NaN</span><br><span class=\"line\">Name: Series s, dtype: float64</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Series的运算\"><a href=\"#Series的运算\" class=\"headerlink\" title=\"Series的运算\"></a>Series的运算</h4><h5 id=\"适用于numpy的数组运算也适用于Series\"><a href=\"#适用于numpy的数组运算也适用于Series\" class=\"headerlink\" title=\"适用于numpy的数组运算也适用于Series\"></a>适用于numpy的数组运算也适用于Series</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">s + <span class=\"number\">1</span> </span><br><span class=\"line\"></span><br><span class=\"line\">a    <span class=\"number\">2.0</span></span><br><span class=\"line\">b    <span class=\"number\">3.0</span></span><br><span class=\"line\">c    <span class=\"number\">4.0</span></span><br><span class=\"line\">d    <span class=\"number\">5.0</span></span><br><span class=\"line\"><span class=\"number\">0</span>    NaN</span><br><span class=\"line\">Name: Series s, dtype: float64</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Series之间的运算\"><a href=\"#Series之间的运算\" class=\"headerlink\" title=\"Series之间的运算\"></a>Series之间的运算</h5><ul>\n<li>在运算中自动对齐不同索引的数据</li>\n<li>如果索引不对应，则补NaN</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">s1 = Series(np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">10</span>,size=<span class=\"number\">4</span>),index=np.arange(<span class=\"number\">0</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">s1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>    <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span>    <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"number\">3</span></span><br><span class=\"line\">dtype: int32</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s2 = Series(np.random.randint(<span class=\"number\">0</span>, <span class=\"number\">10</span>, size=<span class=\"number\">4</span>), index=np.arange(<span class=\"number\">2</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">s2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>    <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">5</span>    <span class=\"number\">9</span></span><br><span class=\"line\">dtype: int32</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s1 + s2</span><br><span class=\"line\"><span class=\"comment\"># 相同的索引进行运算,不同的索引补NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>     NaN</span><br><span class=\"line\"><span class=\"number\">1</span>     NaN</span><br><span class=\"line\"><span class=\"number\">2</span>    <span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"number\">3</span>     <span class=\"number\">7.0</span></span><br><span class=\"line\"><span class=\"number\">4</span>     NaN</span><br><span class=\"line\"><span class=\"number\">5</span>     NaN</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意：要想保留所有的index，则需要使用.add()函数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用pandas封装的运算函数,保留所有index对应value</span></span><br><span class=\"line\">s1.add(s2, fill_value=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>     <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">1</span>     <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">2</span>    <span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"number\">3</span>     <span class=\"number\">7.0</span></span><br><span class=\"line\"><span class=\"number\">4</span>     <span class=\"number\">7.0</span></span><br><span class=\"line\"><span class=\"number\">5</span>     <span class=\"number\">9.0</span></span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DataFrame\"><a href=\"#DataFrame\" class=\"headerlink\" title=\"DataFrame\"></a>DataFrame</h3><p>DataFrame是一个【表格型】的数据结构，可以看做是【由Series组成的字典】（共用同一个索引）。DataFrame由按一定顺序排列的多列数据组成。设计初衷是将Series的使用场景从一维拓展到二维。DataFrame既有行索引，也有列索引。</p>\n<ul>\n<li>行索引：index</li>\n<li>列索引：columns</li>\n<li>值：values（numpy的二维数组）</li>\n</ul>\n<h4 id=\"DataFrame的创建\"><a href=\"#DataFrame的创建\" class=\"headerlink\" title=\"DataFrame的创建\"></a>DataFrame的创建</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span>  pandas <span class=\"keyword\">import</span> DataFrame</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分块创建</span></span><br><span class=\"line\">data = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">150</span>, size=(<span class=\"number\">4</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\">index = [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"string\">&#x27;赵六&#x27;</span>]</span><br><span class=\"line\">columns = [<span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>,<span class=\"string\">&#x27;python&#x27;</span>]</span><br><span class=\"line\">df = DataFrame(data=data, index=index, columns=columns)</span><br><span class=\"line\">df</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字典创建</span></span><br><span class=\"line\">df = DataFrame(&#123;<span class=\"string\">&#x27;语文&#x27;</span>: np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">150</span>, size=<span class=\"number\">4</span>), <span class=\"string\">&#x27;数学&#x27;</span>: np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">150</span>, size=<span class=\"number\">4</span>), <span class=\"string\">&#x27;英语&#x27;</span>: np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">150</span>, size=<span class=\"number\">4</span>), <span class=\"string\">&#x27;python&#x27;</span>: np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">150</span>, size=<span class=\"number\">4</span>)&#125;,</span><br><span class=\"line\">              )</span><br><span class=\"line\"></span><br><span class=\"line\">df.index = [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"string\">&#x27;赵六&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/pandas%E5%85%A5%E9%97%A8/image-20220710143524992.png\" alt=\"image-20220710143524992\"></p>\n<p>DataFrame属性：values、columns、index、shape</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">df.values</span><br><span class=\"line\">array([[ <span class=\"number\">74</span>,  <span class=\"number\">19</span>, <span class=\"number\">132</span>, <span class=\"number\">116</span>],</span><br><span class=\"line\">       [ <span class=\"number\">43</span>,  <span class=\"number\">90</span>,  <span class=\"number\">16</span>,  <span class=\"number\">42</span>],</span><br><span class=\"line\">       [<span class=\"number\">135</span>,  <span class=\"number\">37</span>,  <span class=\"number\">58</span>,  <span class=\"number\">42</span>],</span><br><span class=\"line\">       [ <span class=\"number\">91</span>,   <span class=\"number\">9</span>, <span class=\"number\">104</span>,  <span class=\"number\">51</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">df.columns</span><br><span class=\"line\">Index([<span class=\"string\">&#x27;语文&#x27;</span>, <span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"string\">&#x27;python&#x27;</span>], dtype=<span class=\"string\">&#x27;object&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df.index</span><br><span class=\"line\">Index([<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"string\">&#x27;赵六&#x27;</span>], dtype=<span class=\"string\">&#x27;object&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df.shape</span><br><span class=\"line\">(<span class=\"number\">4</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DataFrame的索引\"><a href=\"#DataFrame的索引\" class=\"headerlink\" title=\"DataFrame的索引\"></a>DataFrame的索引</h4><h5 id=\"对列进行索引\"><a href=\"#对列进行索引\" class=\"headerlink\" title=\"对列进行索引\"></a>对列进行索引</h5><ul>\n<li>通过类似字典的方式</li>\n<li>通过属性的方式</li>\n</ul>\n<p>可以将DataFrame的列获取为一个Series。返回的Series拥有原DataFrame相同的索引，且name属性也已经设置好了，就是相应的列名。</p>\n<p><img data-src=\"/../images/pandas%E5%85%A5%E9%97%A8/image-20220710150634683.png\" alt=\"image-20220710150634683\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">df[<span class=\"string\">&#x27;语文&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">张三     <span class=\"number\">30</span></span><br><span class=\"line\">李四     <span class=\"number\">17</span></span><br><span class=\"line\">王五     <span class=\"number\">77</span></span><br><span class=\"line\">赵六    <span class=\"number\">102</span></span><br><span class=\"line\">Name: Name, dtype: int32</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">df.语文</span><br><span class=\"line\"></span><br><span class=\"line\">张三     <span class=\"number\">74</span></span><br><span class=\"line\">李四     <span class=\"number\">43</span></span><br><span class=\"line\">王五    <span class=\"number\">135</span></span><br><span class=\"line\">赵六     <span class=\"number\">91</span></span><br><span class=\"line\">Name: 语文, dtype: int32</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新增一列</span></span><br><span class=\"line\">df[<span class=\"string\">&#x27;计算机&#x27;</span>] = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">150</span>, size=<span class=\"number\">4</span>)</span><br><span class=\"line\">df</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/pandas%E5%85%A5%E9%97%A8/image-20220710150748057.png\" alt=\"image-20220710150748057\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新增一列的时候不能使用属性的写法</span></span><br><span class=\"line\"><span class=\"comment\"># df.理综 = np.random.randint(0,150, size=4)</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/pandas%E5%85%A5%E9%97%A8/image-20220710150955679.png\" alt=\"image-20220710150955679\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列切片</span></span><br><span class=\"line\">df[<span class=\"string\">&#x27;数学 &#x27;</span>: <span class=\"string\">&#x27;python&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 直接使用中括号,接冒号,是在进行行切片.</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/pandas%E5%85%A5%E9%97%A8/image-20220710151053690.png\" alt=\"image-20220710151053690\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">df[[<span class=\"string\">&#x27;数学&#x27;</span>, <span class=\"string\">&#x27;英语&#x27;</span>, <span class=\"string\">&#x27;python&#x27;</span>]]</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/pandas%E5%85%A5%E9%97%A8/image-20220710151113939.png\" alt=\"image-20220710151113939\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">df.iloc[:, <span class=\"number\">1</span>:<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/pandas%E5%85%A5%E9%97%A8/image-20220710151217348.png\" alt=\"image-20220710151217348\"></p>\n<h5 id=\"对行进行索引\"><a href=\"#对行进行索引\" class=\"headerlink\" title=\"对行进行索引\"></a>对行进行索引</h5><ul>\n<li>使用.loc[]加index来进行行索引</li>\n<li>使用.iloc[]加整数来进行行索引</li>\n</ul>\n<p>同样返回一个Series，index为原来的columns。</p>\n<p><img data-src=\"/../images/pandas%E5%85%A5%E9%97%A8/image-20220710151857311.png\" alt=\"image-20220710151857311\"></p>\n<h5 id=\"对元素进行索引\"><a href=\"#对元素进行索引\" class=\"headerlink\" title=\"对元素进行索引\"></a>对元素进行索引</h5><ul>\n<li><p>使用列索引 </p>\n</li>\n<li><p>使用行索引(iloc[3,1]相当于两个参数;iloc[[3,3]] 里面的[3,3]看做一个参数) </p>\n</li>\n<li><p>使用values属性（二维numpy数组）</p>\n</li>\n</ul>\n<p><img data-src=\"/../images/pandas%E5%85%A5%E9%97%A8/image-20220710152641101.png\" alt=\"image-20220710152641101\"></p>\n<h5 id=\"DataFrame-索引总结\"><a href=\"#DataFrame-索引总结\" class=\"headerlink\" title=\"DataFrame 索引总结\"></a>DataFrame 索引总结</h5><ol>\n<li>行索引用.loc, 列索索引用中括号.</li>\n<li>对元素的索引,先索引行,再索引列. df.loc[index, columns]</li>\n<li>如果还想返回DataFrame,那么使用两层中括号.</li>\n</ol>\n<p>【注意】 直接用中括号时：</p>\n<ul>\n<li>索引表示的是列索引</li>\n<li>切片表示的是行切片</li>\n</ul>\n<h4 id=\"DataFrame的运算\"><a href=\"#DataFrame的运算\" class=\"headerlink\" title=\"DataFrame的运算\"></a>DataFrame的运算</h4><h5 id=\"DataFrame之间的运算\"><a href=\"#DataFrame之间的运算\" class=\"headerlink\" title=\"DataFrame之间的运算\"></a>DataFrame之间的运算</h5><p>同Series一样：</p>\n<ul>\n<li>在运算中自动对齐不同索引的数据</li>\n<li>如果索引不对应，则补NaN</li>\n</ul>\n<h5 id=\"Series与DataFrame之间的运算\"><a href=\"#Series与DataFrame之间的运算\" class=\"headerlink\" title=\"Series与DataFrame之间的运算\"></a>Series与DataFrame之间的运算</h5><p>【重要】</p>\n<ul>\n<li><p>使用Python操作符：以行为单位操作（参数必须是行），对所有行都有效。（类似于numpy中二维数组与一维数组的运算，但可能出现NaN）</p>\n</li>\n<li><p>使用pandas操作函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">axis=<span class=\"number\">0</span>：以列为单位操作（参数必须是列），对所有列都有效。</span><br><span class=\"line\">axis=<span class=\"number\">1</span>：以行为单位操作（参数必须是行），对所有行都有效。</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"归纳-总结\"><a href=\"#归纳-总结\" class=\"headerlink\" title=\"归纳,总结\"></a>归纳,总结</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>, DataFrame和单个数字运算,每个元素分别运算.</span><br><span class=\"line\"><span class=\"number\">2</span>, DataFrame和DataFrame运算,相同的行列索引进行运算,不同索引补NaN.</span><br><span class=\"line\"><span class=\"number\">3</span>, DataFrame和Series运算,使用运算符的时候,默认比较DataFrame的列索引和Series的索引.</span><br><span class=\"line\"><span class=\"number\">4</span>, 如果想保留原始数据,或者改变运算的方向,使用pandas封装的方法.</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["Pandas"],"tags":["Pandas","数据分析"]},{"title":"numpy使用","url":"/post/40d74989.html","content":"<p>NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：</p>\n<ul>\n<li>一个强大的N维数组对象 ndarray</li>\n<li>广播功能函数</li>\n<li>整合 C&#x2F;C++&#x2F;Fortran 代码的工具</li>\n<li>线性代数、傅里叶变换、随机数生成等功能</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>通过pip install 安装 <code>numpy</code></p>\n<p><code>pip install numpy</code></p>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><p><code>import numpy as np</code></p>\n<h3 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h3><p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220630161950742.png\" alt=\"image-20220630161950742\"></p>\n<h2 id=\"ndarray\"><a href=\"#ndarray\" class=\"headerlink\" title=\"ndarray\"></a>ndarray</h2><h3 id=\"常用创建方法\"><a href=\"#常用创建方法\" class=\"headerlink\" title=\"常用创建方法\"></a>常用创建方法</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建全是1的ndarray, 默认是float64类型</span></span><br><span class=\"line\"><span class=\"comment\"># np.ones(shape, dtype=None, order=&#x27;C&#x27;)</span></span><br><span class=\"line\">np.ones(shape=(<span class=\"number\">4</span>,<span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704104818993.png\" alt=\"image-20220704104818993\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全是0的ndarray</span></span><br><span class=\"line\"><span class=\"comment\"># np.zeros(shape, dtype=float, order=&#x27;C&#x27;)</span></span><br><span class=\"line\">np.zeros(shape=(<span class=\"number\">4</span>,<span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704105615223.png\" alt=\"image-20220704105615223\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用指定的元素来填充,</span></span><br><span class=\"line\"><span class=\"comment\"># np.full(shape, fill_value, dtype=None, order=&#x27;C&#x27;)</span></span><br><span class=\"line\">np.full(shape=(<span class=\"number\">3</span>,<span class=\"number\">3</span>), fill_value=<span class=\"number\">8</span>, dtype=np.float64)</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704111543026.png\" alt=\"image-20220704111543026\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 等分一个范围</span></span><br><span class=\"line\"><span class=\"comment\"># np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)</span></span><br><span class=\"line\">np.linspace(<span class=\"number\">0</span>, <span class=\"number\">100</span>, num=<span class=\"number\">50</span>, endpoint=<span class=\"literal\">False</span>, retstep=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># endpoint：True则包含stop；False则不包含stop</span></span><br><span class=\"line\"><span class=\"comment\"># retstep : 返回步长,并以元祖输出</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704132615078.png\" alt=\"image-20220704132615078\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 和python的 range一样</span></span><br><span class=\"line\"><span class=\"comment\"># 当step是非整数的时候,尽量使用np.linspace</span></span><br><span class=\"line\"><span class=\"comment\"># np.arange([start, ]stop, [step, ]dtype=None)</span></span><br><span class=\"line\">np.arange(<span class=\"number\">0</span>, <span class=\"number\">100</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704132758892.png\" alt=\"image-20220704132758892\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全是整数的ndarray 左闭右开区间.</span></span><br><span class=\"line\"><span class=\"comment\"># np.random.randint(low, high=None, size=None, dtype=&#x27;l&#x27;)</span></span><br><span class=\"line\">np.random.randint(<span class=\"number\">0</span>,  <span class=\"number\">150</span>, size=(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>), )</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704133905777.png\" alt=\"image-20220704133905777\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 标准正太分布</span></span><br><span class=\"line\"><span class=\"comment\"># 平均值为0, 方差 为1 的正态分布叫做标准正态分布</span></span><br><span class=\"line\"><span class=\"comment\"># np.random.randn(d0, d1, ..., dn)</span></span><br><span class=\"line\">np.random.randn(<span class=\"number\">2</span>,<span class=\"number\">3</span>, <span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># 分为2个大矩阵,然后每个矩阵里又有3个2行3列的小矩阵,</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704142321831.png\" alt=\"image-20220704142321831\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 正态分布</span></span><br><span class=\"line\"><span class=\"comment\"># np.random.normal(loc=0.0, scale=1.0, size=None)</span></span><br><span class=\"line\">np.random.normal(loc=<span class=\"number\">10</span>, scale=<span class=\"number\">3</span>,size=(<span class=\"number\">3</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"comment\"># 均值,标准差,输出维度</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704144755072.png\" alt=\"image-20220704144755072\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成0到1的随机数，左闭右开</span></span><br><span class=\"line\"><span class=\"comment\"># np.random.random(size=None)</span></span><br><span class=\"line\">np.random.random(size=(<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704152400609.png\" alt=\"image-20220704152400609\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 和np.random.random一样</span></span><br><span class=\"line\">np.random.rand(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704152806987.png\" alt=\"image-20220704152806987\"></p>\n<h2 id=\"ndarray的属性\"><a href=\"#ndarray的属性\" class=\"headerlink\" title=\"ndarray的属性\"></a>ndarray的属性</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">4个必记参数：</span><br><span class=\"line\">ndim：维度</span><br><span class=\"line\">shape：形状（各维度的长度）</span><br><span class=\"line\">size：总长度</span><br><span class=\"line\">dtype：元素类型</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704154531580.png\" alt=\"image-20220704154531580\"></p>\n<h2 id=\"ndarray的基本操作\"><a href=\"#ndarray的基本操作\" class=\"headerlink\" title=\"ndarray的基本操作\"></a>ndarray的基本操作</h2><h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><p>一维与列表完全一致 多维时同理</p>\n<p>二维</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">n = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">150</span>, size=(<span class=\"number\">4</span>,<span class=\"number\">5</span>))</span><br><span class=\"line\">n</span><br><span class=\"line\">array([[ <span class=\"number\">77</span>,  <span class=\"number\">14</span>, <span class=\"number\">134</span>,  <span class=\"number\">14</span>,  <span class=\"number\">43</span>],</span><br><span class=\"line\">       [ <span class=\"number\">85</span>, <span class=\"number\">123</span>, <span class=\"number\">124</span>,  <span class=\"number\">91</span>, <span class=\"number\">108</span>],</span><br><span class=\"line\">       [ <span class=\"number\">64</span>,  <span class=\"number\">31</span>,  <span class=\"number\">94</span>,  <span class=\"number\">39</span>,  <span class=\"number\">24</span>],</span><br><span class=\"line\">       [ <span class=\"number\">44</span>,  <span class=\"number\">77</span>,  <span class=\"number\">26</span>,  <span class=\"number\">67</span>,  <span class=\"number\">80</span>]])</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704161835043.png\" alt=\"image-20220704161835043\"></p>\n<p>三维</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">n = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">100</span>, size=(<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">n</span><br><span class=\"line\">array([[[ <span class=\"number\">9</span>, <span class=\"number\">39</span>, <span class=\"number\">23</span>],</span><br><span class=\"line\">        [<span class=\"number\">13</span>, <span class=\"number\">11</span>,  <span class=\"number\">6</span>],</span><br><span class=\"line\">        [<span class=\"number\">60</span>, <span class=\"number\">62</span>, <span class=\"number\">39</span>],</span><br><span class=\"line\">        [<span class=\"number\">76</span>, <span class=\"number\">86</span>, <span class=\"number\">68</span>],</span><br><span class=\"line\">        [<span class=\"number\">24</span>, <span class=\"number\">66</span>, <span class=\"number\">39</span>]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[<span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">95</span>],</span><br><span class=\"line\">        [<span class=\"number\">70</span>,  <span class=\"number\">4</span>, <span class=\"number\">87</span>],</span><br><span class=\"line\">        [<span class=\"number\">45</span>, <span class=\"number\">23</span>, <span class=\"number\">60</span>],</span><br><span class=\"line\">        [<span class=\"number\">46</span>, <span class=\"number\">58</span>, <span class=\"number\">43</span>],</span><br><span class=\"line\">        [<span class=\"number\">85</span>, <span class=\"number\">92</span>, <span class=\"number\">27</span>]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[<span class=\"number\">36</span>, <span class=\"number\">51</span>, <span class=\"number\">87</span>],</span><br><span class=\"line\">        [<span class=\"number\">64</span>, <span class=\"number\">83</span>, <span class=\"number\">24</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>, <span class=\"number\">30</span>, <span class=\"number\">14</span>],</span><br><span class=\"line\">        [<span class=\"number\">22</span>, <span class=\"number\">34</span>,  <span class=\"number\">8</span>],</span><br><span class=\"line\">        [<span class=\"number\">80</span>, <span class=\"number\">49</span>, <span class=\"number\">78</span>]],</span><br><span class=\"line\"></span><br><span class=\"line\">       [[<span class=\"number\">34</span>, <span class=\"number\">44</span>, <span class=\"number\">19</span>],</span><br><span class=\"line\">        [<span class=\"number\">17</span>, <span class=\"number\">20</span>, <span class=\"number\">45</span>],</span><br><span class=\"line\">        [<span class=\"number\">29</span>, <span class=\"number\">71</span>,  <span class=\"number\">4</span>],</span><br><span class=\"line\">        [<span class=\"number\">36</span>, <span class=\"number\">85</span>, <span class=\"number\">70</span>],</span><br><span class=\"line\">        [<span class=\"number\">20</span>,  <span class=\"number\">9</span>, <span class=\"number\">35</span>]]])</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704162631249.png\" alt=\"image-20220704162631249\"></p>\n<h3 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h3><p>一维与列表完全一致 多维时同理</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">n = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">100</span>, size=(<span class=\"number\">4</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\">n </span><br><span class=\"line\">array([[<span class=\"number\">49</span>, <span class=\"number\">27</span>, <span class=\"number\">77</span>, <span class=\"number\">39</span>,  <span class=\"number\">6</span>, <span class=\"number\">33</span>],</span><br><span class=\"line\">       [<span class=\"number\">74</span>, <span class=\"number\">48</span>, <span class=\"number\">88</span>, <span class=\"number\">45</span>, <span class=\"number\">49</span>, <span class=\"number\">96</span>],</span><br><span class=\"line\">       [<span class=\"number\">41</span>, <span class=\"number\">71</span>, <span class=\"number\">81</span>, <span class=\"number\">50</span>, <span class=\"number\">28</span>,  <span class=\"number\">9</span>],</span><br><span class=\"line\">       [<span class=\"number\">69</span>, <span class=\"number\">97</span>, <span class=\"number\">81</span>, <span class=\"number\">85</span>, <span class=\"number\">70</span>, <span class=\"number\">54</span>]])</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704165159077.png\" alt=\"image-20220704165159077\"></p>\n<h3 id=\"变形\"><a href=\"#变形\" class=\"headerlink\" title=\"变形\"></a>变形</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">n</span><br><span class=\"line\">array([[<span class=\"number\">49</span>, <span class=\"number\">27</span>, <span class=\"number\">77</span>, <span class=\"number\">39</span>,  <span class=\"number\">6</span>, <span class=\"number\">33</span>],</span><br><span class=\"line\">       [<span class=\"number\">74</span>, <span class=\"number\">48</span>, <span class=\"number\">88</span>, <span class=\"number\">45</span>, <span class=\"number\">49</span>, <span class=\"number\">96</span>],</span><br><span class=\"line\">       [<span class=\"number\">41</span>, <span class=\"number\">71</span>, <span class=\"number\">81</span>, <span class=\"number\">50</span>, <span class=\"number\">28</span>,  <span class=\"number\">9</span>],</span><br><span class=\"line\">       [<span class=\"number\">69</span>, <span class=\"number\">97</span>, <span class=\"number\">81</span>, <span class=\"number\">85</span>, <span class=\"number\">70</span>, <span class=\"number\">54</span>]])</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704165505336.png\" alt=\"image-20220704165505336\"></p>\n<h3 id=\"级联\"><a href=\"#级联\" class=\"headerlink\" title=\"级联\"></a>级联</h3><p><code>np.concatenate()</code> 级联需要注意的点：</p>\n<ul>\n<li>级联的参数是列表：一定要加中括号或小括号</li>\n<li>维度必须相同</li>\n<li>形状相符</li>\n<li>【重点】级联的方向默认是shape这个tuple的第一个值所代表的维度方向</li>\n<li>可通过axis参数改变级联的方向</li>\n</ul>\n<h4 id=\"垂直级联\"><a href=\"#垂直级联\" class=\"headerlink\" title=\"垂直级联\"></a>垂直级联</h4><p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704170008231.png\" alt=\"image-20220704170008231\"></p>\n<h4 id=\"水平级联\"><a href=\"#水平级联\" class=\"headerlink\" title=\"水平级联\"></a>水平级联</h4><p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704170030568.png\" alt=\"image-20220704170030568\"></p>\n<p><code>np.hstack</code>与<code>np.vstack</code> : 水平级联与垂直级联,处理自己，进行维度的变更</p>\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704170308261.png\" alt=\"image-20220704170308261\"></p>\n<p>级联的基本要求: 垂直级联的时候 ,列数一定要相同, 水平级联行数一定要相同.</p>\n<h3 id=\"切分\"><a href=\"#切分\" class=\"headerlink\" title=\"切分\"></a>切分</h3><p>与级联类似，三个函数完成切分工作：</p>\n<ul>\n<li>np.split</li>\n<li>np.vsplit</li>\n<li>np.hsplit</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">n = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">100</span>, size=(<span class=\"number\">6</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\">n</span><br><span class=\"line\">array([[<span class=\"number\">83</span>, <span class=\"number\">81</span>, <span class=\"number\">77</span>,  <span class=\"number\">2</span>, <span class=\"number\">20</span>, <span class=\"number\">69</span>],</span><br><span class=\"line\">       [<span class=\"number\">49</span>, <span class=\"number\">94</span>,  <span class=\"number\">5</span>, <span class=\"number\">91</span>, <span class=\"number\">71</span>, <span class=\"number\">65</span>],</span><br><span class=\"line\">       [<span class=\"number\">12</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">25</span>, <span class=\"number\">53</span>, <span class=\"number\">90</span>],</span><br><span class=\"line\">       [<span class=\"number\">81</span>, <span class=\"number\">45</span>, <span class=\"number\">89</span>, <span class=\"number\">64</span>, <span class=\"number\">85</span>, <span class=\"number\">45</span>],</span><br><span class=\"line\">       [<span class=\"number\">63</span>, <span class=\"number\">35</span>, <span class=\"number\">52</span>, <span class=\"number\">90</span>, <span class=\"number\">49</span>, <span class=\"number\">82</span>],</span><br><span class=\"line\">       [<span class=\"number\">16</span>, <span class=\"number\">67</span>, <span class=\"number\">24</span>, <span class=\"number\">86</span>, <span class=\"number\">91</span>, <span class=\"number\">42</span>]])</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704172931919.png\" alt=\"image-20220704172931919\"></p>\n<p><img data-src=\"/../images/numpy%E4%BD%BF%E7%94%A8/image-20220704173034060.png\" alt=\"image-20220704173034060\"></p>\n<h2 id=\"ndarray的聚合操作\"><a href=\"#ndarray的聚合操作\" class=\"headerlink\" title=\"ndarray的聚合操作\"></a>ndarray的聚合操作</h2><h3 id=\"求和np-sum\"><a href=\"#求和np-sum\" class=\"headerlink\" title=\"求和np.sum\"></a>求和np.sum</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">n = np.eye(<span class=\"number\">3</span>)</span><br><span class=\"line\">n</span><br><span class=\"line\">array([[<span class=\"number\">1.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.</span>, <span class=\"number\">1.</span>, <span class=\"number\">0.</span>],</span><br><span class=\"line\">       [<span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">1.</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">n.<span class=\"built_in\">sum</span>() <span class=\"comment\"># axis=None 表示所有的维度都聚合成0维</span></span><br><span class=\"line\"><span class=\"number\">3.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># axis=0 表示对行进行聚合操作,行没了,剩下列.</span></span><br><span class=\"line\">n.<span class=\"built_in\">sum</span>(axis=<span class=\"number\">0</span>)</span><br><span class=\"line\">array([<span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># axis=1表示对列进行聚合,列没了,行还在.</span></span><br><span class=\"line\">n.<span class=\"built_in\">sum</span>(axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">array([<span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最大最小值：np-max-x2F-np-min\"><a href=\"#最大最小值：np-max-x2F-np-min\" class=\"headerlink\" title=\"最大最小值：np.max&#x2F; np.min\"></a>最大最小值：np.max&#x2F; np.min</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 同理</span></span><br><span class=\"line\"></span><br><span class=\"line\">n.<span class=\"built_in\">max</span>(axis=<span class=\"number\">0</span>)</span><br><span class=\"line\">array([<span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">n.<span class=\"built_in\">min</span>(axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">array([<span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>])</span><br></pre></td></tr></table></figure>\n\n","categories":["numpy"],"tags":["数据分析","numpy"]},{"title":"ppp协议","url":"/post/4a4c502f.html","content":"<p>PPP协议是在串行线IP协议SLIP（Serial Line Internet Protocol）的基础上发展起来的。由于SLIP协议具有只支持异步传输方式、无协商过程（尤其不能协商如双方IP地址等网络层属性）、只能承载IP一种网络层报文等缺陷，在发展过程中，逐步被PPP协议所替代。</p>\n<p>PPP协议有如下优点：</p>\n<ul>\n<li>对物理层而言，PPP既支持同步链路又支持异步链路，而X.25、FR（Frame Relay）等数据链路层协议仅支持同步链路，SLIP仅支持异步链路。</li>\n<li>PPP协议具有良好的扩展性，例如，当需要在以太网链路上承载PPP协议时，PPP可以扩展为PPPoE。</li>\n<li>提供LCP（Link Control Protocol）协议，用于各种链路层参数的协商。</li>\n<li>提供各种NCP（Network Control Protocol）协议（如IPCP、IPXCP），用于各网络层参数的协商，更好地支持了网络层协议。</li>\n<li>提供认证协议CHAP（Challenge-Handshake Authentication Protocol）、PAP（Password Authentication Protocol），更好的保证了网络的安全性。</li>\n<li>无重传机制，网络开销小，速度快。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">link-protocol ppp  <span class=\"comment\"># 配置接口封装协议,默认</span></span><br><span class=\"line\"><span class=\"comment\"># 认证</span></span><br><span class=\"line\">ppp authentication-mode pap/chap      <span class=\"comment\"># 开启PAP/CHAP认证</span></span><br><span class=\"line\">aaa</span><br><span class=\"line\">\tlocal-user 账号 password cipher 密码 <span class=\"comment\"># 创建PPP 认证用户</span></span><br><span class=\"line\">\tlocal-user 账号 service-type ppp</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 被认证</span></span><br><span class=\"line\">ppp pap local-user 账号 password cipher 密码 <span class=\"comment\"># 配置PAP凭证</span></span><br><span class=\"line\">ppp chap user 账号  <span class=\"comment\"># 配置chap 凭证</span></span><br><span class=\"line\">ppp chap password cipher 密码</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["ppp"],"tags":["ppp","网络"]},{"title":"python-socketio","url":"/post/b788502e.html","content":"<p>Socket.IO is a transport protocol that enables real-time bidirectional event-based communication between clients (typically, though not always, web browsers) and a server. The official implementations of the client and server components are written in JavaScript. This package provides Python implementations of both, each with standard and asyncio variants.</p>\n<p>Socket.IO是一种传输协议,用于 服务器与客户端之间的real-time实时通讯的.是用js写的,python-socketio软件包提供了两种Python的实现方式.一种是异步的一种标准的,但是异步这玩意更新的不完善,有很多坑,所以我们这里还是用标准的.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Eventlet is a concurrent networking library for Python that allows you to change how you run your code, not how you write it.</span></span><br><span class=\"line\"><span class=\"comment\"># 这段摘自官方文档介绍，Evenlet是一个Python的基于携程的网络库，它改变了你代码运行的方式，但是没有改变你怎么写代码</span></span><br><span class=\"line\"><span class=\"comment\"># eventlet 一个是处理和网络相关的，另一个可以通过协程实现并发</span></span><br><span class=\"line\"><span class=\"comment\"># 随eventlet一起部署的Socket.IO服务器可以访问长轮询和WebSocket传输。</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> eventlet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Eventlet提供的monkey_patch()功能可以用等效的异步版本替换标准库中的所有阻塞功能。尽管python-socketio不需要猴子补丁，但其他类库（例如数据库驱动程序）也可能需要它</span></span><br><span class=\"line\">eventlet.monkey_patch()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> socketio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例化服务器</span></span><br><span class=\"line\"><span class=\"comment\"># cors_allowed_origins 跨域请求</span></span><br><span class=\"line\"><span class=\"comment\"># logger,engineio_logger 日志输出方便查看</span></span><br><span class=\"line\">sio = socketio.Server(logger=<span class=\"literal\">True</span>, engineio_logger=<span class=\"literal\">True</span>,cors_allowed_origins=<span class=\"string\">&#x27;*&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 用一个WSGI应用程序封装</span></span><br><span class=\"line\">app = socketio.WSGIApp(sio)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># connect跟disconnect 是特殊的两个事件,连接或断开时会自动调用</span></span><br><span class=\"line\"><span class=\"meta\">@sio.event</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">connect</span>(<span class=\"params\">sid, environ</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;connect &#x27;</span>, sid)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义事件,有两种方式一种是用函数名另一种就是自定义的</span></span><br><span class=\"line\"><span class=\"comment\"># @sio.on(&#x27;my custom event&#x27;)</span></span><br><span class=\"line\"><span class=\"meta\">@sio.event</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_message</span>(<span class=\"params\">sid, data</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;message &#x27;</span>, data)</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 接收客户端发来的消息</span></span><br><span class=\"line\"><span class=\"meta\">@sio.on(<span class=\"params\"><span class=\"string\">&#x27;my response&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">response</span>(<span class=\"params\">sid,data</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(sid)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># connect跟disconnect 是特殊的两个事件,连接或断开时会自动调用</span></span><br><span class=\"line\"><span class=\"meta\">@sio.event</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">disconnect</span>(<span class=\"params\">sid</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;disconnect &#x27;</span>, sid)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    SERVER_ADDRESS = (<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,<span class=\"number\">8000</span>)</span><br><span class=\"line\">    sock = eventlet.listen(SERVER_ADDRESS)</span><br><span class=\"line\">    eventlet.wsgi.server(sock, app)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socketio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例化</span></span><br><span class=\"line\">sio = socketio.Client()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认连接时执行</span></span><br><span class=\"line\"><span class=\"meta\">@sio.event</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">connect</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;connection established&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监听事件</span></span><br><span class=\"line\"><span class=\"meta\">@sio.event</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_message</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;message received with &#x27;</span>, data)</span><br><span class=\"line\">    <span class=\"comment\"># 发送事件sio.emit(对方事件名,data)</span></span><br><span class=\"line\">    sio.emit(<span class=\"string\">&#x27;my response&#x27;</span>, &#123;<span class=\"string\">&#x27;response&#x27;</span>: <span class=\"string\">&#x27;my response&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认断开时执行</span></span><br><span class=\"line\"><span class=\"meta\">@sio.event</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">disconnect</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;disconnected from server&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接</span></span><br><span class=\"line\">sio.connect(<span class=\"string\">&#x27;http://127.0.0.1:8000&#x27;</span>)</span><br><span class=\"line\">sio.wait()</span><br></pre></td></tr></table></figure>\n\n<p>客户端跟服务端搭建好了,那么怎么如何通信呢?</p>\n<p>我们可以通过</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 发送事件sio.emit(对方事件名,data,房间号) 服务端房间号不写的话是群发给客户端</span></span><br><span class=\"line\">sio.emit(<span class=\"string\">&#x27;my response&#x27;</span>, &#123;<span class=\"string\">&#x27;response&#x27;</span>: <span class=\"string\">&#x27;my response&#x27;</span>&#125;,room=sid)</span><br><span class=\"line\"><span class=\"comment\"># emit 发送事件</span></span><br><span class=\"line\"><span class=\"comment\"># send 相当于发送一个message事件,而且是群发的</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用消息队列\"><a href=\"#使用消息队列\" class=\"headerlink\" title=\"使用消息队列\"></a>使用消息队列</h2><h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><p>要使用Redis消息队列，必须安装Python Redis客户端</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># socketio.Server class</span></span><br><span class=\"line\"><span class=\"comment\"># 配置redismanager</span></span><br><span class=\"line\">mgr = socketio.RedisManager(<span class=\"string\">&#x27;redis://&#x27;</span>)</span><br><span class=\"line\">sio = socketio.Server(client_manager=mgr)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 需要安装kombu</span></span><br><span class=\"line\">pip install kombu</span><br><span class=\"line\"></span><br><span class=\"line\">mgr = socketio.KombuManager(<span class=\"string\">&#x27;amqp://&#x27;</span>)</span><br><span class=\"line\">sio = socketio.Server(client_manager=mgr)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从外部发送消息\"><a href=\"#从外部发送消息\" class=\"headerlink\" title=\"从外部发送消息\"></a>从外部发送消息</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># connect to the redis queue as an external process</span></span><br><span class=\"line\"></span><br><span class=\"line\">external_sio = socketio.RedisManager(<span class=\"string\">&#x27;redis://&#x27;</span>, write_only=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># emit an event</span></span><br><span class=\"line\">external_sio.emit(<span class=\"string\">&#x27;my event&#x27;</span>, data=&#123;<span class=\"string\">&#x27;foo&#x27;</span>: <span class=\"string\">&#x27;bar&#x27;</span>&#125;, room=<span class=\"string\">&#x27;my room&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消息队列示例\"><a href=\"#消息队列示例\" class=\"headerlink\" title=\"消息队列示例\"></a>消息队列示例</h2><p>条件有限,我们这里用redis</p>\n<h3 id=\"服务端-1\"><a href=\"#服务端-1\" class=\"headerlink\" title=\"服务端\"></a>服务端</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 服务端其实就起到一个将客户端加入房间的作用</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> eventlet</span><br><span class=\"line\">eventlet.monkey_patch()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> socketio</span><br><span class=\"line\"></span><br><span class=\"line\">mgr = socketio.RedisManager(<span class=\"string\">&#x27;redis://127.0.0.1:6379/0&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例化服务器</span></span><br><span class=\"line\">sio = socketio.Server(client_manager=mgr, logger=<span class=\"literal\">True</span>, engineio_logger=<span class=\"literal\">True</span>,cors_allowed_origins=<span class=\"string\">&#x27;*&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 用一个WSGI应用程序封装</span></span><br><span class=\"line\">app = socketio.WSGIApp(sio)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># connect跟disconnect 是特殊的两个事件,连接或断开时会自动调用</span></span><br><span class=\"line\"><span class=\"meta\">@sio.event</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">connect</span>(<span class=\"params\">sid, environ</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;connect &#x27;</span>, sid)</span><br><span class=\"line\">    <span class=\"comment\"># 当客户端连接时将客户端放入指定房间</span></span><br><span class=\"line\">    <span class=\"comment\"># 当然 你也可以从environ 中获取客户端传过来的room_id</span></span><br><span class=\"line\">    sio.enter_room(sid,room=<span class=\"string\">&#x27;user_1&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@sio.event</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">disconnect</span>(<span class=\"params\">sid</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;disconnect &#x27;</span>, sid)</span><br><span class=\"line\">    <span class=\"comment\"># 当客户端离开时,我们就删除这个房间</span></span><br><span class=\"line\">    rooms = sio.rooms(sid)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> room <span class=\"keyword\">in</span> rooms:</span><br><span class=\"line\">        sio.leave_room(sid, room)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    SERVER_ADDRESS = (<span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">8000</span>)</span><br><span class=\"line\">    sock = eventlet.listen(SERVER_ADDRESS)</span><br><span class=\"line\">    eventlet.wsgi.server(sock, app)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端-1\"><a href=\"#客户端-1\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socketio</span><br><span class=\"line\"></span><br><span class=\"line\">sio = socketio.Client()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@sio.event</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">connect</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;connection established&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接收外部用户发送的消息</span></span><br><span class=\"line\"><span class=\"meta\">@sio.event</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mgr_tst</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;message received with &#x27;</span>, data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@sio.event</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">disconnect</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;disconnected from server&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sio.connect(<span class=\"string\">&#x27;http://127.0.0.1:8000&#x27;</span>)</span><br><span class=\"line\">sio.wait()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模拟外部发送消息\"><a href=\"#模拟外部发送消息\" class=\"headerlink\" title=\"模拟外部发送消息\"></a>模拟外部发送消息</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socketio</span><br><span class=\"line\"></span><br><span class=\"line\">mgr = socketio.RedisManager(<span class=\"string\">&#x27;redis://127.0.0.1:6379/0&#x27;</span>,write_only=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里其实是发送给客户端</span></span><br><span class=\"line\"><span class=\"comment\"># 这里坑了我好久,一开始我以为是发送给服务端然后服务端再转发给客户端,其实不是,是直接通过房间发送给指定客户端</span></span><br><span class=\"line\">mgr.emit(<span class=\"string\">&#x27;mgr_tst&#x27;</span>,data=<span class=\"string\">&#x27;client Msg&#x27;</span>,room=<span class=\"string\">&#x27;user_1&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n","categories":["实时通讯"],"tags":["im","websocket","socketio"]},{"title":"python操作redis","url":"/post/979f557b.html","content":"<p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p>\n<p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>\n<p>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Redis-简介\"><a href=\"#Redis-简介\" class=\"headerlink\" title=\"Redis 简介\"></a>Redis 简介</h2><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</p>\n<p>Redis 与其他 key - value 缓存产品有以下三个特点：</p>\n<ul>\n<li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li>\n<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>\n<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>\n</ul>\n<h2 id=\"Redis-优势\"><a href=\"#Redis-优势\" class=\"headerlink\" title=\"Redis 优势\"></a>Redis 优势</h2><ul>\n<li>性能极高 – Redis能读的速度是110000次&#x2F;s,写的速度是81000次&#x2F;s 。</li>\n<li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li>\n<li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li>\n<li>丰富的特性 – Redis还支持 publish&#x2F;subscribe, 通知, key 过期等等特性。</li>\n</ul>\n<h2 id=\"安装Redis\"><a href=\"#安装Redis\" class=\"headerlink\" title=\"安装Redis\"></a>安装Redis</h2><h3 id=\"windows安装\"><a href=\"#windows安装\" class=\"headerlink\" title=\"windows安装:\"></a>windows安装:</h3><p>下载地址:<a href=\"https://github.com/tporadowski/redis/releases\">https://github.com/tporadowski/redis/releases</a></p>\n<p>直接下一步一步就可以了</p>\n<h3 id=\"LInux下安装\"><a href=\"#LInux下安装\" class=\"headerlink\" title=\"LInux下安装:\"></a>LInux下安装:</h3><ul>\n<li>centos:</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">yum install redis -y</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">当然没有权限的时候记得加sudo</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动</span></span><br><span class=\"line\">redis-server</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>untubu</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install redis</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动</span></span><br><span class=\"line\">redis-server</span><br></pre></td></tr></table></figure>\n\n<p>编译安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">wget http://download.redis.io/releases/redis-6.0.4.tar.gz</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">tar xzf redis-6.0.4.tar.gz</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> redis-6.0.4</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">make</span></span><br></pre></td></tr></table></figure>\n\n<p><code>src</code> 目录 中现在提供了已编译的二进制文件 。使用以下命令运行Redis：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">src/redis-server</span></span><br></pre></td></tr></table></figure>\n\n<p>当然这些都是运维会配置好的,我们了解即可</p>\n<h2 id=\"Python安装-redis-模块\"><a href=\"#Python安装-redis-模块\" class=\"headerlink\" title=\"Python安装 redis 模块\"></a>Python安装 redis 模块</h2><p>Python 要使用 redis，需要先安装 redis 模块：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip3 install redis</span><br></pre></td></tr></table></figure>\n\n<p>redis 提供两个类 Redis 和 StrictRedis, StrictRedis 用于实现大部分官方的命令，Redis 是 StrictRedis 的子类，用于向后兼用旧版本。</p>\n<p>redis 取出的结果默认是字节，我们可以设定 <strong>decode_responses&#x3D;True</strong> 改成字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis   <span class=\"comment\"># 导入redis 模块</span></span><br><span class=\"line\">r = redis.Redis(host=<span class=\"string\">&#x27;localhost&#x27;</span>, port=<span class=\"number\">6379</span>, decode_responses=<span class=\"literal\">True</span>)  </span><br><span class=\"line\">r.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;runoob&#x27;</span>)  <span class=\"comment\"># 设置 name 对应的值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r[<span class=\"string\">&#x27;name&#x27;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.get(<span class=\"string\">&#x27;name&#x27;</span>))  <span class=\"comment\"># 取出键 name 对应的值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(r.get(<span class=\"string\">&#x27;name&#x27;</span>)))  <span class=\"comment\"># 查看类型</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"连接池\"><a href=\"#连接池\" class=\"headerlink\" title=\"连接池\"></a>连接池</h2><p>redis-py 使用 connection pool 来管理对一个 redis server 的所有连接，避免每次建立、释放连接的开销。</p>\n<p>默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数 Redis，这样就可以实现多个 Redis 实例共享一个连接池。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis    <span class=\"comment\"># 导入redis 模块</span></span><br><span class=\"line\"></span><br><span class=\"line\">pool = redis.ConnectionPool(host=<span class=\"string\">&#x27;localhost&#x27;</span>, port=<span class=\"number\">6379</span>, decode_responses=<span class=\"literal\">True</span>)</span><br><span class=\"line\">r = redis.Redis(connection_pool=pool)</span><br><span class=\"line\">r.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;runoob&#x27;</span>)  <span class=\"comment\"># 设置 name 对应的值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.get(<span class=\"string\">&#x27;name&#x27;</span>))  <span class=\"comment\"># 取出键 name 对应的值</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"redis基本命令-String\"><a href=\"#redis基本命令-String\" class=\"headerlink\" title=\"redis基本命令 String\"></a>redis基本命令 String</h3><h4 id=\"set-name-value-ex-x3D-None-px-x3D-None-nx-x3D-False-xx-x3D-False\"><a href=\"#set-name-value-ex-x3D-None-px-x3D-None-nx-x3D-False-xx-x3D-False\" class=\"headerlink\" title=\"set(name, value, ex&#x3D;None, px&#x3D;None, nx&#x3D;False, xx&#x3D;False)\"></a>set(name, value, ex&#x3D;None, px&#x3D;None, nx&#x3D;False, xx&#x3D;False)</h4><p>在Redis中设置值，默认，不存在则创建，存在则修改<br>参数：</p>\n<ul>\n<li>ex，过期时间（秒）</li>\n<li>px，过期时间（毫秒）</li>\n<li>nx，如果设置为True，则只有name不存在时，当前set操作才执行</li>\n<li>xx，如果设置为True，则只有name存在时，当前set操作才执行</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">r.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;k&#x27;</span>,<span class=\"string\">&#x27;v&#x27;</span>,ex=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.get(<span class=\"string\">&#x27;k&#x27;</span>)) <span class=\"string\">&#x27;v&#x27;</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.get(<span class=\"string\">&#x27;k&#x27;</span>)) <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"mset-args-kwargs-批量设置值\"><a href=\"#mset-args-kwargs-批量设置值\" class=\"headerlink\" title=\"mset(*args, **kwargs):批量设置值\"></a><code>mset(*args, **kwargs)</code>:批量设置值</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">r.mget(&#123;<span class=\"string\">&#x27;k1&#x27;</span>: <span class=\"string\">&#x27;v1&#x27;</span>, <span class=\"string\">&#x27;k2&#x27;</span>: <span class=\"string\">&#x27;v2&#x27;</span>&#125;)</span><br><span class=\"line\">r.mset(k1=<span class=\"string\">&quot;v1&quot;</span>, k2=<span class=\"string\">&quot;v2&quot;</span>) <span class=\"comment\"># 这里k1 和k2 不能带引号 一次设置对个键值对</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.mget(<span class=\"string\">&quot;k1&quot;</span>, <span class=\"string\">&quot;k2&quot;</span>))   <span class=\"comment\"># 一次取出多个键对应的值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.mget(<span class=\"string\">&quot;k1&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"mget-keys-args-批量获取\"><a href=\"#mget-keys-args-批量获取\" class=\"headerlink\" title=\"mget(keys, *args):批量获取\"></a><code>mget(keys, *args)</code>:批量获取</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(r.mget(<span class=\"string\">&#x27;k1&#x27;</span>, <span class=\"string\">&#x27;k2&#x27;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.mget([<span class=\"string\">&#x27;k1&#x27;</span>, <span class=\"string\">&#x27;k2&#x27;</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.mget(<span class=\"string\">&quot;fruit&quot;</span>, <span class=\"string\">&quot;fruit1&quot;</span>, <span class=\"string\">&quot;fruit2&quot;</span>, <span class=\"string\">&quot;k1&quot;</span>, <span class=\"string\">&quot;k2&quot;</span>))  <span class=\"comment\"># 将目前redis缓存中的键对应的值批量取出来</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getset-name-value-设置新值并获取原来的值\"><a href=\"#getset-name-value-设置新值并获取原来的值\" class=\"headerlink\" title=\"getset(name, value):设置新值并获取原来的值\"></a><code>getset(name, value)</code>:设置新值并获取原来的值</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(r.getset(<span class=\"string\">&quot;food&quot;</span>, <span class=\"string\">&quot;barbecue&quot;</span>))  <span class=\"comment\"># 设置的新值是barbecue 设置前的值是beef</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"redis基本命令-hash\"><a href=\"#redis基本命令-hash\" class=\"headerlink\" title=\"redis基本命令 hash\"></a>redis基本命令 hash</h3><h4 id=\"hset-name-key-value\"><a href=\"#hset-name-key-value\" class=\"headerlink\" title=\"hset(name, key, value)\"></a><code>hset(name, key, value)</code></h4><p>单个增加—修改(单个取出)—没有就新增，有的话就修改</p>\n<p>name对应的hash中设置一个键值对（不存在，则创建；否则，修改）<br>参数：</p>\n<ul>\n<li>name，redis的name</li>\n<li>key，name对应的hash中的key</li>\n<li>value，name对应的hash中的value</li>\n</ul>\n<p>注：<br>hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">r.hset(<span class=\"string\">&quot;hash1&quot;</span>, <span class=\"string\">&quot;k1&quot;</span>, <span class=\"string\">&quot;v1&quot;</span>)</span><br><span class=\"line\">r.hset(<span class=\"string\">&quot;hash1&quot;</span>, <span class=\"string\">&quot;k2&quot;</span>, <span class=\"string\">&quot;v2&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.hkeys(<span class=\"string\">&quot;hash1&quot;</span>)) <span class=\"comment\"># 取hash中所有的key</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.hget(<span class=\"string\">&quot;hash1&quot;</span>, <span class=\"string\">&quot;k1&quot;</span>))    <span class=\"comment\"># 单个取hash的key对应的值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.hmget(<span class=\"string\">&quot;hash1&quot;</span>, <span class=\"string\">&quot;k1&quot;</span>, <span class=\"string\">&quot;k2&quot;</span>)) <span class=\"comment\"># 多个取hash的key对应的值</span></span><br><span class=\"line\">r.hsetnx(<span class=\"string\">&quot;hash1&quot;</span>, <span class=\"string\">&quot;k2&quot;</span>, <span class=\"string\">&quot;v3&quot;</span>) <span class=\"comment\"># 只能新建</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.hget(<span class=\"string\">&quot;hash1&quot;</span>, <span class=\"string\">&quot;k2&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"hmset-name-mapping-批量增加（取出）\"><a href=\"#hmset-name-mapping-批量增加（取出）\" class=\"headerlink\" title=\"hmset(name, mapping)批量增加（取出）\"></a><code>hmset(name, mapping)</code>批量增加（取出）</h4><p>在name对应的hash中批量设置键值对<br>参数：</p>\n<ul>\n<li>name，redis的name</li>\n<li>mapping，字典，如：{‘k1’:’v1’, ‘k2’: ‘v2’}</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">r.hmset(<span class=\"string\">&quot;hash2&quot;</span>, &#123;<span class=\"string\">&quot;k2&quot;</span>: <span class=\"string\">&quot;v2&quot;</span>, <span class=\"string\">&quot;k3&quot;</span>: <span class=\"string\">&quot;v3&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"hget-name-key-在name对应的hash中获取根据key获取value\"><a href=\"#hget-name-key-在name对应的hash中获取根据key获取value\" class=\"headerlink\" title=\"hget(name,key)在name对应的hash中获取根据key获取value\"></a><code>hget(name,key)</code>在name对应的hash中获取根据key获取value</h4><h4 id=\"hmget-name-keys-args-在name对应的hash中获取多个key的值\"><a href=\"#hmget-name-keys-args-在name对应的hash中获取多个key的值\" class=\"headerlink\" title=\"hmget(name, keys, *args) 在name对应的hash中获取多个key的值\"></a><code>hmget(name, keys, *args)</code> 在name对应的hash中获取多个key的值</h4><p>参数：</p>\n<ul>\n<li>name，reids对应的name</li>\n<li>keys，要获取key集合，如：[‘k1’, ‘k2’, ‘k3’]</li>\n<li>*args，要获取的key，如：k1,k2,k3</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(r.hget(<span class=\"string\">&quot;hash2&quot;</span>, <span class=\"string\">&quot;k2&quot;</span>))  <span class=\"comment\"># 单个取出&quot;hash2&quot;的key-k2对应的value</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.hmget(<span class=\"string\">&quot;hash2&quot;</span>, <span class=\"string\">&quot;k2&quot;</span>, <span class=\"string\">&quot;k3&quot;</span>))  <span class=\"comment\"># 批量取出&quot;hash2&quot;的key-k2 k3对应的value --方式1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.hmget(<span class=\"string\">&quot;hash2&quot;</span>, [<span class=\"string\">&quot;k2&quot;</span>, <span class=\"string\">&quot;k3&quot;</span>]))  <span class=\"comment\"># 批量取出&quot;hash2&quot;的key-k2 k3对应的value --方式2</span></span><br></pre></td></tr></table></figure>\n\n<p><code>hgetall(name)</code>取出所有的键值对</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(r.hgetall(<span class=\"string\">&quot;hash1&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<p><code>hexists(name, key)</code>判断成员是否存在（类似字典的in）</p>\n<p>检查name对应的hash是否存在当前传入的key</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(r.hexists(<span class=\"string\">&quot;hash1&quot;</span>, <span class=\"string\">&quot;k4&quot;</span>))  <span class=\"comment\"># False 不存在</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.hexists(<span class=\"string\">&quot;hash1&quot;</span>, <span class=\"string\">&quot;k1&quot;</span>))  <span class=\"comment\"># True 存在</span></span><br></pre></td></tr></table></figure>\n\n<p><code>hdel(name,*keys)</code>删除键值对</p>\n<p>将name对应的hash中指定key的键值对删除</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(r.hgetall(<span class=\"string\">&quot;hash1&quot;</span>))</span><br><span class=\"line\">r.hset(<span class=\"string\">&quot;hash1&quot;</span>, <span class=\"string\">&quot;k2&quot;</span>, <span class=\"string\">&quot;v222&quot;</span>)   <span class=\"comment\"># 修改已有的key k2</span></span><br><span class=\"line\">r.hset(<span class=\"string\">&quot;hash1&quot;</span>, <span class=\"string\">&quot;k11&quot;</span>, <span class=\"string\">&quot;v1&quot;</span>)   <span class=\"comment\"># 新增键值对 k11</span></span><br><span class=\"line\">r.hdel(<span class=\"string\">&quot;hash1&quot;</span>, <span class=\"string\">&quot;k1&quot;</span>)    <span class=\"comment\"># 删除一个键值对</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.hgetall(<span class=\"string\">&quot;hash1&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"redis基本命令-list\"><a href=\"#redis基本命令-list\" class=\"headerlink\" title=\"redis基本命令 list\"></a>redis基本命令 list</h3><h4 id=\"lpush-name-values-左添加-amp-rpush右添加\"><a href=\"#lpush-name-values-左添加-amp-rpush右添加\" class=\"headerlink\" title=\"lpush(name,values) 左添加 &amp;rpush右添加\"></a><code>lpush(name,values)</code> 左添加 &amp;<code>rpush</code>右添加</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">r.lpush(<span class=\"string\">&quot;list1&quot;</span>, <span class=\"number\">11</span>, <span class=\"number\">22</span>, <span class=\"number\">33</span>)    <span class=\"comment\"># 在列表的左边，依次添加11,22,33</span></span><br><span class=\"line\">r.rpush(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span>, <span class=\"number\">66</span>)    <span class=\"comment\"># 在列表的右边，依次添加44,55,66</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"lpushx-name-value-存在才添加左边-amp-rpushx-name-value-存在才添加右边\"><a href=\"#lpushx-name-value-存在才添加左边-amp-rpushx-name-value-存在才添加右边\" class=\"headerlink\" title=\"lpushx(name,value) 存在才添加左边 &amp;rpushx(name,value) 存在才添加右边\"></a><code>lpushx(name,value)</code> 存在才添加左边 &amp;<code>rpushx(name,value)</code> 存在才添加右边</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">r.lpushx(<span class=\"string\">&quot;list10&quot;</span>, <span class=\"number\">10</span>)   <span class=\"comment\"># 这里list10不存在</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.llen(<span class=\"string\">&quot;list10&quot;</span>))  <span class=\"comment\"># 0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.lrange(<span class=\"string\">&quot;list10&quot;</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>))  <span class=\"comment\"># []</span></span><br><span class=\"line\">r.lpushx(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"number\">77</span>)   <span class=\"comment\"># 这里&quot;list2&quot;之前已经存在，往列表最左边添加一个元素，一次只能添加一个</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.llen(<span class=\"string\">&quot;list2&quot;</span>))  <span class=\"comment\"># 列表长度</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.lrange(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>)) <span class=\"comment\"># 切片取出值，范围是索引号0到-1(最后一个元素</span></span><br><span class=\"line\">r.rpushx(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"number\">99</span>)   <span class=\"comment\"># 这里&quot;foo_list1&quot;之前已经存在，往列表最右边添加一个元素，一次只能添加一个</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.llen(<span class=\"string\">&quot;list2&quot;</span>))  <span class=\"comment\"># 列表长度</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.lrange(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>)) <span class=\"comment\"># 切片取出值，范围是索引号0到-1(最后一个元素)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"linsert-name-where-refvalue-value-新增（固定索引号位置插入元素）\"><a href=\"#linsert-name-where-refvalue-value-新增（固定索引号位置插入元素）\" class=\"headerlink\" title=\"linsert(name, where, refvalue, value))新增（固定索引号位置插入元素）\"></a><code>linsert(name, where, refvalue, value))</code>新增（固定索引号位置插入元素）</h4><p>在name对应的列表的某一个值前或后插入一个新值<br>参数：</p>\n<ul>\n<li>name，redis的name</li>\n<li>where，BEFORE或AFTER</li>\n<li>refvalue，标杆值，即：在它前后插入数据</li>\n<li>value，要插入的数据</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">r.linsert(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"string\">&quot;before&quot;</span>, <span class=\"string\">&quot;11&quot;</span>, <span class=\"string\">&quot;00&quot;</span>)   <span class=\"comment\"># 往列表中左边第一个出现的元素&quot;11&quot;前插入元素&quot;00&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.lrange(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>))   <span class=\"comment\"># 切片取出值，范围是索引号0-最后一个元素</span></span><br></pre></td></tr></table></figure>\n\n<p><code>r.lset(name, index, value)</code>修改（指定索引号进行修改）</p>\n<p>对name对应的list中的某一个索引位置重新赋值<br>参数：</p>\n<ul>\n<li>name，redis的name</li>\n<li>index，list的索引位置</li>\n<li>value，要设置的值</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">r.lset(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"number\">0</span>, -<span class=\"number\">11</span>)    <span class=\"comment\"># 把索引号是0的元素修改成-11</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.lrange(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n\n<p><code>r.lrem(name, value, num)</code>删除（指定值进行删除）</p>\n<p>在name对应的list中删除指定的值<br>参数：</p>\n<ul>\n<li>name，redis的name</li>\n<li>value，要删除的值</li>\n<li>num， num&#x3D;0，删除列表中所有的指定值；</li>\n<li>num&#x3D;2,从前到后，删除2个； num&#x3D;1,从前到后，删除左边第1个</li>\n<li>num&#x3D;-2,从后向前，删除2个</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">r.lrem(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"string\">&quot;11&quot;</span>, <span class=\"number\">1</span>)    <span class=\"comment\"># 将列表中左边第一次出现的&quot;11&quot;删除</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.lrange(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>))</span><br><span class=\"line\">r.lrem(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"string\">&quot;99&quot;</span>, -<span class=\"number\">1</span>)    <span class=\"comment\"># 将列表中右边第一次出现的&quot;99&quot;删除</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.lrange(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>))</span><br><span class=\"line\">r.lrem(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"string\">&quot;22&quot;</span>, <span class=\"number\">0</span>)    <span class=\"comment\"># 将列表中所有的&quot;22&quot;删除</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.lrange(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n\n<p><code>lpop(name)</code>删除并返回</p>\n<p>在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素</p>\n<ul>\n<li>rpop(name) 表示从右向左操作</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">r.lpop(<span class=\"string\">&quot;list2&quot;</span>)    <span class=\"comment\"># 删除列表最左边的元素，并且返回删除的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.lrange(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>))</span><br><span class=\"line\">r.rpop(<span class=\"string\">&quot;list2&quot;</span>)    <span class=\"comment\"># 删除列表最右边的元素，并且返回删除的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.lrange(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n\n<p><code>lindex(name, index)</code>取值（根据索引号取值）</p>\n<p>在name对应的列表中根据索引获取列表元素</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(r.lindex(<span class=\"string\">&quot;list2&quot;</span>, <span class=\"number\">0</span>))  <span class=\"comment\"># 取出索引号是0的值</span></span><br></pre></td></tr></table></figure>\n\n<p>具体操作可以参考 :<a href=\"https://www.jianshu.com/p/2639549bedc8\">https://www.jianshu.com/p/2639549bedc8</a></p>\n<p>常用其实就那么几个get.set.hget,gset</p>\n","categories":["redis"],"tags":["redis","python"]},{"title":"交换机ACL访问控制","url":"/post/8a20e477.html","content":"<p><strong>ACL，是Access Control List的简写，中文名称叫做“访问控制列表”</strong>。它是由一系列条件规则（即描述报文匹配条件的判断语句）组成， 这些条件规则可以是报文的源地址、目的地址、端口号等，是一种应用在网络设备各种软硬接口上的的指令列表。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"进入思科交换机\"><a href=\"#进入思科交换机\" class=\"headerlink\" title=\"进入思科交换机\"></a>进入思科交换机</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">telnet 管理地址</span><br><span class=\"line\">输入密码,进入用户模式</span><br><span class=\"line\">enable 进入特权模式</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/%E4%BA%A4%E6%8D%A2%E6%9C%BAACL%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/image-20200706184603739.png\" alt=\"image-20200706184603739\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">show configuration 查看配置,</span><br><span class=\"line\">configure terminal 进入配置模式</span><br><span class=\"line\">然后就是配置我们的ACL访问控制列表</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ACL有三种类型：\"><a href=\"#ACL有三种类型：\" class=\"headerlink\" title=\"ACL有三种类型：\"></a>ACL有三种类型：</h3><ol>\n<li>标准ACL：根据数据包的源IP地址来允许或拒绝数据包。标准ACL的访问控制列表号是1~99。 2</li>\n<li>扩展ACL：根据数据包的源IP地址、目的IP地址、指定协议、端口和标志来允许或拒绝数据包。扩展ACL的访问控制列表号是100~199.</li>\n<li>命名ACL允许在标准ACL和扩展ACL中使用名称代替表号。</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">编写ACL</span><br><span class=\"line\">access-list 130 deny   ip host [ip地址] any # 由于我这边是需要禁掉,所以用deny</span><br><span class=\"line\">access-list 130 permit ip any any #因为思科默认是deny any any ,所以一定不要忘记这条</span><br></pre></td></tr></table></figure>\n\n<p>随后我们把他应用到相应的端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">cisco(config)#</span><span class=\"language-bash\">interface 相应的端口</span></span><br><span class=\"line\"><span class=\"meta prompt_\">cisco(config-if)#</span><span class=\"language-bash\">ip access-group [access-list-number] <span class=\"keyword\">in</span></span></span><br><span class=\"line\">比如我们这里是130</span><br><span class=\"line\"><span class=\"meta prompt_\">cisco(config-if)#</span><span class=\"language-bash\">ip access-group 130 <span class=\"keyword\">in</span></span></span><br></pre></td></tr></table></figure>\n\n<p>这里有个坑,我配置了acl 但是我查看配置文件时没有出现我刚才配置的acl,我们需要保存一下配置才可以.</p>\n<h3 id=\"删除ACL\"><a href=\"#删除ACL\" class=\"headerlink\" title=\"删除ACL\"></a>删除ACL</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">no access-list number  删除整个ACL配置</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果要删除某一行ACL必须要利用ip access-list extended</span></span><br><span class=\"line\">ip access-list extended acl_name</span><br><span class=\"line\">show ccess-lists</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">然后根据前面的数字删除</span></span><br><span class=\"line\">no [number]</span><br></pre></td></tr></table></figure>\n","categories":["ACL"],"tags":["交换机","ACL访问控制"]},{"title":"vue实现轮播图","url":"/post/ae4e76ad.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近项目需要移动端实现轮播图,查看文档,总结一下</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p><img data-src=\"/../images/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/image-20200810235057262.png\" alt=\"image-20200810235057262\"></p>\n<p>轮播 其实就是让图片排在一排,等鼠标或手指让其显示在视口,可被看见的区域内.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"制作轮播图\"><a href=\"#制作轮播图\" class=\"headerlink\" title=\"制作轮播图\"></a>制作轮播图</h2><h3 id=\"搭建基本dom结构\"><a href=\"#搭建基本dom结构\" class=\"headerlink\" title=\"搭建基本dom结构\"></a>搭建基本dom结构</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>轮播图demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        * &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.swiper</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"comment\">/* 定义视口 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"comment\">/* 超出部分隐藏 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">overflow</span>: hidden;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.slides</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.slides</span> <span class=\"selector-tag\">li</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"comment\">/* 去掉前面的黑点 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">list-style</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">img</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;swiper&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;slides&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in items&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;item.url&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">items</span>: [&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/imgs/1.jpg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">id</span>: <span class=\"number\">2</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/imgs/2.jpg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">id</span>: <span class=\"number\">3</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/imgs/3.jpg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">id</span>: <span class=\"number\">4</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/imgs/4.jpg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/image-20200812185854004.png\" alt=\"image-20200812185854004\"></p>\n<h3 id=\"实现简单的轮播\"><a href=\"#实现简单的轮播\" class=\"headerlink\" title=\"实现简单的轮播\"></a>实现简单的轮播</h3><p>为了让每张图都填满整个视口,需要设置每个图片的宽度为视口宽度,整个的宽度就是所有图片宽度的总和</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>轮播图demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        * &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.swiper</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"comment\">/* 定义视口 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"comment\">/* 超出部分隐藏 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">overflow</span>: hidden;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.slides</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.slides</span> <span class=\"selector-tag\">li</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"comment\">/* 去掉前面的黑点 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">list-style</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">img</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;swiper&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;viewPortRef&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;slides&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;translateStyle&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in items&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;item.url&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 定时器</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">timer</span>: <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 当前index</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">currentIndex</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 视口</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">viewport</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">items</span>: [&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/imgs/1.jpg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">id</span>: <span class=\"number\">2</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/imgs/2.jpg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">id</span>: <span class=\"number\">3</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/imgs/3.jpg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">id</span>: <span class=\"number\">4</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/imgs/4.jpg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 初始化宽度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">init</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 自动轮播</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">autoplay</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 获取视口的宽度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">viewport</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">viewPortRef</span>.<span class=\"property\">clientWidth</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">// 计算图片外层盒子的大小</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">box</span>.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"property\">length</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">viewport</span> + <span class=\"string\">&#x27;px&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 自动轮播 ,其实就是通过transition 偏移X</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">autoplay</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span>++</span></span><br><span class=\"line\"><span class=\"language-javascript\">                            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"property\">length</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                                <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> = <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, <span class=\"number\">2000</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 通过计算属性来获取偏移的X</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">translateStyle</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">const</span> translate = <span class=\"string\">`translateX(-<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.currentIndex*<span class=\"variable language_\">this</span>.viewport&#125;</span>px)`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">transform</span>: translate</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/GIF%202020-8-12%2019-23-23.gif\" alt=\"GIF 2020-8-12 19-23-23\"></p>\n<p>简单实现了轮播的效果,不过有点粗糙,我们加入过渡</p>\n<h3 id=\"加入过渡\"><a href=\"#加入过渡\" class=\"headerlink\" title=\"加入过渡\"></a>加入过渡</h3><p>单单在样式中加入过渡,我们会发现轮播到最后一张图片的时候,会转到第一张</p>\n<p><img data-src=\"/../images/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/GIF%202020-8-12%2019-27-02.gif\" alt=\"GIF 2020-8-12 19-27-02\"></p>\n<p>这样的效果,我们并不希望得到,我们希望他是无缝的,</p>\n<p>修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">autoplay</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">isTransition</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span>++</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"property\">isTransition</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> = <span class=\"number\">0</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">     &#125;, <span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/GIF%202020-8-12%2019-37-15.gif\" alt=\"GIF 2020-8-12 19-37-15\"></p>\n<p>从最后一张跳到第一张还是有点不舒服,那么我们怎么办呢?</p>\n<p>我们需要重新定义一个列表</p>\n<p><img data-src=\"/../images/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/image-20200812195232370.png\" alt=\"image-20200812195232370\"></p>\n<p>然后滚动到4的时候再到1然后再跳转到前面的1(当然最前面的4是为我们做滑动的时候准备的)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>轮播图demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        * &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.swiper</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"comment\">/* 定义视口 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"comment\">/* 超出部分隐藏 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">overflow</span>: hidden;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.slides</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"comment\">/* 加入过渡 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.slides</span> <span class=\"selector-tag\">li</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"comment\">/* 去掉前面的黑点 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">list-style</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">img</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;swiper&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;viewPortRef&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;slides&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;translateStyle&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in newList&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;item.url&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">newList</span>: [],</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 定时器</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">timer</span>: <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 当前index</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">currentIndex</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 视口</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">viewport</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">isTransition</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">items</span>: [&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/imgs/1.jpg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">id</span>: <span class=\"number\">2</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/imgs/2.jpg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">id</span>: <span class=\"number\">3</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/imgs/3.jpg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">id</span>: <span class=\"number\">4</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/imgs/4.jpg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 初始化宽度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">init</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 自动轮播</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">autoplay</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">const</span> first = <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">const</span> last = <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"title function_\">slice</span>(-<span class=\"number\">1</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">newList</span> = [...last, ...<span class=\"variable language_\">this</span>.<span class=\"property\">items</span>, ...first]</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">// 获取视口的宽度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">viewport</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">viewPortRef</span>.<span class=\"property\">clientWidth</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">// 计算图片外层盒子的大小</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">box</span>.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">newList</span>.<span class=\"property\">length</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">viewport</span> + <span class=\"string\">&#x27;px&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 自动轮播 ,其实就是通过transition 偏移X</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">autoplay</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">// 加上延时,造成视觉误差</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                            <span class=\"variable language_\">this</span>.<span class=\"property\">isTransition</span> = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                            <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span>++</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        &#125;, <span class=\"number\">40</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">newList</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                            <span class=\"variable language_\">this</span>.<span class=\"property\">isTransition</span> = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                            <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> = <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, <span class=\"number\">2000</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 通过计算属性来获取偏移的X</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">translateStyle</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">const</span> translate = <span class=\"string\">`translateX(-<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.currentIndex*<span class=\"variable language_\">this</span>.viewport&#125;</span>px)`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">const</span> transition = <span class=\"variable language_\">this</span>.<span class=\"property\">isTransition</span> ? <span class=\"string\">&#x27;all 1s&#x27;</span> : <span class=\"string\">&#x27;none&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">transform</span>: translate,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">transition</span>: transition</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/GIF%202020-8-12%2019-58-16.gif\" alt=\"GIF 2020-8-12 19-58-16\"></p>\n<h3 id=\"鼠标滑动\"><a href=\"#鼠标滑动\" class=\"headerlink\" title=\"鼠标滑动\"></a>鼠标滑动</h3><p>滑动有三个事件:</p>\n<p><code>touchstart</code> 按住时,<code>touchmove</code> 移动 ,<code>touchend</code> 结束 (当然这三个事件只在移动端有效)</p>\n<p>pc端需要<code>mousedown mousemove mouseup</code> 三个事件,这里我用到的是移动端</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onTouchStart</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// 关闭自动播放</span></span><br><span class=\"line\">               <span class=\"variable language_\">this</span>.<span class=\"title function_\">stopplay</span>()</span><br><span class=\"line\">                   <span class=\"comment\">// 关闭过渡</span></span><br><span class=\"line\">               <span class=\"variable language_\">this</span>.<span class=\"property\">isTransition</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">                   <span class=\"comment\">// 当前是0的时候,是最后第二个</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                   <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">newList</span>.<span class=\"property\">length</span> - <span class=\"number\">2</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">newList</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                   <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> = <span class=\"number\">1</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"comment\">// 获取按住的X坐标位置</span></span><br><span class=\"line\">               <span class=\"variable language_\">this</span>.<span class=\"property\">toucheStartX</span> = e.<span class=\"property\">targetTouches</span>[<span class=\"number\">0</span>].<span class=\"property\">clientX</span>;</span><br><span class=\"line\">               <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">toucheStartX</span>);</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           <span class=\"title function_\">onTouchMove</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"comment\">// 获取移动的偏移量</span></span><br><span class=\"line\">               <span class=\"variable language_\">this</span>.<span class=\"property\">offsetX</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">toucheStartX</span> - e.<span class=\"property\">targetTouches</span>[<span class=\"number\">0</span>].<span class=\"property\">clientX</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           <span class=\"title function_\">onTouchEnd</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// 开启效果</span></span><br><span class=\"line\">               <span class=\"variable language_\">this</span>.<span class=\"property\">isTransition</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">               <span class=\"comment\">// 四舍五入</span></span><br><span class=\"line\">               <span class=\"keyword\">let</span> currentIndex = <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">offsetX</span> / <span class=\"variable language_\">this</span>.<span class=\"property\">viewport</span>)</span><br><span class=\"line\">               <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> = currentIndex + <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span></span><br><span class=\"line\">                   <span class=\"comment\">// 重置offsetX</span></span><br><span class=\"line\">               <span class=\"variable language_\">this</span>.<span class=\"property\">offsetX</span> = <span class=\"number\">0</span></span><br><span class=\"line\">                   <span class=\"comment\">// 自动播放</span></span><br><span class=\"line\">               <span class=\"variable language_\">this</span>.<span class=\"title function_\">autoplay</span>()</span><br><span class=\"line\">           &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/GIF%202020-8-12%2021-17-02.gif\" alt=\"GIF 2020-8-12 21-17-02\"></p>\n<h3 id=\"底部-小圆点\"><a href=\"#底部-小圆点\" class=\"headerlink\" title=\"底部 小圆点\"></a>底部 小圆点</h3><h4 id=\"添加dom\"><a href=\"#添加dom\" class=\"headerlink\" title=\"添加dom\"></a>添加dom</h4><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;swiper&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;viewPortRef&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;slides&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;translateStyle&quot;</span> @<span class=\"attr\">touchstart</span>=<span class=\"string\">&quot;onTouchStart&quot;</span> @<span class=\"attr\">touchmove</span>=<span class=\"string\">&quot;onTouchMove&quot;</span> @<span class=\"attr\">touchend</span>=<span class=\"string\">&quot;onTouchEnd&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in newList&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;item.url&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sliderListDot&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sliderDot&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in items&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;active : activeIndex==index&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设计样式\"><a href=\"#设计样式\" class=\"headerlink\" title=\"设计样式\"></a>设计样式</h4><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sliderListDot</span> &#123;</span><br><span class=\"line\">          <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">          <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">          <span class=\"attribute\">bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">          <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">          <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-<span class=\"number\">50%</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"selector-class\">.sliderDot</span> &#123;</span><br><span class=\"line\">          <span class=\"attribute\">width</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">          <span class=\"attribute\">height</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">          <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">          <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">          <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">          <span class=\"attribute\">opacity</span>: <span class=\"number\">0.6</span>;</span><br><span class=\"line\">          <span class=\"attribute\">transition</span>: all <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"selector-class\">.active</span> &#123;</span><br><span class=\"line\">          <span class=\"attribute\">width</span>: <span class=\"number\">36px</span>;</span><br><span class=\"line\">          <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">          <span class=\"attribute\">border-radius</span>: <span class=\"number\">7px</span>;</span><br><span class=\"line\">          <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加计算属性\"><a href=\"#添加计算属性\" class=\"headerlink\" title=\"添加计算属性\"></a>添加计算属性</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">activeIndex</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"comment\">// 当currentIndex=0的时候就是列表的最后一个</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            index = <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"property\">length</span>-<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当是倒数第二个的时候就是第0个 </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">newList</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            index = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 其余都是-1 </span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            index = <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> - <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/GIF%202020-8-12%2021-52-25.gif\" alt=\"GIF 2020-8-12 21-52-25\"></p>\n<h4 id=\"鼠标移动到小圆点改变轮播\"><a href=\"#鼠标移动到小圆点改变轮播\" class=\"headerlink\" title=\"鼠标移动到小圆点改变轮播\"></a>鼠标移动到小圆点改变轮播</h4><p>有两个事件:<code>mouseenter</code> 跟<code>mouseleave</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 鼠标进入的时候</span></span><br><span class=\"line\">               <span class=\"title function_\">enter</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                   <span class=\"comment\">// 停止自动播放</span></span><br><span class=\"line\">                   <span class=\"variable language_\">this</span>.<span class=\"title function_\">stopplay</span>()</span><br><span class=\"line\">                   <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> = index + <span class=\"number\">1</span></span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               <span class=\"comment\">// 鼠标离开的时候</span></span><br><span class=\"line\">               <span class=\"title function_\">leave</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                   <span class=\"variable language_\">this</span>.<span class=\"title function_\">autoplay</span>()</span><br><span class=\"line\">               &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>轮播图demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        * &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.swiper</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"comment\">/* 定义视口 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"comment\">/* 超出部分隐藏 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">overflow</span>: hidden;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.slides</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"comment\">/* 加入过渡 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.slides</span> <span class=\"selector-tag\">li</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"comment\">/* 去掉前面的黑点 */</span></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">list-style</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">img</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.sliderListDot</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">bottom</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-<span class=\"number\">50%</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.sliderDot</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">14px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">14px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">opacity</span>: <span class=\"number\">0.6</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">transition</span>: all <span class=\"number\">0.5s</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.active</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">36px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">7px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;swiper&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;viewPortRef&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;slides&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;translateStyle&quot;</span> @<span class=\"attr\">touchstart</span>=<span class=\"string\">&quot;onTouchStart&quot;</span> @<span class=\"attr\">touchmove</span>=<span class=\"string\">&quot;onTouchMove&quot;</span> @<span class=\"attr\">touchend</span>=<span class=\"string\">&quot;onTouchEnd&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in newList&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;item.url&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sliderListDot&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sliderDot&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in items&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;active : activeIndex==index&#125;&quot;</span> @<span class=\"attr\">mouseenter</span>=<span class=\"string\">&quot;enter(index)&quot;</span> @<span class=\"attr\">mouselevae</span>=<span class=\"string\">&quot;leave&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 获取按住时的X值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">toucheStartX</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">newList</span>: [],</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 定时器</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">timer</span>: <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 当前index</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">currentIndex</span>: <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 偏移量</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">offsetX</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 视口</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">viewport</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">isTransition</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">items</span>: [&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/imgs/1.jpg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">id</span>: <span class=\"number\">2</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/imgs/2.jpg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">id</span>: <span class=\"number\">3</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/imgs/3.jpg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">id</span>: <span class=\"number\">4</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/imgs/4.jpg&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 初始化宽度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">init</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 自动轮播</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">autoplay</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">const</span> first = <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">const</span> last = <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"title function_\">slice</span>(-<span class=\"number\">1</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">newList</span> = [...last, ...<span class=\"variable language_\">this</span>.<span class=\"property\">items</span>, ...first]</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">// 获取视口的宽度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">viewport</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">viewPortRef</span>.<span class=\"property\">clientWidth</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">// 计算图片外层盒子的大小</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">box</span>.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">newList</span>.<span class=\"property\">length</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">viewport</span> + <span class=\"string\">&#x27;px&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 自动轮播 ,其实就是通过transition 偏移X</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">autoplay</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">// 加上延时,造成视觉误差</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                            <span class=\"variable language_\">this</span>.<span class=\"property\">isTransition</span> = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                            <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span>++</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        &#125;, <span class=\"number\">40</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">newList</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                            <span class=\"variable language_\">this</span>.<span class=\"property\">isTransition</span> = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                            <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> = <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, <span class=\"number\">2000</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">stopplay</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> &amp;&amp; <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">onTouchStart</span>(<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 关闭自动播放</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"title function_\">stopplay</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">// 关闭过渡</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">isTransition</span> = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">// 当前是0的时候,是最后第二个</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> === <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">newList</span>.<span class=\"property\">length</span> - <span class=\"number\">2</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">newList</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> = <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 获取按住的X坐标位置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">toucheStartX</span> = e.<span class=\"property\">targetTouches</span>[<span class=\"number\">0</span>].<span class=\"property\">clientX</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">toucheStartX</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">onTouchMove</span>(<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 获取移动的偏移量</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">offsetX</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">toucheStartX</span> - e.<span class=\"property\">targetTouches</span>[<span class=\"number\">0</span>].<span class=\"property\">clientX</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">onTouchEnd</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 开启效果</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">isTransition</span> = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 四舍五入</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">let</span> currentIndex = <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">offsetX</span> / <span class=\"variable language_\">this</span>.<span class=\"property\">viewport</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> = currentIndex + <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">// 重置offsetX</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">offsetX</span> = <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">// 自动播放</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"title function_\">autoplay</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 鼠标进入的时候</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">enter</span>(<span class=\"params\">index</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 停止自动播放</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"title function_\">stopplay</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> = index + <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 鼠标离开的时候</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">leave</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"title function_\">autoplay</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 通过计算属性来获取偏移的X</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">translateStyle</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">const</span> translate = <span class=\"string\">`translateX(-<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.currentIndex*<span class=\"variable language_\">this</span>.viewport+<span class=\"variable language_\">this</span>.offsetX &#125;</span>px)`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">const</span> transition = <span class=\"variable language_\">this</span>.<span class=\"property\">isTransition</span> ? <span class=\"string\">&#x27;all 1s&#x27;</span> : <span class=\"string\">&#x27;none&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">transform</span>: translate,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">transition</span>: transition</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">activeIndex</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">let</span> index = <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">// 当currentIndex=0的时候就是列表的最后一个</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> === <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        index = <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 当是倒数第二个的时候就是第0个 </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">newList</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        index = <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 其余都是-1 </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        index = <span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> - <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> index</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/Tigercoll/vue-slideshow\">github地址</a></p>\n","categories":["vue"],"tags":["vue","轮播图"]},{"title":"交换机VLAN命令","url":"/post/5bb83ec0.html","content":"<h3 id=\"VLAN基本命令\"><a href=\"#VLAN基本命令\" class=\"headerlink\" title=\"VLAN基本命令\"></a>VLAN基本命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vlan 10  # 创建单个VALN</span><br><span class=\"line\">vlan batch 10 to 20 # 创建多个vlan</span><br><span class=\"line\">port link-type access/trunk/hybird # 配置接口类型</span><br><span class=\"line\">port default vlan 10 # 配置access关联vlan/pvid</span><br><span class=\"line\">port trunk allow-pass vlan 10 # 配置trunk允许vlan 默认只允许vlan1</span><br><span class=\"line\">port trunk pvid vlan 10 # 配置trunk的pvid</span><br><span class=\"line\">port hybird tagged/untagged vlan 10 # 配置hybird标记的vlan</span><br><span class=\"line\">port hybird pvid vlan 10 # 配置hybird 的pvid</span><br><span class=\"line\">display vlan # 验证vlan</span><br><span class=\"line\">display port vlan # 验证vlan端口</span><br></pre></td></tr></table></figure>\n\n","categories":["VLAN"],"tags":["交换机","VLAN"]},{"title":"原码,反码,补码介绍","url":"/post/cca0aa9a.html","content":"<p>原码、反码和补码是计算机中用来表示整数的不同编码方式。它们通常用于处理有符号整数的表示和运算。</p>\n<span id=\"more\"></span>\n\n<ol>\n<li><p><strong>原码（Sign-Magnitude）</strong>：</p>\n<ul>\n<li>原码是最直接的整数表示方法，其中最高位表示符号位，0表示正数，1表示负数。其余位表示数值部分。</li>\n<li>例如，+5的原码是00000101，-5的原码是10000101。</li>\n<li>原码的主要缺点是有两个零，即+0和-0，以及在进行加减运算时需要特殊处理符号位，因此并不常用于实际的计算机系统。</li>\n</ul>\n</li>\n<li><p><strong>反码（Ones’ Complement）</strong>：</p>\n<ul>\n<li>反码解决了原码中存在两个零的问题，但仍然需要特殊处理符号位。</li>\n<li>正数的反码与原码相同，负数的反码是其原码除符号位外的各位取反。</li>\n<li>例如，+5的反码是00000101，-5的反码是11111010。</li>\n<li>反码的一个特点是，正负数的加法可以通过同样的算法进行，但是减法需要转换为加法。</li>\n</ul>\n</li>\n<li><p><strong>补码（Two’s Complement）</strong>：</p>\n<ul>\n<li>补码是最常用的整数表示方式，解决了原码和反码中的一些问题。</li>\n<li>正数的补码与原码相同，负数的补码是其原码取反后加1。</li>\n<li>例如，+5的补码是00000101，-5的补码是11111011。</li>\n<li>补码表示中只有一个零，而且加法和减法可以通过相同的算法进行，简化了计算。</li>\n<li>补码的最高位仍然表示符号位，但是不需要特殊处理，因为补码加法在溢出时会自动忽略溢出位，从而得到正确的结果。</li>\n</ul>\n<h4 id=\"取值范围\"><a href=\"#取值范围\" class=\"headerlink\" title=\"取值范围\"></a>取值范围</h4><p>原码、反码和补码是计算机中用于表示有符号整数的不同编码方式。它们的取值范围如下：</p>\n<table>\n<thead>\n<tr>\n<th>编码方式</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>原码</td>\n<td>-(2^(n-1)-1) ~ 2^(n-1)-1 (n位整数)</td>\n</tr>\n<tr>\n<td>反码</td>\n<td>-(2^(n-1)-1) ~ 2^(n-1)-1 (n位整数)</td>\n</tr>\n<tr>\n<td>补码</td>\n<td>-2^(n-1) ~ 2^(n-1)-1 (n位整数)</td>\n</tr>\n</tbody></table>\n<p>这里，n表示整数的位数，通常为8位、16位、32位或64位等。</p>\n</li>\n</ol>\n<p>总之，原码、反码和补码是用于表示有符号整数的不同编码方式，补码是最常用的一种，因为它具有简单的加法和减法规则，并且只有一个零。</p>\n<p>下面是一些关于原码、反码和补码的习题以及答案：</p>\n<p><strong>习题：</strong></p>\n<ol>\n<li>将十进制数+12表示为原码、反码和补码。</li>\n<li>将十进制数-8表示为原码、反码和补码。</li>\n<li>将十进制数-25表示为原码、反码和补码。</li>\n<li>计算以下两个十进制数的和，并以补码形式表示结果：5和-3。</li>\n<li>计算以下两个十进制数的差，并以补码形式表示结果：-9和7。</li>\n</ol>\n<p><strong>答案：</strong></p>\n<ol>\n<li>+12的二进制表示为：00001100（原码）、00001100（反码）、00001100（补码）。</li>\n<li>-8的二进制表示为：10001000（原码）、11110111（反码）、11111000（补码）。</li>\n<li>-25的二进制表示为：10011001（原码）、11100110（反码）、11100111（补码）。</li>\n<li>5的补码表示为：00000101，-3的补码表示为：11111101。它们的和为：00000010，即+2的补码表示。</li>\n<li>-9的补码表示为：11110111，7的补码表示为：00000111。它们的差为：11111110，即-2的补码表示。</li>\n</ol>\n","categories":["网工"],"tags":["网工","计算机"]},{"title":"动态路由协议-RIP","url":"/post/5cc00ef5.html","content":"<p><img data-src=\"/../images/%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE-RIP/image-20230315155922516.png\" alt=\"image-20230315155922516\"></p>\n<p>AS（自治域系统）内部使用内部网关协议； AS与AS之间使用外部网关协议</p>\n<ul>\n<li><strong>静态路由：</strong>由网络管理员根据数据访问需求手动在每台设备上进行添加和维护。</li>\n<li><strong>动态路由：</strong>路由器自动进行路由信息的更新和同步，在网络拓扑改变时能够自动进行收敛。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"RIP-协议的优缺点\"><a href=\"#RIP-协议的优缺点\" class=\"headerlink\" title=\"RIP 协议的优缺点\"></a><strong>RIP 协议的优缺点</strong></h3><h3 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a><strong>优点：</strong></h3><ul>\n<li>RIP 协议非常适合小型网络 - 易于理解和配置。</li>\n<li>RIP 路由保证支持几乎所有的路由器。</li>\n<li>RIP 不需要每次网络拓扑更改时都进行更新。</li>\n</ul>\n<h3 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a><strong>缺点：</strong></h3><ul>\n<li>RIP 可能会造成流量瓶颈，因为它每 30 秒广播一次更新，由于 RIP 中的任何路由更新都会<strong>占用大量带宽</strong>，因此关键 IT 流程的资源是有限的。</li>\n<li>RIP 的跳数限制为 <strong>15</strong> 跳，因此超出该距离的任何路由器都被视为无穷大，因此无法访问。</li>\n<li>收敛速度很慢，当任何链接出现故障时，选择替代路线需要花费大量时间。</li>\n<li>RIP 不支持同一路由上的多条路径，这可能会产生更多的路由环路，使用固定跳数度量来选择最佳路由时，根据实时数据比较路由时，RIP 无法工作，由于重复的过程，这会导致数据包丢失和网络操作过载。</li>\n</ul>\n<h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a><strong>示例：</strong></h3><p><img data-src=\"/../images/%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE-RIP/image-20230315154406871.png\" alt=\"image-20230315154406871\"></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置:\"></a>配置:</h3><p>R1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置进程号</span></span><br><span class=\"line\">[R1]rip 1</span><br><span class=\"line\"><span class=\"comment\"># 配置版本 </span></span><br><span class=\"line\">[R1-rip-1]version 2</span><br><span class=\"line\"><span class=\"comment\"># 宣告</span></span><br><span class=\"line\">[R1-rip-1] network 192.168.1.0</span><br><span class=\"line\">[R1-rip-1] network 12.0.0.0</span><br></pre></td></tr></table></figure>\n\n<p>R2</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置进程号</span></span><br><span class=\"line\">[R1]rip 1</span><br><span class=\"line\"><span class=\"comment\"># 配置版本 </span></span><br><span class=\"line\">[R1-rip-1]version 2</span><br><span class=\"line\"><span class=\"comment\"># 宣告</span></span><br><span class=\"line\">[R1-rip-1] network 23.0.0.0</span><br><span class=\"line\">[R1-rip-1] network 12.0.0.0</span><br></pre></td></tr></table></figure>\n\n<p>R3</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置进程号</span></span><br><span class=\"line\">[R1]rip 1</span><br><span class=\"line\"><span class=\"comment\"># 配置版本 </span></span><br><span class=\"line\">[R1-rip-1]version 2</span><br><span class=\"line\"><span class=\"comment\"># 宣告</span></span><br><span class=\"line\">[R1-rip-1] network 23.0.0.0</span><br><span class=\"line\">[R1-rip-1] network 192.168.3.0</span><br></pre></td></tr></table></figure>\n\n<p>验证</p>\n<p><img data-src=\"/../images/%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE-RIP/image-20230315154808191.png\" alt=\"image-20230315154808191\"></p>\n<p>RIP 的配置还是非常简单的</p>\n","categories":["路由"],"tags":["路由","RIP"]},{"title":"华为交换机telnet配置方法","url":"/post/dc7ef1b9.html","content":"<p>telnet是专门用来远程连接的,一般多用于交换机,路由器</p>\n<p>华为交换机Telnet的两种配置方式：</p>\n<span id=\"more\"></span>\n\n<p>1.仅密码登录验证<br>代码如下（示例）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Quidway&gt;system-view -----进入配置模式</span><br><span class=\"line\">[Quidway]interface vlan 1 -----进入管理vlan</span><br><span class=\"line\">[Quidway-Vlanif1]ip address 192.168.28.49 255.255.255.0 -----配置管理ip地址</span><br><span class=\"line\">[Quidway-Vlanif1]quit -----退出</span><br><span class=\"line\">[Quidway]telnet server <span class=\"built_in\">enable</span> -----打开telnet服务 （一般默认开启）</span><br><span class=\"line\">[Quidway]user-interface vty 0 4 -----用户指定虚拟用户终端接口</span><br><span class=\"line\">[Quidway-ui-vty0-4]authentication-mode password -----配置用户终端接口认证方式 密码验证</span><br><span class=\"line\">[Quidway-ui-vty0-4]<span class=\"built_in\">set</span> authentication password cipher huawei123 -----设置接口验证密码,密码为huawei123</span><br><span class=\"line\">[Quidway-ui-vty0-4]user privilege level 15 -----设置用户优先级 （可选）</span><br><span class=\"line\">[Quidway-ui-vty0-4]idle-timeout 1 -----设置登陆超时为一分钟 （可选）</span><br><span class=\"line\">[Quidway-ui-vty0-4]<span class=\"built_in\">return</span> -----返回用户视图</span><br><span class=\"line\">&lt;Quidway&gt;save -----保存</span><br></pre></td></tr></table></figure>\n\n\n\n<p>2.配置AAA登录<br>代码如下（示例）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Quidway&gt;system-view -----进入配置模式</span><br><span class=\"line\">[Quidway]interface vlan 1 -----进入管理vlan</span><br><span class=\"line\">[Quidway-Vlanif1]ip address 192.168.28.49 255.255.255.0 -----配置管理ip地址</span><br><span class=\"line\">[Quidway-Vlanif1]quit -----退出</span><br><span class=\"line\">[Quidway]telnet server <span class=\"built_in\">enable</span> -----打开telnet服务 （一般默认开启）</span><br><span class=\"line\">[Quidway]user-interface vty 0 4 -----用户指定虚拟用户终端接口</span><br><span class=\"line\">[Quidway-ui-vty0-4]authentication-mode aaa -----配置用户终端接口认证方式 aaa验证</span><br><span class=\"line\">[Quidway-ui-vty0-4]user privilege level 15 -----设置用户优先级</span><br><span class=\"line\">[Quidway-ui-vty0-4]idle-timeout 1 -----设置登陆超时为一分钟</span><br><span class=\"line\">[Quidway-ui-vty0-4]quit -----退出</span><br><span class=\"line\">[Quidway]aaa -----进入aaa</span><br><span class=\"line\">[Quidway-aaa]local-user huawei password cipher huawei123 -----创建用户名huawei 密码huawei123</span><br><span class=\"line\">[Quidway-aaa]local-user huawei privilege level 15 -----设置用户优先级</span><br><span class=\"line\">[Quidway-aaa]local-user huawei service-type telnet -----授权用户使用telnet</span><br><span class=\"line\">[Quidway-ui-vty0-4]<span class=\"built_in\">return</span> -----返回用户视图</span><br><span class=\"line\">&lt;Quidway&gt;save -----保存</span><br></pre></td></tr></table></figure>\n\n","categories":["telnet配置"],"tags":["交换机","telnet"]},{"title":"单臂路由","url":"/post/bf9393d0.html","content":"<p>单臂路由（router-on-a-stick）是指在路由器的一个接口上通过配置<a href=\"https://baike.baidu.com/item/%E5%AD%90%E6%8E%A5%E5%8F%A3/10693062?fromModule=lemma_inlink\">子接口</a>（或“<a href=\"https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E6%8E%A5%E5%8F%A3/8509464?fromModule=lemma_inlink\">逻辑接口</a>”，并不存在真正<a href=\"https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E6%8E%A5%E5%8F%A3/5922620?fromModule=lemma_inlink\">物理接口</a>）的方式，实现原来相互隔离的不同VLAN（<a href=\"https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91/419962?fromModule=lemma_inlink\">虚拟局域网</a>）之间的<a href=\"https://baike.baidu.com/item/%E4%BA%92%E8%81%94%E4%BA%92%E9%80%9A/1848381?fromModule=lemma_inlink\">互联互通</a>。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"单臂路由配置\"><a href=\"#单臂路由配置\" class=\"headerlink\" title=\"单臂路由配置\"></a>单臂路由配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">dot1q termination vid 10 # 关联子接口和vlan </span><br><span class=\"line\">arp broadcast enable # 开启子接口的ARP广播功能</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1/image-20230329132822934.png\" alt=\"image-20230329132822934\"></p>\n<p>SW1:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sys</span><br><span class=\"line\">sys SW1</span><br><span class=\"line\">vlan batch 10 20</span><br><span class=\"line\">int g0/0/1</span><br><span class=\"line\">p l a</span><br><span class=\"line\">p d v 10 </span><br><span class=\"line\">int g0/0/2</span><br><span class=\"line\">p l a</span><br><span class=\"line\">p d v 20</span><br><span class=\"line\">int g0/0/24</span><br><span class=\"line\">p l t</span><br><span class=\"line\">p t a v 10 20 </span><br></pre></td></tr></table></figure>\n\n<p>R1:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sys</span><br><span class=\"line\">sys R1</span><br><span class=\"line\">int g 0/0/0.10</span><br><span class=\"line\">dot1q termination vid 10</span><br><span class=\"line\">arp broadcast <span class=\"built_in\">enable</span></span><br><span class=\"line\">ip addr 10.0.0.254 24</span><br><span class=\"line\"></span><br><span class=\"line\">int g 0/0/0.20</span><br><span class=\"line\">dot1q termination vid 20</span><br><span class=\"line\">arp broadcast <span class=\"built_in\">enable</span></span><br><span class=\"line\">ip addr 20.0.0.254 24</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["单臂路由"],"tags":["交换机","vlan","单臂路由"]},{"title":"算法回顾","url":"/post/eb37acc3.html","content":"<p>回顾一下4个基本算法:冒泡,选择,插入,快速</p>\n<span id=\"more\"></span>\n\n<h2 id=\"冒泡算法\"><a href=\"#冒泡算法\" class=\"headerlink\" title=\"冒泡算法\"></a>冒泡算法</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bubble_sort</span>(<span class=\"params\">arr</span>):</span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(arr)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,length+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,length-i+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> arr[j-<span class=\"number\">1</span>]&gt;arr[j]:</span><br><span class=\"line\">                arr[j-<span class=\"number\">1</span>],arr[j] = arr[j],arr[j-<span class=\"number\">1</span>]</span><br><span class=\"line\">                </span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr </span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/%E7%AE%97%E6%B3%95%E5%9B%9E%E9%A1%BE/webp.gif\" alt=\"img\"></p>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span>  <span class=\"title function_\">select_sort</span>(<span class=\"params\">arr</span>):</span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(arr)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i+<span class=\"number\">1</span>,length):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> arr[i]&gt;arr[j]:</span><br><span class=\"line\">                arr[i],arr[j] = arr[j],arr[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/%E7%AE%97%E6%B3%95%E5%9B%9E%E9%A1%BE/webp-16570988216773.gif\" alt=\"img\"></p>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 插入排序,是跟前一个比较 比前一个小就往前移动</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">insert_sort</span>(<span class=\"params\">arr</span>):</span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(arr)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,length):</span><br><span class=\"line\">        loop_index = i</span><br><span class=\"line\">        <span class=\"keyword\">while</span> loop_index&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> arr[loop_index-<span class=\"number\">1</span>]&gt;arr[loop_index]:</span><br><span class=\"line\">            count+=<span class=\"number\">1</span></span><br><span class=\"line\">            arr[loop_index-<span class=\"number\">1</span>] ,arr[loop_index] = arr[loop_index],arr[loop_index-<span class=\"number\">1</span>]</span><br><span class=\"line\">            loop_index -=<span class=\"number\">1</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/%E7%AE%97%E6%B3%95%E5%9B%9E%E9%A1%BE/webp-16570988562036.gif\" alt=\"img\"></p>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 快速排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">quick_sort</span>(<span class=\"params\">arr</span>):</span><br><span class=\"line\">   </span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(arr)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        middle = arr.pop()</span><br><span class=\"line\">        bigs,smalls = [],[]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> arr:</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &lt;middle:</span><br><span class=\"line\">                smalls.append(i)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                bigs.append(i)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> quick_sort(smalls) + [middle] + quick_sort(bigs)</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/../images/%E7%AE%97%E6%B3%95%E5%9B%9E%E9%A1%BE/640.gif\" alt=\"img\"></p>\n","categories":["算法"],"tags":["算法"]},{"title":"管理员账号首次登录设备的时候，会提示修改密码","url":"/post/f9483a14.html","content":"<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p><strong>如果用户的登录密码为初始密码，设备输出相应的提示信息询问用户是否修改初始密码，可以使用*<em>undo password alert original关闭，关闭后首次登录不再提示修改密码。*</em></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;HUAWEI&gt; system-view</span><br><span class=\"line\">[HUAWEI] aaa</span><br><span class=\"line\">[HUAWEI-aaa] local-aaa-user password policy administrator</span><br><span class=\"line\">[HUAWEI-aaa-lupp-admin] password alert original</span><br></pre></td></tr></table></figure>\n\n","categories":["华为交换机"],"tags":["交换机","华为"]},{"title":"局域网打印机突然连接不上/不能打印0x0000011b 正式解决方案（无需卸载补丁）","url":"/post/49f13f70.html","content":"<p>局域网打印机突然连接不上&#x2F;不能打印0x0000011b 正式解决方案</p>\n<ol>\n<li>同时按住“win+R”调出运行窗口。</li>\n<li>在运行窗口输入“regedit”并点确定调出注册表编辑器。</li>\n<li>找到以下路径“HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Print”，空白处单击右键，点击新建值“DWORD (32位）值（D）”。</li>\n<li>给该新建值重命名为“RpcAuthnLevelPrivacyEnabled”。</li>\n<li>重命名之后选择值“RpcAuthnLevelPrivacyEnabled”，单击右键&gt;修改&gt;键入数值“0”&gt;确定。</li>\n<li>重启电脑即可。</li>\n</ol>\n","categories":["打印机"],"tags":["打印机"]},{"title":"静态路由","url":"/post/fdbc3202.html","content":"<p>静态路由是指由用户或网络管理员手工配置的路由信息。当网络的拓扑结构或链路的状态发生变化时，网络管理员需要手工去修改路由表中相关的静态路由信息。静态路由信息在缺省情况下是私有的，不会传递给其他的路由器。当然，网管员也可以通过对路由器进行设置使之成为共享的。静态路由一般适用于比较简单的网络环境，在这样的环境中，网络管理员易于清楚地了解网络的拓扑结构，便于设置正确的路由信息。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>图:</p>\n<p><img data-src=\"/../images/%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/image-20230315124438010.png\" alt=\"image-20230315124438010\"></p>\n<p>目的:PC1与PC2通信</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>R1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">添加PC3所在网段,以及下一条地址(下一条为对端接口地址)</span><br><span class=\"line\">ip route-static 192.168.3.0 255.255.255.0 12.1.1.2</span><br></pre></td></tr></table></figure>\n\n\n\n<p>R2</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">添加PC3所在网段,以及下一条地址(下一条为对端接口地址)</span><br><span class=\"line\">ip route-static 192.168.3.0 255.255.255.0 23.1.1.3</span><br><span class=\"line\">当然别忘了数据是双向的,需要有回包</span><br><span class=\"line\">ip route-static 192.168.1.0 255.255.255.0 12.1.1.1</span><br></pre></td></tr></table></figure>\n\n<p>R3</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">回包,PC1所在的网段,以及下一条地址</span><br><span class=\"line\">ip route-static 192.168.1.0 255.255.255.0 23.1.1.2</span><br></pre></td></tr></table></figure>\n\n<p>测试</p>\n<p><img data-src=\"/../images/%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/image-20230315130210102.png\" alt=\"image-20230315130210102\"></p>\n<p>热知识:在R1处 ping PC2 是不会通的  因为没有路由,需要指定源才能通</p>\n<p><img data-src=\"/../images/%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/image-20230315130321893.png\" alt=\"image-20230315130321893\"></p>\n<p><img data-src=\"/../images/%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/image-20230315130357195.png\" alt=\"image-20230315130357195\"></p>\n<p>R1配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[R1]dis cu</span><br><span class=\"line\">[V200R003C00]</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"> sysname R1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"> snmp-agent local-engineid 800007DB03000000000000</span></span><br><span class=\"line\"> snmp-agent </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"> clock timezone China-Standard-Time minus 08:00:00</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">portal local-server load flash:/portalpage.zip</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"> drop illegal-mac alarm</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"> wlan ac-global carrier <span class=\"built_in\">id</span> other ac <span class=\"built_in\">id</span> 0</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"> <span class=\"built_in\">set</span> cpu-usage threshold 80 restore 75</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">aaa</span> </span><br><span class=\"line\"> authentication-scheme default</span><br><span class=\"line\"> authorization-scheme default</span><br><span class=\"line\"> accounting-scheme default</span><br><span class=\"line\"> domain default </span><br><span class=\"line\"> domain default_admin </span><br><span class=\"line\"> local-user admin password cipher %$%$K8m.Nt84DZ&#125;e#&lt;0`8bmE3Uw&#125;%$%$</span><br><span class=\"line\"> local-user admin service-type http</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">firewall zone Local</span></span><br><span class=\"line\"> priority 15</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">interface GigabitEthernet0/0/0</span></span><br><span class=\"line\"> ip address 192.168.1.254 255.255.255.0 </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">interface GigabitEthernet0/0/1</span></span><br><span class=\"line\"> ip address 12.1.1.1 255.255.255.0 </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">interface GigabitEthernet0/0/2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">interface NULL0</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">ip route-static 192.168.3.0 255.255.255.0 12.1.1.2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">user-interface con 0</span></span><br><span class=\"line\"> authentication-mode password</span><br><span class=\"line\">user-interface vty 0 4</span><br><span class=\"line\">user-interface vty 16 20</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">wlan ac</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"built_in\">return</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>R2 配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;R2&gt;dis cu </span><br><span class=\"line\">[V200R003C00]</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"> sysname R2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"> snmp-agent local-engineid 800007DB03000000000000</span></span><br><span class=\"line\"> snmp-agent </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"> clock timezone China-Standard-Time minus 08:00:00</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">portal local-server load portalpage.zip</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"> drop illegal-mac alarm</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"> <span class=\"built_in\">set</span> cpu-usage threshold 80 restore 75</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">aaa</span> </span><br><span class=\"line\"> authentication-scheme default</span><br><span class=\"line\"> authorization-scheme default</span><br><span class=\"line\"> accounting-scheme default</span><br><span class=\"line\"> domain default </span><br><span class=\"line\"> domain default_admin </span><br><span class=\"line\"> local-user admin password cipher %$%$K8m.Nt84DZ&#125;e#&lt;0`8bmE3Uw&#125;%$%$</span><br><span class=\"line\"> local-user admin service-type http</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">firewall zone Local</span></span><br><span class=\"line\"> priority 15</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">interface GigabitEthernet0/0/0</span></span><br><span class=\"line\"> ip address 12.1.1.2 255.255.255.0 </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">interface GigabitEthernet0/0/1</span></span><br><span class=\"line\"> ip address 23.1.1.2 255.255.255.0 </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">interface GigabitEthernet0/0/2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">interface NULL0</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">ip route-static 192.168.1.0 255.255.255.0 12.1.1.1</span></span><br><span class=\"line\">ip route-static 192.168.3.0 255.255.255.0 23.1.1.3</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">user-interface con 0</span></span><br><span class=\"line\"> authentication-mode password</span><br><span class=\"line\">user-interface vty 0 4</span><br><span class=\"line\">user-interface vty 16 20</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">wlan ac</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"built_in\">return</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>R3配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;R3&gt;dis cu </span><br><span class=\"line\">[V200R003C00]</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"> sysname R3</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"> snmp-agent local-engineid 800007DB03000000000000</span></span><br><span class=\"line\"> snmp-agent </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"> clock timezone China-Standard-Time minus 08:00:00</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">portal local-server load portalpage.zip</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"> drop illegal-mac alarm</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"> <span class=\"built_in\">set</span> cpu-usage threshold 80 restore 75</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">aaa</span> </span><br><span class=\"line\"> authentication-scheme default</span><br><span class=\"line\"> authorization-scheme default</span><br><span class=\"line\"> accounting-scheme default</span><br><span class=\"line\"> domain default </span><br><span class=\"line\"> domain default_admin </span><br><span class=\"line\"> local-user admin password cipher %$%$K8m.Nt84DZ&#125;e#&lt;0`8bmE3Uw&#125;%$%$</span><br><span class=\"line\"> local-user admin service-type http</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">firewall zone Local</span></span><br><span class=\"line\"> priority 15</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">interface GigabitEthernet0/0/0</span></span><br><span class=\"line\"> ip address 23.1.1.3 255.255.255.0 </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">interface GigabitEthernet0/0/1</span></span><br><span class=\"line\"> ip address 192.168.3.254 255.255.255.0 </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">interface GigabitEthernet0/0/2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">interface NULL0</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">ip route-static 192.168.1.0 255.255.255.0 23.1.1.2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">user-interface con 0</span></span><br><span class=\"line\"> authentication-mode password</span><br><span class=\"line\">user-interface vty 0 4</span><br><span class=\"line\">user-interface vty 16 20</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">wlan ac</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"built_in\">return</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n","categories":["路由"],"tags":["网络","路由"]},{"title":"网络项目案例","url":"/post/93601b8a.html","content":"<p><img data-src=\"/../images/%E7%BD%91%E7%BB%9C%E9%A1%B9%E7%9B%AE%E6%A1%88%E4%BE%8B/image-20230607155532195.png\" alt=\"image-20230607155532195\"></p>\n<span id=\"more\"></span>\n\n<ol>\n<li>根据标注配置IP</li>\n<li>所有网络设备支持远程管理,aaa认证,用户名admin 密码123</li>\n<li>交换机直接用trunk口 互联</li>\n<li>通过SW1实现vlan间路由</li>\n<li>使SW1成为根桥,手动改优先级为4096(<code>stp priority 4096</code>)</li>\n<li>运行ospf协议 </li>\n<li>R1配置静态缺省路由,SW1通过OSPF学习缺省路由(<code>default-route-advertise</code>)</li>\n<li>在R1上配置pat,只需要转换4个vlan网段</li>\n<li>R1与R2之间使用PPP协议,用chap双向认证</li>\n</ol>\n","categories":["综合练习"],"tags":["综合练习"]},{"title":"冯诺依曼计算机结构","url":"/post/c20b476.html","content":"<p>冯·诺依曼结构也称普林斯顿结构，是一种将程序指令存储器和数据存储器合并在一起的存储器结构。程序指令存储地址和数据存储地址指向同一个存储器的不同物理位置，因此程序指令和数据的宽度相同，如英特尔公司的8086中央处理器的程序指令和数据都是16位宽。<br>数学家冯·诺依曼提出了计算机制造的三个基本原则，即采用二进制逻辑、程序存储执行以及计算机由五个部分组成（运算器、控制器、存储器、输入设备、输出设备），这套理论被称为冯·诺依曼体系结构。</p>\n<span id=\"more\"></span>\n\n<p><img data-src=\"/../images/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%93%E6%9E%84/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%93%E6%9E%84.png\" alt=\"冯诺依曼计算机结构\"></p>\n<p>冯·诺伊曼计算机结构的关键特点包括：</p>\n<ul>\n<li><strong>存储程序概念</strong>：程序指令和数据以相同的格式存储在存储器中，程序可以按顺序执行存储器中的指令。这种存储程序的特性使得冯·诺伊曼计算机能够灵活地执行不同的任务，而无需物理改变硬件。</li>\n<li><strong>顺序执行</strong>：指令按照存储顺序依次执行，每条指令执行完成后，控制单元会自动转移到下一条指令。</li>\n<li><strong>单一总线结构</strong>：CPU、存储器和输入&#x2F;输出设备之间通过一个共享的总线进行通信。这简化了计算机系统的设计和连接。</li>\n<li><strong>通用性</strong>：冯·诺伊曼计算机可以执行各种不同类型的任务，因为它们的指令集是通用的，可以处理不同的计算和数据处理需求。</li>\n</ul>\n<p>冯·诺伊曼计算机结构被广泛采用，并成为了现代计算机体系结构的基础。虽然现代计算机系统在冯·诺伊曼结构的基础上进行了各种扩展和改进，但其基本原理仍然是冯·诺伊曼所提出的。</p>\n","categories":["网工"],"tags":["网工","计算机基础"]},{"title":"网络工程师中级软考知识点","url":"/post/c8acf84f.html","content":"<p>记录网络工程师中级软考中的知识点,用于回顾</p>\n<span id=\"more\"></span>\n\n<h3 id=\"流水线计算\"><a href=\"#流水线计算\" class=\"headerlink\" title=\"流水线计算\"></a>流水线计算</h3><p>流水线执行时间:(t<sub>1</sub>+t<sub>2</sub>+t<sub>3</sub>)+(n-1)t<sub>1</sub></p>\n<p>其中t<sub>1</sub>是流水线周期,它表示执行时间最长的一段</p>\n<p>**例:**若治疗流水线把一条指令分为取指,分析,执行三部分,且三部分的时间分别是取指2ns,分析2ns,执行1ns.那么,流水线周期是?100条执行全部执行完需要的时间是?</p>\n<p><strong>周期:</strong> 最长的时间2ns</p>\n<p><strong>所需时间为:</strong> (2+2+1)+(100-1)X2&#x3D;203ns</p>\n<h3 id=\"流水线技术指标\"><a href=\"#流水线技术指标\" class=\"headerlink\" title=\"流水线技术指标\"></a>流水线技术指标</h3><ul>\n<li>吞吐率: Tp &#x3D; n &#x2F; Tk 其中n表示指令的条数,Tk表示流水线的时间</li>\n<li>加速比: S&#x3D; Ts&#x2F;Tk  其中 Ts 表示 不使用流水线的时间 Tk 表示流水线的时间</li>\n<li>效率  看具体工作时的状态</li>\n</ul>\n<h3 id=\"主机存储基础\"><a href=\"#主机存储基础\" class=\"headerlink\" title=\"主机存储基础\"></a>主机存储基础</h3><p>总的容量&#x2F;芯片的容量 &#x3D; 需要多少个芯片</p>\n<p><strong>例:</strong>,按字节编址,地址从A4000H–CBFFFH,则表示有(CBFFF-A4000) +1个字节,即28000H个字节,也就是163840个字节,等于160KB</p>\n<p>假设每个芯片单元是32KB,那么160&#x2F;32&#x3D;5个芯片单元,所以需要5个</p>\n<h3 id=\"Cache\"><a href=\"#Cache\" class=\"headerlink\" title=\"Cache\"></a>Cache</h3><p>如果Cache的访问命中率为h,而Cache的访问周期时间为t<sub>1</sub>,主存储器的访问周期时间是t<sub>2</sub>,则整个系统的平均访问时间为</p>\n<p>t<sub>3</sub> &#x3D; h X t<sub>1</sub>+(1-h) X t<sub>2</sub></p>\n","categories":["网工"],"tags":["计算机","知识点"]},{"title":"计算机网络体系结构","url":"/post/507ba1e8.html","content":"<p>计算机网络体系结构通常指的是用于定义和组织计算机网络各层次功能的模型。这些模型帮助我们理解、设计和实现计算机网络。最著名的网络体系结构模型有两种,OSI参考模型和TCP&#x2F;IP模型（互联网模型)：</p>\n<span id=\"more\"></span>\n\n<h3 id=\"1-OSI参考模型（Open-Systems-Interconnection-Model）\"><a href=\"#1-OSI参考模型（Open-Systems-Interconnection-Model）\" class=\"headerlink\" title=\"1. OSI参考模型（Open Systems Interconnection Model）\"></a>1. OSI参考模型（Open Systems Interconnection Model）</h3><p>OSI模型由国际标准化组织（ISO）提出，是一个七层的网络体系结构模型。每一层都定义了特定的网络功能。七层模型从上到下依次为：</p>\n<ol>\n<li><strong>应用层（Application Layer）</strong>：提供网络服务和应用接口，如HTTP、FTP、SMTP等。</li>\n<li><strong>表示层（Presentation Layer）</strong>：处理数据的表示、加密和解密，如数据格式转换、数据压缩。</li>\n<li><strong>会话层（Session Layer）</strong>：管理会话和对话控制，如建立、维护和终止通信会话。</li>\n<li><strong>传输层（Transport Layer）</strong>：提供端到端的通信服务和数据流控制，如TCP、UDP。</li>\n<li><strong>网络层（Network Layer）</strong>：处理数据包的路由和转发，如IP协议。</li>\n<li><strong>数据链路层（Data Link Layer）</strong>：提供节点间的数据传输和错误检测，如以太网（Ethernet）。</li>\n<li><strong>物理层（Physical Layer）</strong>：负责物理介质上的数据传输，如比特流、信号编码。</li>\n</ol>\n<h2 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h2><p>计算机网络体系结构通常分为多个层次，每一层都有其特定的功能。物理层是这些层次中的最低层，负责实际的数据传输。以下是关于物理层的一些关键点：</p>\n<h3 id=\"1-主要功能\"><a href=\"#1-主要功能\" class=\"headerlink\" title=\"1. 主要功能\"></a>1. 主要功能</h3><ul>\n<li><strong>比特传输</strong>：物理层的主要功能是将数据比特流通过通信媒介从一个节点传输到另一个节点。它处理的是原始的比特，而不是任何高层数据结构。</li>\n<li><strong>信号编码</strong>：物理层将数据比特编码为适合在物理介质上传输的信号。这些信号可以是电气的（例如铜线）、光学的（例如光纤）或无线的（例如无线电波）。</li>\n<li><strong>数据速率</strong>：物理层定义了传输数据的速率，即比特率（bit rate），通常以每秒比特数（bps）为单位。</li>\n<li><strong>物理拓扑</strong>：物理层定义了网络设备的物理连接和布局，包括总线型、星型、环型和网状拓扑。</li>\n<li><strong>介质类型</strong>：物理层规定了传输介质的类型，如双绞线、电缆、光纤和无线电波等。</li>\n</ul>\n<h3 id=\"2-传输介质\"><a href=\"#2-传输介质\" class=\"headerlink\" title=\"2. 传输介质\"></a>2. 传输介质</h3><ul>\n<li><strong>双绞线</strong>：常用于局域网（LAN），如以太网。包括屏蔽双绞线（STP）和非屏蔽双绞线（UTP）。</li>\n<li><strong>同轴电缆</strong>：用于有线电视系统和早期的计算机网络。</li>\n<li><strong>光纤</strong>：通过光信号传输数据，具有高带宽和低干扰的优点。</li>\n<li><strong>无线电波</strong>：用于无线网络（Wi-Fi）、蓝牙、移动通信等。</li>\n</ul>\n<h3 id=\"3-信号传输\"><a href=\"#3-信号传输\" class=\"headerlink\" title=\"3. 信号传输\"></a>3. 信号传输</h3><ul>\n<li><strong>模拟信号和数字信号</strong>：物理层可以传输模拟信号（如声音和视频）和数字信号（如计算机数据）。</li>\n<li><strong>调制和解调</strong>：在传输模拟信号时，通常需要对信号进行调制和解调。例如，调制解调器（modem）将数字信号转换为模拟信号以通过电话线传输。</li>\n</ul>\n<h3 id=\"4-标准和协议\"><a href=\"#4-标准和协议\" class=\"headerlink\" title=\"4. 标准和协议\"></a>4. 标准和协议</h3><ul>\n<li><strong>IEEE 802.3（以太网）</strong>：定义了局域网中使用的有线连接的物理层和数据链路层。</li>\n<li><strong>IEEE 802.11（无线局域网，Wi-Fi）</strong>：定义了无线网络的物理层和数据链路层。</li>\n<li><strong>ITU-T G.703</strong>：定义了数字信号在电信网络中的物理层传输。</li>\n</ul>\n<h3 id=\"5-硬件设备\"><a href=\"#5-硬件设备\" class=\"headerlink\" title=\"5. 硬件设备\"></a>5. 硬件设备</h3><ul>\n<li><strong>网卡（NIC）</strong>：连接计算机到网络的接口，负责物理层和数据链路层的操作。</li>\n<li><strong>集线器（Hub）</strong>：一种简单的网络设备，工作在物理层，用于将多个网络设备连接在一起。</li>\n<li>**交换机（Switch）**和**路由器（Router）**：尽管主要工作在数据链路层和网络层，它们也涉及物理层的操作，尤其是在数据包的实际传输过程中。</li>\n</ul>\n<p>物理层是计算机网络的基础，其性能和可靠性直接影响整个网络系统的运行效率和稳定性。理解物理层的工作原理和技术是掌握计算机网络的第一步。</p>\n<h2 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h2><p>数据链路层是计算机网络体系结构中的一个重要层次，负责在相邻节点之间可靠地传输数据帧。无论是 OSI 模型中的第二层，还是 TCP&#x2F;IP 模型中的链路层部分，数据链路层都起着关键作用。以下是数据链路层的主要功能、组成部分和协议：</p>\n<h3 id=\"1-数据链路层的主要功能\"><a href=\"#1-数据链路层的主要功能\" class=\"headerlink\" title=\"1.数据链路层的主要功能\"></a>1.数据链路层的主要功能</h3><ol>\n<li><strong>帧封装</strong>：数据链路层将来自网络层的数据包封装成帧，以便在物理介质上传输。每个帧包含必要的控制信息，如源地址、目的地址和校验和（CRC）。</li>\n<li><strong>物理地址寻址</strong>：数据链路层使用物理地址（如 MAC 地址）来标识网络中的节点，确保帧能够正确传输到目标设备。</li>\n<li><strong>错误检测与校正</strong>：数据链路层通过附加到帧的校验和（如循环冗余校验 CRC）来检测传输过程中的错误。某些协议还支持错误校正。</li>\n<li><strong>流量控制</strong>：数据链路层可以控制数据传输速率，防止发送方数据传输速率超过接收方处理能力，从而避免丢包。</li>\n<li><strong>帧同步</strong>：数据链路层确保发送和接收方在帧的开始和结束处保持同步，使得数据传输可靠且有序。</li>\n<li><strong>介质访问控制</strong>：在共享传输介质（如以太网）中，数据链路层管理多个设备对介质的访问，避免冲突和碰撞。这通常通过协议如 CSMA&#x2F;CD（载波侦听多路访问&#x2F;冲突检测）实现。</li>\n</ol>\n<h3 id=\"2-数据链路层的组成部分\"><a href=\"#2-数据链路层的组成部分\" class=\"headerlink\" title=\"2.数据链路层的组成部分\"></a>2.数据链路层的组成部分</h3><p>数据链路层通常分为两个子层：</p>\n<ol>\n<li><strong>逻辑链路控制子层（LLC, Logical Link Control）</strong>：<ul>\n<li>提供接口给网络层并管理逻辑链路通信。</li>\n<li>处理帧的多路复用、流量控制和错误检测。</li>\n<li>LLC 标头包含服务访问点（SAP）来区分上层协议。</li>\n</ul>\n</li>\n<li><strong>介质访问控制子层（MAC, Media Access Control）</strong>：<ul>\n<li>负责控制对物理传输介质的访问。</li>\n<li>定义 MAC 地址用于设备标识。</li>\n<li>实现特定网络技术的介质访问控制方法，如以太网、Wi-Fi。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-常见的数据链路层协议\"><a href=\"#3-常见的数据链路层协议\" class=\"headerlink\" title=\"3.常见的数据链路层协议\"></a>3.常见的数据链路层协议</h3><ul>\n<li><strong>以太网（Ethernet, IEEE 802.3）</strong>：广泛使用的局域网技术，使用 MAC 地址进行设备标识和 CSMA&#x2F;CD 进行介质访问控制。</li>\n<li><strong>Wi-Fi（IEEE 802.11）</strong>：无线局域网标准，使用 CSMA&#x2F;CA（载波侦听多路访问&#x2F;冲突避免）来管理无线信道。</li>\n<li><strong>点对点协议（PPP, Point-to-Point Protocol）</strong>：用于直接连接两个节点，如拨号网络和 VPN。</li>\n<li><strong>帧中继（Frame Relay）</strong>：用于广域网连接，通过虚拟电路传输数据帧。</li>\n<li><strong>令牌环（Token Ring, IEEE 802.5）</strong>：早期局域网技术，通过令牌传递机制避免冲突。</li>\n</ul>\n<h3 id=\"4-数据链路层的挑战和解决方案\"><a href=\"#4-数据链路层的挑战和解决方案\" class=\"headerlink\" title=\"4.数据链路层的挑战和解决方案\"></a>4.数据链路层的挑战和解决方案</h3><ul>\n<li><strong>冲突和碰撞</strong>：在共享介质（如以太网）中，多个设备同时发送数据可能导致冲突。CSMA&#x2F;CD 和 CSMA&#x2F;CA 是常用的解决方案。</li>\n<li><strong>错误检测与校正</strong>：数据传输中可能出现位错误，CRC 是常用的错误检测方法，而重传机制（如 ARQ）用于错误校正。</li>\n<li><strong>流量控制</strong>：防止发送方数据溢出接收方缓冲区，常用的流量控制机制包括滑动窗口协议和速率控制协议。</li>\n</ul>\n<p>数据链路层在计算机网络中扮演着关键角色，它确保数据在相邻节点之间可靠传输，并通过错误检测、流量控制和介质访问控制等功能提高传输的可靠性和效率。数据链路层协议和技术不断演进，以适应不断变化的网络需求和环境</p>\n","categories":["软考"],"tags":["计算机","软考","网络工程师"]}]